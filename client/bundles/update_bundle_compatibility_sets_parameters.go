// Code generated by go-swagger; DO NOT EDIT.

// Copyright Â© 2023 VMware, Inc. All Rights Reserved.
// Code licenced under: BSD-2

package bundles

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"net/http"
	"time"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/runtime"
	cr "github.com/go-openapi/runtime/client"
	"github.com/go-openapi/strfmt"

	"vcf-sdk-go/models"
)

// NewUpdateBundleCompatibilitySetsParams creates a new UpdateBundleCompatibilitySetsParams object,
// with the default timeout for this client.
//
// Default values are not hydrated, since defaults are normally applied by the API server side.
//
// To enforce default values in parameter, use SetDefaults or WithDefaults.
func NewUpdateBundleCompatibilitySetsParams() *UpdateBundleCompatibilitySetsParams {
	return &UpdateBundleCompatibilitySetsParams{
		timeout: cr.DefaultTimeout,
	}
}

// NewUpdateBundleCompatibilitySetsParamsWithTimeout creates a new UpdateBundleCompatibilitySetsParams object
// with the ability to set a timeout on a request.
func NewUpdateBundleCompatibilitySetsParamsWithTimeout(timeout time.Duration) *UpdateBundleCompatibilitySetsParams {
	return &UpdateBundleCompatibilitySetsParams{
		timeout: timeout,
	}
}

// NewUpdateBundleCompatibilitySetsParamsWithContext creates a new UpdateBundleCompatibilitySetsParams object
// with the ability to set a context for a request.
func NewUpdateBundleCompatibilitySetsParamsWithContext(ctx context.Context) *UpdateBundleCompatibilitySetsParams {
	return &UpdateBundleCompatibilitySetsParams{
		Context: ctx,
	}
}

// NewUpdateBundleCompatibilitySetsParamsWithHTTPClient creates a new UpdateBundleCompatibilitySetsParams object
// with the ability to set a custom HTTPClient for a request.
func NewUpdateBundleCompatibilitySetsParamsWithHTTPClient(client *http.Client) *UpdateBundleCompatibilitySetsParams {
	return &UpdateBundleCompatibilitySetsParams{
		HTTPClient: client,
	}
}

/*
UpdateBundleCompatibilitySetsParams contains all the parameters to send to the API endpoint

	for the update bundle compatibility sets operation.

	Typically these are written to a http.Request.
*/
type UpdateBundleCompatibilitySetsParams struct {

	/* BundleUpdateSpec.

	   Bundle Update Specification
	*/
	BundleUpdateSpec *models.BundleUpdateSpec

	timeout    time.Duration
	Context    context.Context
	HTTPClient *http.Client
}

// WithDefaults hydrates default values in the update bundle compatibility sets params (not the query body).
//
// All values with no default are reset to their zero value.
func (o *UpdateBundleCompatibilitySetsParams) WithDefaults() *UpdateBundleCompatibilitySetsParams {
	o.SetDefaults()
	return o
}

// SetDefaults hydrates default values in the update bundle compatibility sets params (not the query body).
//
// All values with no default are reset to their zero value.
func (o *UpdateBundleCompatibilitySetsParams) SetDefaults() {
	// no default values defined for this parameter
}

// WithTimeout adds the timeout to the update bundle compatibility sets params
func (o *UpdateBundleCompatibilitySetsParams) WithTimeout(timeout time.Duration) *UpdateBundleCompatibilitySetsParams {
	o.SetTimeout(timeout)
	return o
}

// SetTimeout adds the timeout to the update bundle compatibility sets params
func (o *UpdateBundleCompatibilitySetsParams) SetTimeout(timeout time.Duration) {
	o.timeout = timeout
}

// WithContext adds the context to the update bundle compatibility sets params
func (o *UpdateBundleCompatibilitySetsParams) WithContext(ctx context.Context) *UpdateBundleCompatibilitySetsParams {
	o.SetContext(ctx)
	return o
}

// SetContext adds the context to the update bundle compatibility sets params
func (o *UpdateBundleCompatibilitySetsParams) SetContext(ctx context.Context) {
	o.Context = ctx
}

// WithHTTPClient adds the HTTPClient to the update bundle compatibility sets params
func (o *UpdateBundleCompatibilitySetsParams) WithHTTPClient(client *http.Client) *UpdateBundleCompatibilitySetsParams {
	o.SetHTTPClient(client)
	return o
}

// SetHTTPClient adds the HTTPClient to the update bundle compatibility sets params
func (o *UpdateBundleCompatibilitySetsParams) SetHTTPClient(client *http.Client) {
	o.HTTPClient = client
}

// WithBundleUpdateSpec adds the bundleUpdateSpec to the update bundle compatibility sets params
func (o *UpdateBundleCompatibilitySetsParams) WithBundleUpdateSpec(bundleUpdateSpec *models.BundleUpdateSpec) *UpdateBundleCompatibilitySetsParams {
	o.SetBundleUpdateSpec(bundleUpdateSpec)
	return o
}

// SetBundleUpdateSpec adds the bundleUpdateSpec to the update bundle compatibility sets params
func (o *UpdateBundleCompatibilitySetsParams) SetBundleUpdateSpec(bundleUpdateSpec *models.BundleUpdateSpec) {
	o.BundleUpdateSpec = bundleUpdateSpec
}

// WriteToRequest writes these params to a swagger request
func (o *UpdateBundleCompatibilitySetsParams) WriteToRequest(r runtime.ClientRequest, reg strfmt.Registry) error {

	if err := r.SetTimeout(o.timeout); err != nil {
		return err
	}
	var res []error
	if o.BundleUpdateSpec != nil {
		if err := r.SetBodyParam(o.BundleUpdateSpec); err != nil {
			return err
		}
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}
