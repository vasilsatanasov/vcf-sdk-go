// Code generated by go-swagger; DO NOT EDIT.

// Copyright Â© 2023 VMware, Inc. All Rights Reserved.
// Code licenced under: BSD-2

package bundles

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"
	"io"

	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"

	"github.com/vmware/vcf-sdk-go/models"
)

// UpdateBundleReader is a Reader for the UpdateBundle structure.
type UpdateBundleReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *UpdateBundleReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {
	case 200:
		result := NewUpdateBundleOK()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil
	case 202:
		result := NewUpdateBundleAccepted()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil
	case 400:
		result := NewUpdateBundleBadRequest()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 409:
		result := NewUpdateBundleConflict()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 500:
		result := NewUpdateBundleInternalServerError()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	default:
		return nil, runtime.NewAPIError("response status code does not match any response statuses defined for this endpoint in the swagger spec", response, response.Code())
	}
}

// NewUpdateBundleOK creates a UpdateBundleOK with default headers values
func NewUpdateBundleOK() *UpdateBundleOK {
	return &UpdateBundleOK{}
}

/*
UpdateBundleOK describes a response with status code 200, with default header values.

OK
*/
type UpdateBundleOK struct {
	Payload *models.Task
}

// IsSuccess returns true when this update bundle o k response has a 2xx status code
func (o *UpdateBundleOK) IsSuccess() bool {
	return true
}

// IsRedirect returns true when this update bundle o k response has a 3xx status code
func (o *UpdateBundleOK) IsRedirect() bool {
	return false
}

// IsClientError returns true when this update bundle o k response has a 4xx status code
func (o *UpdateBundleOK) IsClientError() bool {
	return false
}

// IsServerError returns true when this update bundle o k response has a 5xx status code
func (o *UpdateBundleOK) IsServerError() bool {
	return false
}

// IsCode returns true when this update bundle o k response a status code equal to that given
func (o *UpdateBundleOK) IsCode(code int) bool {
	return code == 200
}

func (o *UpdateBundleOK) Error() string {
	return fmt.Sprintf("[PATCH /v1/bundles/{id}][%d] updateBundleOK  %+v", 200, o.Payload)
}

func (o *UpdateBundleOK) String() string {
	return fmt.Sprintf("[PATCH /v1/bundles/{id}][%d] updateBundleOK  %+v", 200, o.Payload)
}

func (o *UpdateBundleOK) GetPayload() *models.Task {
	return o.Payload
}

func (o *UpdateBundleOK) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.Task)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewUpdateBundleAccepted creates a UpdateBundleAccepted with default headers values
func NewUpdateBundleAccepted() *UpdateBundleAccepted {
	return &UpdateBundleAccepted{}
}

/*
UpdateBundleAccepted describes a response with status code 202, with default header values.

Accepted
*/
type UpdateBundleAccepted struct {
	Payload *models.Task
}

// IsSuccess returns true when this update bundle accepted response has a 2xx status code
func (o *UpdateBundleAccepted) IsSuccess() bool {
	return true
}

// IsRedirect returns true when this update bundle accepted response has a 3xx status code
func (o *UpdateBundleAccepted) IsRedirect() bool {
	return false
}

// IsClientError returns true when this update bundle accepted response has a 4xx status code
func (o *UpdateBundleAccepted) IsClientError() bool {
	return false
}

// IsServerError returns true when this update bundle accepted response has a 5xx status code
func (o *UpdateBundleAccepted) IsServerError() bool {
	return false
}

// IsCode returns true when this update bundle accepted response a status code equal to that given
func (o *UpdateBundleAccepted) IsCode(code int) bool {
	return code == 202
}

func (o *UpdateBundleAccepted) Error() string {
	return fmt.Sprintf("[PATCH /v1/bundles/{id}][%d] updateBundleAccepted  %+v", 202, o.Payload)
}

func (o *UpdateBundleAccepted) String() string {
	return fmt.Sprintf("[PATCH /v1/bundles/{id}][%d] updateBundleAccepted  %+v", 202, o.Payload)
}

func (o *UpdateBundleAccepted) GetPayload() *models.Task {
	return o.Payload
}

func (o *UpdateBundleAccepted) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.Task)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewUpdateBundleBadRequest creates a UpdateBundleBadRequest with default headers values
func NewUpdateBundleBadRequest() *UpdateBundleBadRequest {
	return &UpdateBundleBadRequest{}
}

/*
UpdateBundleBadRequest describes a response with status code 400, with default header values.

Bad Request
*/
type UpdateBundleBadRequest struct {
	Payload *models.Error
}

// IsSuccess returns true when this update bundle bad request response has a 2xx status code
func (o *UpdateBundleBadRequest) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this update bundle bad request response has a 3xx status code
func (o *UpdateBundleBadRequest) IsRedirect() bool {
	return false
}

// IsClientError returns true when this update bundle bad request response has a 4xx status code
func (o *UpdateBundleBadRequest) IsClientError() bool {
	return true
}

// IsServerError returns true when this update bundle bad request response has a 5xx status code
func (o *UpdateBundleBadRequest) IsServerError() bool {
	return false
}

// IsCode returns true when this update bundle bad request response a status code equal to that given
func (o *UpdateBundleBadRequest) IsCode(code int) bool {
	return code == 400
}

func (o *UpdateBundleBadRequest) Error() string {
	return fmt.Sprintf("[PATCH /v1/bundles/{id}][%d] updateBundleBadRequest  %+v", 400, o.Payload)
}

func (o *UpdateBundleBadRequest) String() string {
	return fmt.Sprintf("[PATCH /v1/bundles/{id}][%d] updateBundleBadRequest  %+v", 400, o.Payload)
}

func (o *UpdateBundleBadRequest) GetPayload() *models.Error {
	return o.Payload
}

func (o *UpdateBundleBadRequest) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.Error)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewUpdateBundleConflict creates a UpdateBundleConflict with default headers values
func NewUpdateBundleConflict() *UpdateBundleConflict {
	return &UpdateBundleConflict{}
}

/*
UpdateBundleConflict describes a response with status code 409, with default header values.

Conflict
*/
type UpdateBundleConflict struct {
	Payload *models.Error
}

// IsSuccess returns true when this update bundle conflict response has a 2xx status code
func (o *UpdateBundleConflict) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this update bundle conflict response has a 3xx status code
func (o *UpdateBundleConflict) IsRedirect() bool {
	return false
}

// IsClientError returns true when this update bundle conflict response has a 4xx status code
func (o *UpdateBundleConflict) IsClientError() bool {
	return true
}

// IsServerError returns true when this update bundle conflict response has a 5xx status code
func (o *UpdateBundleConflict) IsServerError() bool {
	return false
}

// IsCode returns true when this update bundle conflict response a status code equal to that given
func (o *UpdateBundleConflict) IsCode(code int) bool {
	return code == 409
}

func (o *UpdateBundleConflict) Error() string {
	return fmt.Sprintf("[PATCH /v1/bundles/{id}][%d] updateBundleConflict  %+v", 409, o.Payload)
}

func (o *UpdateBundleConflict) String() string {
	return fmt.Sprintf("[PATCH /v1/bundles/{id}][%d] updateBundleConflict  %+v", 409, o.Payload)
}

func (o *UpdateBundleConflict) GetPayload() *models.Error {
	return o.Payload
}

func (o *UpdateBundleConflict) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.Error)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewUpdateBundleInternalServerError creates a UpdateBundleInternalServerError with default headers values
func NewUpdateBundleInternalServerError() *UpdateBundleInternalServerError {
	return &UpdateBundleInternalServerError{}
}

/*
UpdateBundleInternalServerError describes a response with status code 500, with default header values.

Internal Server Error
*/
type UpdateBundleInternalServerError struct {
	Payload *models.Error
}

// IsSuccess returns true when this update bundle internal server error response has a 2xx status code
func (o *UpdateBundleInternalServerError) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this update bundle internal server error response has a 3xx status code
func (o *UpdateBundleInternalServerError) IsRedirect() bool {
	return false
}

// IsClientError returns true when this update bundle internal server error response has a 4xx status code
func (o *UpdateBundleInternalServerError) IsClientError() bool {
	return false
}

// IsServerError returns true when this update bundle internal server error response has a 5xx status code
func (o *UpdateBundleInternalServerError) IsServerError() bool {
	return true
}

// IsCode returns true when this update bundle internal server error response a status code equal to that given
func (o *UpdateBundleInternalServerError) IsCode(code int) bool {
	return code == 500
}

func (o *UpdateBundleInternalServerError) Error() string {
	return fmt.Sprintf("[PATCH /v1/bundles/{id}][%d] updateBundleInternalServerError  %+v", 500, o.Payload)
}

func (o *UpdateBundleInternalServerError) String() string {
	return fmt.Sprintf("[PATCH /v1/bundles/{id}][%d] updateBundleInternalServerError  %+v", 500, o.Payload)
}

func (o *UpdateBundleInternalServerError) GetPayload() *models.Error {
	return o.Payload
}

func (o *UpdateBundleInternalServerError) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.Error)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}
