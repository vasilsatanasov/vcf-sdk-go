// Code generated by go-swagger; DO NOT EDIT.

package c_e_ip

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"
	"io"

	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"

	"vcf-sdk-go/models"
)

// UpdateCeipStatusReader is a Reader for the UpdateCeipStatus structure.
type UpdateCeipStatusReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *UpdateCeipStatusReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {
	case 200:
		result := NewUpdateCeipStatusOK()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil
	case 202:
		result := NewUpdateCeipStatusAccepted()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil
	case 400:
		result := NewUpdateCeipStatusBadRequest()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 409:
		result := NewUpdateCeipStatusConflict()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 500:
		result := NewUpdateCeipStatusInternalServerError()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	default:
		return nil, runtime.NewAPIError("response status code does not match any response statuses defined for this endpoint in the swagger spec", response, response.Code())
	}
}

// NewUpdateCeipStatusOK creates a UpdateCeipStatusOK with default headers values
func NewUpdateCeipStatusOK() *UpdateCeipStatusOK {
	return &UpdateCeipStatusOK{}
}

/*
UpdateCeipStatusOK describes a response with status code 200, with default header values.

OK
*/
type UpdateCeipStatusOK struct {
	Payload *models.Task
}

// IsSuccess returns true when this update ceip status o k response has a 2xx status code
func (o *UpdateCeipStatusOK) IsSuccess() bool {
	return true
}

// IsRedirect returns true when this update ceip status o k response has a 3xx status code
func (o *UpdateCeipStatusOK) IsRedirect() bool {
	return false
}

// IsClientError returns true when this update ceip status o k response has a 4xx status code
func (o *UpdateCeipStatusOK) IsClientError() bool {
	return false
}

// IsServerError returns true when this update ceip status o k response has a 5xx status code
func (o *UpdateCeipStatusOK) IsServerError() bool {
	return false
}

// IsCode returns true when this update ceip status o k response a status code equal to that given
func (o *UpdateCeipStatusOK) IsCode(code int) bool {
	return code == 200
}

func (o *UpdateCeipStatusOK) Error() string {
	return fmt.Sprintf("[PATCH /v1/system/ceip][%d] updateCeipStatusOK  %+v", 200, o.Payload)
}

func (o *UpdateCeipStatusOK) String() string {
	return fmt.Sprintf("[PATCH /v1/system/ceip][%d] updateCeipStatusOK  %+v", 200, o.Payload)
}

func (o *UpdateCeipStatusOK) GetPayload() *models.Task {
	return o.Payload
}

func (o *UpdateCeipStatusOK) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.Task)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewUpdateCeipStatusAccepted creates a UpdateCeipStatusAccepted with default headers values
func NewUpdateCeipStatusAccepted() *UpdateCeipStatusAccepted {
	return &UpdateCeipStatusAccepted{}
}

/*
UpdateCeipStatusAccepted describes a response with status code 202, with default header values.

Accepted
*/
type UpdateCeipStatusAccepted struct {
	Payload *models.Task
}

// IsSuccess returns true when this update ceip status accepted response has a 2xx status code
func (o *UpdateCeipStatusAccepted) IsSuccess() bool {
	return true
}

// IsRedirect returns true when this update ceip status accepted response has a 3xx status code
func (o *UpdateCeipStatusAccepted) IsRedirect() bool {
	return false
}

// IsClientError returns true when this update ceip status accepted response has a 4xx status code
func (o *UpdateCeipStatusAccepted) IsClientError() bool {
	return false
}

// IsServerError returns true when this update ceip status accepted response has a 5xx status code
func (o *UpdateCeipStatusAccepted) IsServerError() bool {
	return false
}

// IsCode returns true when this update ceip status accepted response a status code equal to that given
func (o *UpdateCeipStatusAccepted) IsCode(code int) bool {
	return code == 202
}

func (o *UpdateCeipStatusAccepted) Error() string {
	return fmt.Sprintf("[PATCH /v1/system/ceip][%d] updateCeipStatusAccepted  %+v", 202, o.Payload)
}

func (o *UpdateCeipStatusAccepted) String() string {
	return fmt.Sprintf("[PATCH /v1/system/ceip][%d] updateCeipStatusAccepted  %+v", 202, o.Payload)
}

func (o *UpdateCeipStatusAccepted) GetPayload() *models.Task {
	return o.Payload
}

func (o *UpdateCeipStatusAccepted) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.Task)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewUpdateCeipStatusBadRequest creates a UpdateCeipStatusBadRequest with default headers values
func NewUpdateCeipStatusBadRequest() *UpdateCeipStatusBadRequest {
	return &UpdateCeipStatusBadRequest{}
}

/*
UpdateCeipStatusBadRequest describes a response with status code 400, with default header values.

Bad Request
*/
type UpdateCeipStatusBadRequest struct {
	Payload *models.Error
}

// IsSuccess returns true when this update ceip status bad request response has a 2xx status code
func (o *UpdateCeipStatusBadRequest) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this update ceip status bad request response has a 3xx status code
func (o *UpdateCeipStatusBadRequest) IsRedirect() bool {
	return false
}

// IsClientError returns true when this update ceip status bad request response has a 4xx status code
func (o *UpdateCeipStatusBadRequest) IsClientError() bool {
	return true
}

// IsServerError returns true when this update ceip status bad request response has a 5xx status code
func (o *UpdateCeipStatusBadRequest) IsServerError() bool {
	return false
}

// IsCode returns true when this update ceip status bad request response a status code equal to that given
func (o *UpdateCeipStatusBadRequest) IsCode(code int) bool {
	return code == 400
}

func (o *UpdateCeipStatusBadRequest) Error() string {
	return fmt.Sprintf("[PATCH /v1/system/ceip][%d] updateCeipStatusBadRequest  %+v", 400, o.Payload)
}

func (o *UpdateCeipStatusBadRequest) String() string {
	return fmt.Sprintf("[PATCH /v1/system/ceip][%d] updateCeipStatusBadRequest  %+v", 400, o.Payload)
}

func (o *UpdateCeipStatusBadRequest) GetPayload() *models.Error {
	return o.Payload
}

func (o *UpdateCeipStatusBadRequest) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.Error)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewUpdateCeipStatusConflict creates a UpdateCeipStatusConflict with default headers values
func NewUpdateCeipStatusConflict() *UpdateCeipStatusConflict {
	return &UpdateCeipStatusConflict{}
}

/*
UpdateCeipStatusConflict describes a response with status code 409, with default header values.

The request could not be completed due to a conflict with the current state
*/
type UpdateCeipStatusConflict struct {
	Payload *models.Error
}

// IsSuccess returns true when this update ceip status conflict response has a 2xx status code
func (o *UpdateCeipStatusConflict) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this update ceip status conflict response has a 3xx status code
func (o *UpdateCeipStatusConflict) IsRedirect() bool {
	return false
}

// IsClientError returns true when this update ceip status conflict response has a 4xx status code
func (o *UpdateCeipStatusConflict) IsClientError() bool {
	return true
}

// IsServerError returns true when this update ceip status conflict response has a 5xx status code
func (o *UpdateCeipStatusConflict) IsServerError() bool {
	return false
}

// IsCode returns true when this update ceip status conflict response a status code equal to that given
func (o *UpdateCeipStatusConflict) IsCode(code int) bool {
	return code == 409
}

func (o *UpdateCeipStatusConflict) Error() string {
	return fmt.Sprintf("[PATCH /v1/system/ceip][%d] updateCeipStatusConflict  %+v", 409, o.Payload)
}

func (o *UpdateCeipStatusConflict) String() string {
	return fmt.Sprintf("[PATCH /v1/system/ceip][%d] updateCeipStatusConflict  %+v", 409, o.Payload)
}

func (o *UpdateCeipStatusConflict) GetPayload() *models.Error {
	return o.Payload
}

func (o *UpdateCeipStatusConflict) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.Error)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewUpdateCeipStatusInternalServerError creates a UpdateCeipStatusInternalServerError with default headers values
func NewUpdateCeipStatusInternalServerError() *UpdateCeipStatusInternalServerError {
	return &UpdateCeipStatusInternalServerError{}
}

/*
UpdateCeipStatusInternalServerError describes a response with status code 500, with default header values.

InternalServerError
*/
type UpdateCeipStatusInternalServerError struct {
	Payload *models.Error
}

// IsSuccess returns true when this update ceip status internal server error response has a 2xx status code
func (o *UpdateCeipStatusInternalServerError) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this update ceip status internal server error response has a 3xx status code
func (o *UpdateCeipStatusInternalServerError) IsRedirect() bool {
	return false
}

// IsClientError returns true when this update ceip status internal server error response has a 4xx status code
func (o *UpdateCeipStatusInternalServerError) IsClientError() bool {
	return false
}

// IsServerError returns true when this update ceip status internal server error response has a 5xx status code
func (o *UpdateCeipStatusInternalServerError) IsServerError() bool {
	return true
}

// IsCode returns true when this update ceip status internal server error response a status code equal to that given
func (o *UpdateCeipStatusInternalServerError) IsCode(code int) bool {
	return code == 500
}

func (o *UpdateCeipStatusInternalServerError) Error() string {
	return fmt.Sprintf("[PATCH /v1/system/ceip][%d] updateCeipStatusInternalServerError  %+v", 500, o.Payload)
}

func (o *UpdateCeipStatusInternalServerError) String() string {
	return fmt.Sprintf("[PATCH /v1/system/ceip][%d] updateCeipStatusInternalServerError  %+v", 500, o.Payload)
}

func (o *UpdateCeipStatusInternalServerError) GetPayload() *models.Error {
	return o.Payload
}

func (o *UpdateCeipStatusInternalServerError) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.Error)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}
