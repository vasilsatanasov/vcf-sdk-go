// Code generated by go-swagger; DO NOT EDIT.

// Copyright Â© 2023 VMware, Inc. All Rights Reserved.
// Code licenced under: BSD-2

package ceip

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"
	"io"

	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"

	"vcf-sdk-go/models"
)

// UpdateCEIPStatusReader is a Reader for the UpdateCEIPStatus structure.
type UpdateCEIPStatusReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *UpdateCEIPStatusReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {
	case 200:
		result := NewUpdateCEIPStatusOK()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil
	case 202:
		result := NewUpdateCEIPStatusAccepted()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil
	case 400:
		result := NewUpdateCEIPStatusBadRequest()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 409:
		result := NewUpdateCEIPStatusConflict()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 500:
		result := NewUpdateCEIPStatusInternalServerError()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	default:
		return nil, runtime.NewAPIError("response status code does not match any response statuses defined for this endpoint in the swagger spec", response, response.Code())
	}
}

// NewUpdateCEIPStatusOK creates a UpdateCEIPStatusOK with default headers values
func NewUpdateCEIPStatusOK() *UpdateCEIPStatusOK {
	return &UpdateCEIPStatusOK{}
}

/*
UpdateCEIPStatusOK describes a response with status code 200, with default header values.

OK
*/
type UpdateCEIPStatusOK struct {
	Payload *models.Task
}

// IsSuccess returns true when this update Ceip status o k response has a 2xx status code
func (o *UpdateCEIPStatusOK) IsSuccess() bool {
	return true
}

// IsRedirect returns true when this update Ceip status o k response has a 3xx status code
func (o *UpdateCEIPStatusOK) IsRedirect() bool {
	return false
}

// IsClientError returns true when this update Ceip status o k response has a 4xx status code
func (o *UpdateCEIPStatusOK) IsClientError() bool {
	return false
}

// IsServerError returns true when this update Ceip status o k response has a 5xx status code
func (o *UpdateCEIPStatusOK) IsServerError() bool {
	return false
}

// IsCode returns true when this update Ceip status o k response a status code equal to that given
func (o *UpdateCEIPStatusOK) IsCode(code int) bool {
	return code == 200
}

func (o *UpdateCEIPStatusOK) Error() string {
	return fmt.Sprintf("[PATCH /v1/system/ceip][%d] updateCeipStatusOK  %+v", 200, o.Payload)
}

func (o *UpdateCEIPStatusOK) String() string {
	return fmt.Sprintf("[PATCH /v1/system/ceip][%d] updateCeipStatusOK  %+v", 200, o.Payload)
}

func (o *UpdateCEIPStatusOK) GetPayload() *models.Task {
	return o.Payload
}

func (o *UpdateCEIPStatusOK) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.Task)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewUpdateCEIPStatusAccepted creates a UpdateCEIPStatusAccepted with default headers values
func NewUpdateCEIPStatusAccepted() *UpdateCEIPStatusAccepted {
	return &UpdateCEIPStatusAccepted{}
}

/*
UpdateCEIPStatusAccepted describes a response with status code 202, with default header values.

Accepted
*/
type UpdateCEIPStatusAccepted struct {
	Payload *models.Task
}

// IsSuccess returns true when this update Ceip status accepted response has a 2xx status code
func (o *UpdateCEIPStatusAccepted) IsSuccess() bool {
	return true
}

// IsRedirect returns true when this update Ceip status accepted response has a 3xx status code
func (o *UpdateCEIPStatusAccepted) IsRedirect() bool {
	return false
}

// IsClientError returns true when this update Ceip status accepted response has a 4xx status code
func (o *UpdateCEIPStatusAccepted) IsClientError() bool {
	return false
}

// IsServerError returns true when this update Ceip status accepted response has a 5xx status code
func (o *UpdateCEIPStatusAccepted) IsServerError() bool {
	return false
}

// IsCode returns true when this update Ceip status accepted response a status code equal to that given
func (o *UpdateCEIPStatusAccepted) IsCode(code int) bool {
	return code == 202
}

func (o *UpdateCEIPStatusAccepted) Error() string {
	return fmt.Sprintf("[PATCH /v1/system/ceip][%d] updateCeipStatusAccepted  %+v", 202, o.Payload)
}

func (o *UpdateCEIPStatusAccepted) String() string {
	return fmt.Sprintf("[PATCH /v1/system/ceip][%d] updateCeipStatusAccepted  %+v", 202, o.Payload)
}

func (o *UpdateCEIPStatusAccepted) GetPayload() *models.Task {
	return o.Payload
}

func (o *UpdateCEIPStatusAccepted) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.Task)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewUpdateCEIPStatusBadRequest creates a UpdateCEIPStatusBadRequest with default headers values
func NewUpdateCEIPStatusBadRequest() *UpdateCEIPStatusBadRequest {
	return &UpdateCEIPStatusBadRequest{}
}

/*
UpdateCEIPStatusBadRequest describes a response with status code 400, with default header values.

Bad Request
*/
type UpdateCEIPStatusBadRequest struct {
	Payload *models.Error
}

// IsSuccess returns true when this update Ceip status bad request response has a 2xx status code
func (o *UpdateCEIPStatusBadRequest) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this update Ceip status bad request response has a 3xx status code
func (o *UpdateCEIPStatusBadRequest) IsRedirect() bool {
	return false
}

// IsClientError returns true when this update Ceip status bad request response has a 4xx status code
func (o *UpdateCEIPStatusBadRequest) IsClientError() bool {
	return true
}

// IsServerError returns true when this update Ceip status bad request response has a 5xx status code
func (o *UpdateCEIPStatusBadRequest) IsServerError() bool {
	return false
}

// IsCode returns true when this update Ceip status bad request response a status code equal to that given
func (o *UpdateCEIPStatusBadRequest) IsCode(code int) bool {
	return code == 400
}

func (o *UpdateCEIPStatusBadRequest) Error() string {
	return fmt.Sprintf("[PATCH /v1/system/ceip][%d] updateCeipStatusBadRequest  %+v", 400, o.Payload)
}

func (o *UpdateCEIPStatusBadRequest) String() string {
	return fmt.Sprintf("[PATCH /v1/system/ceip][%d] updateCeipStatusBadRequest  %+v", 400, o.Payload)
}

func (o *UpdateCEIPStatusBadRequest) GetPayload() *models.Error {
	return o.Payload
}

func (o *UpdateCEIPStatusBadRequest) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.Error)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewUpdateCEIPStatusConflict creates a UpdateCEIPStatusConflict with default headers values
func NewUpdateCEIPStatusConflict() *UpdateCEIPStatusConflict {
	return &UpdateCEIPStatusConflict{}
}

/*
UpdateCEIPStatusConflict describes a response with status code 409, with default header values.

The request could not be completed due to a conflict with the current state
*/
type UpdateCEIPStatusConflict struct {
	Payload *models.Error
}

// IsSuccess returns true when this update Ceip status conflict response has a 2xx status code
func (o *UpdateCEIPStatusConflict) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this update Ceip status conflict response has a 3xx status code
func (o *UpdateCEIPStatusConflict) IsRedirect() bool {
	return false
}

// IsClientError returns true when this update Ceip status conflict response has a 4xx status code
func (o *UpdateCEIPStatusConflict) IsClientError() bool {
	return true
}

// IsServerError returns true when this update Ceip status conflict response has a 5xx status code
func (o *UpdateCEIPStatusConflict) IsServerError() bool {
	return false
}

// IsCode returns true when this update Ceip status conflict response a status code equal to that given
func (o *UpdateCEIPStatusConflict) IsCode(code int) bool {
	return code == 409
}

func (o *UpdateCEIPStatusConflict) Error() string {
	return fmt.Sprintf("[PATCH /v1/system/ceip][%d] updateCeipStatusConflict  %+v", 409, o.Payload)
}

func (o *UpdateCEIPStatusConflict) String() string {
	return fmt.Sprintf("[PATCH /v1/system/ceip][%d] updateCeipStatusConflict  %+v", 409, o.Payload)
}

func (o *UpdateCEIPStatusConflict) GetPayload() *models.Error {
	return o.Payload
}

func (o *UpdateCEIPStatusConflict) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.Error)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewUpdateCEIPStatusInternalServerError creates a UpdateCEIPStatusInternalServerError with default headers values
func NewUpdateCEIPStatusInternalServerError() *UpdateCEIPStatusInternalServerError {
	return &UpdateCEIPStatusInternalServerError{}
}

/*
UpdateCEIPStatusInternalServerError describes a response with status code 500, with default header values.

InternalServerError
*/
type UpdateCEIPStatusInternalServerError struct {
	Payload *models.Error
}

// IsSuccess returns true when this update Ceip status internal server error response has a 2xx status code
func (o *UpdateCEIPStatusInternalServerError) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this update Ceip status internal server error response has a 3xx status code
func (o *UpdateCEIPStatusInternalServerError) IsRedirect() bool {
	return false
}

// IsClientError returns true when this update Ceip status internal server error response has a 4xx status code
func (o *UpdateCEIPStatusInternalServerError) IsClientError() bool {
	return false
}

// IsServerError returns true when this update Ceip status internal server error response has a 5xx status code
func (o *UpdateCEIPStatusInternalServerError) IsServerError() bool {
	return true
}

// IsCode returns true when this update Ceip status internal server error response a status code equal to that given
func (o *UpdateCEIPStatusInternalServerError) IsCode(code int) bool {
	return code == 500
}

func (o *UpdateCEIPStatusInternalServerError) Error() string {
	return fmt.Sprintf("[PATCH /v1/system/ceip][%d] updateCeipStatusInternalServerError  %+v", 500, o.Payload)
}

func (o *UpdateCEIPStatusInternalServerError) String() string {
	return fmt.Sprintf("[PATCH /v1/system/ceip][%d] updateCeipStatusInternalServerError  %+v", 500, o.Payload)
}

func (o *UpdateCEIPStatusInternalServerError) GetPayload() *models.Error {
	return o.Payload
}

func (o *UpdateCEIPStatusInternalServerError) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.Error)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}
