// Code generated by go-swagger; DO NOT EDIT.

// Copyright Â© 2023 VMware, Inc. All Rights Reserved.
// Code licenced under: BSD-2

package certificates

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"
	"io"

	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"

	"github.com/vmware/vcf-sdk-go/models"
)

// GETCertificateAuthoritiesReader is a Reader for the GETCertificateAuthorities structure.
type GETCertificateAuthoritiesReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *GETCertificateAuthoritiesReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {
	case 200:
		result := NewGETCertificateAuthoritiesOK()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil
	case 400:
		result := NewGETCertificateAuthoritiesBadRequest()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 500:
		result := NewGETCertificateAuthoritiesInternalServerError()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	default:
		return nil, runtime.NewAPIError("response status code does not match any response statuses defined for this endpoint in the swagger spec", response, response.Code())
	}
}

// NewGETCertificateAuthoritiesOK creates a GETCertificateAuthoritiesOK with default headers values
func NewGETCertificateAuthoritiesOK() *GETCertificateAuthoritiesOK {
	return &GETCertificateAuthoritiesOK{}
}

/*
GETCertificateAuthoritiesOK describes a response with status code 200, with default header values.

OK
*/
type GETCertificateAuthoritiesOK struct {
	Payload *models.PageOfCertificateAuthority
}

// IsSuccess returns true when this get certificate authorities o k response has a 2xx status code
func (o *GETCertificateAuthoritiesOK) IsSuccess() bool {
	return true
}

// IsRedirect returns true when this get certificate authorities o k response has a 3xx status code
func (o *GETCertificateAuthoritiesOK) IsRedirect() bool {
	return false
}

// IsClientError returns true when this get certificate authorities o k response has a 4xx status code
func (o *GETCertificateAuthoritiesOK) IsClientError() bool {
	return false
}

// IsServerError returns true when this get certificate authorities o k response has a 5xx status code
func (o *GETCertificateAuthoritiesOK) IsServerError() bool {
	return false
}

// IsCode returns true when this get certificate authorities o k response a status code equal to that given
func (o *GETCertificateAuthoritiesOK) IsCode(code int) bool {
	return code == 200
}

func (o *GETCertificateAuthoritiesOK) Error() string {
	return fmt.Sprintf("[GET /v1/certificate-authorities][%d] getCertificateAuthoritiesOK  %+v", 200, o.Payload)
}

func (o *GETCertificateAuthoritiesOK) String() string {
	return fmt.Sprintf("[GET /v1/certificate-authorities][%d] getCertificateAuthoritiesOK  %+v", 200, o.Payload)
}

func (o *GETCertificateAuthoritiesOK) GetPayload() *models.PageOfCertificateAuthority {
	return o.Payload
}

func (o *GETCertificateAuthoritiesOK) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.PageOfCertificateAuthority)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewGETCertificateAuthoritiesBadRequest creates a GETCertificateAuthoritiesBadRequest with default headers values
func NewGETCertificateAuthoritiesBadRequest() *GETCertificateAuthoritiesBadRequest {
	return &GETCertificateAuthoritiesBadRequest{}
}

/*
GETCertificateAuthoritiesBadRequest describes a response with status code 400, with default header values.

Bad request
*/
type GETCertificateAuthoritiesBadRequest struct {
	Payload *models.Error
}

// IsSuccess returns true when this get certificate authorities bad request response has a 2xx status code
func (o *GETCertificateAuthoritiesBadRequest) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this get certificate authorities bad request response has a 3xx status code
func (o *GETCertificateAuthoritiesBadRequest) IsRedirect() bool {
	return false
}

// IsClientError returns true when this get certificate authorities bad request response has a 4xx status code
func (o *GETCertificateAuthoritiesBadRequest) IsClientError() bool {
	return true
}

// IsServerError returns true when this get certificate authorities bad request response has a 5xx status code
func (o *GETCertificateAuthoritiesBadRequest) IsServerError() bool {
	return false
}

// IsCode returns true when this get certificate authorities bad request response a status code equal to that given
func (o *GETCertificateAuthoritiesBadRequest) IsCode(code int) bool {
	return code == 400
}

func (o *GETCertificateAuthoritiesBadRequest) Error() string {
	return fmt.Sprintf("[GET /v1/certificate-authorities][%d] getCertificateAuthoritiesBadRequest  %+v", 400, o.Payload)
}

func (o *GETCertificateAuthoritiesBadRequest) String() string {
	return fmt.Sprintf("[GET /v1/certificate-authorities][%d] getCertificateAuthoritiesBadRequest  %+v", 400, o.Payload)
}

func (o *GETCertificateAuthoritiesBadRequest) GetPayload() *models.Error {
	return o.Payload
}

func (o *GETCertificateAuthoritiesBadRequest) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.Error)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewGETCertificateAuthoritiesInternalServerError creates a GETCertificateAuthoritiesInternalServerError with default headers values
func NewGETCertificateAuthoritiesInternalServerError() *GETCertificateAuthoritiesInternalServerError {
	return &GETCertificateAuthoritiesInternalServerError{}
}

/*
GETCertificateAuthoritiesInternalServerError describes a response with status code 500, with default header values.

Internal Server Error
*/
type GETCertificateAuthoritiesInternalServerError struct {
	Payload *models.Error
}

// IsSuccess returns true when this get certificate authorities internal server error response has a 2xx status code
func (o *GETCertificateAuthoritiesInternalServerError) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this get certificate authorities internal server error response has a 3xx status code
func (o *GETCertificateAuthoritiesInternalServerError) IsRedirect() bool {
	return false
}

// IsClientError returns true when this get certificate authorities internal server error response has a 4xx status code
func (o *GETCertificateAuthoritiesInternalServerError) IsClientError() bool {
	return false
}

// IsServerError returns true when this get certificate authorities internal server error response has a 5xx status code
func (o *GETCertificateAuthoritiesInternalServerError) IsServerError() bool {
	return true
}

// IsCode returns true when this get certificate authorities internal server error response a status code equal to that given
func (o *GETCertificateAuthoritiesInternalServerError) IsCode(code int) bool {
	return code == 500
}

func (o *GETCertificateAuthoritiesInternalServerError) Error() string {
	return fmt.Sprintf("[GET /v1/certificate-authorities][%d] getCertificateAuthoritiesInternalServerError  %+v", 500, o.Payload)
}

func (o *GETCertificateAuthoritiesInternalServerError) String() string {
	return fmt.Sprintf("[GET /v1/certificate-authorities][%d] getCertificateAuthoritiesInternalServerError  %+v", 500, o.Payload)
}

func (o *GETCertificateAuthoritiesInternalServerError) GetPayload() *models.Error {
	return o.Payload
}

func (o *GETCertificateAuthoritiesInternalServerError) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.Error)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}
