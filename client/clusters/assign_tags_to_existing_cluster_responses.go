// Code generated by go-swagger; DO NOT EDIT.

package clusters

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"
	"io"

	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"

	"vcf-sdk-go/models"
)

// AssignTagsToExistingClusterReader is a Reader for the AssignTagsToExistingCluster structure.
type AssignTagsToExistingClusterReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *AssignTagsToExistingClusterReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {
	case 200:
		result := NewAssignTagsToExistingClusterOK()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil
	case 400:
		result := NewAssignTagsToExistingClusterBadRequest()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 500:
		result := NewAssignTagsToExistingClusterInternalServerError()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	default:
		return nil, runtime.NewAPIError("response status code does not match any response statuses defined for this endpoint in the swagger spec", response, response.Code())
	}
}

// NewAssignTagsToExistingClusterOK creates a AssignTagsToExistingClusterOK with default headers values
func NewAssignTagsToExistingClusterOK() *AssignTagsToExistingClusterOK {
	return &AssignTagsToExistingClusterOK{}
}

/*
AssignTagsToExistingClusterOK describes a response with status code 200, with default header values.

Ok
*/
type AssignTagsToExistingClusterOK struct {
	Payload *models.TagAssignmentResult
}

// IsSuccess returns true when this assign tags to existing cluster o k response has a 2xx status code
func (o *AssignTagsToExistingClusterOK) IsSuccess() bool {
	return true
}

// IsRedirect returns true when this assign tags to existing cluster o k response has a 3xx status code
func (o *AssignTagsToExistingClusterOK) IsRedirect() bool {
	return false
}

// IsClientError returns true when this assign tags to existing cluster o k response has a 4xx status code
func (o *AssignTagsToExistingClusterOK) IsClientError() bool {
	return false
}

// IsServerError returns true when this assign tags to existing cluster o k response has a 5xx status code
func (o *AssignTagsToExistingClusterOK) IsServerError() bool {
	return false
}

// IsCode returns true when this assign tags to existing cluster o k response a status code equal to that given
func (o *AssignTagsToExistingClusterOK) IsCode(code int) bool {
	return code == 200
}

func (o *AssignTagsToExistingClusterOK) Error() string {
	return fmt.Sprintf("[PUT /v1/clusters/{id}/tags][%d] assignTagsToExistingClusterOK  %+v", 200, o.Payload)
}

func (o *AssignTagsToExistingClusterOK) String() string {
	return fmt.Sprintf("[PUT /v1/clusters/{id}/tags][%d] assignTagsToExistingClusterOK  %+v", 200, o.Payload)
}

func (o *AssignTagsToExistingClusterOK) GetPayload() *models.TagAssignmentResult {
	return o.Payload
}

func (o *AssignTagsToExistingClusterOK) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.TagAssignmentResult)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewAssignTagsToExistingClusterBadRequest creates a AssignTagsToExistingClusterBadRequest with default headers values
func NewAssignTagsToExistingClusterBadRequest() *AssignTagsToExistingClusterBadRequest {
	return &AssignTagsToExistingClusterBadRequest{}
}

/*
AssignTagsToExistingClusterBadRequest describes a response with status code 400, with default header values.

Bad Request
*/
type AssignTagsToExistingClusterBadRequest struct {
	Payload *models.Error
}

// IsSuccess returns true when this assign tags to existing cluster bad request response has a 2xx status code
func (o *AssignTagsToExistingClusterBadRequest) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this assign tags to existing cluster bad request response has a 3xx status code
func (o *AssignTagsToExistingClusterBadRequest) IsRedirect() bool {
	return false
}

// IsClientError returns true when this assign tags to existing cluster bad request response has a 4xx status code
func (o *AssignTagsToExistingClusterBadRequest) IsClientError() bool {
	return true
}

// IsServerError returns true when this assign tags to existing cluster bad request response has a 5xx status code
func (o *AssignTagsToExistingClusterBadRequest) IsServerError() bool {
	return false
}

// IsCode returns true when this assign tags to existing cluster bad request response a status code equal to that given
func (o *AssignTagsToExistingClusterBadRequest) IsCode(code int) bool {
	return code == 400
}

func (o *AssignTagsToExistingClusterBadRequest) Error() string {
	return fmt.Sprintf("[PUT /v1/clusters/{id}/tags][%d] assignTagsToExistingClusterBadRequest  %+v", 400, o.Payload)
}

func (o *AssignTagsToExistingClusterBadRequest) String() string {
	return fmt.Sprintf("[PUT /v1/clusters/{id}/tags][%d] assignTagsToExistingClusterBadRequest  %+v", 400, o.Payload)
}

func (o *AssignTagsToExistingClusterBadRequest) GetPayload() *models.Error {
	return o.Payload
}

func (o *AssignTagsToExistingClusterBadRequest) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.Error)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewAssignTagsToExistingClusterInternalServerError creates a AssignTagsToExistingClusterInternalServerError with default headers values
func NewAssignTagsToExistingClusterInternalServerError() *AssignTagsToExistingClusterInternalServerError {
	return &AssignTagsToExistingClusterInternalServerError{}
}

/*
AssignTagsToExistingClusterInternalServerError describes a response with status code 500, with default header values.

InternalServerError
*/
type AssignTagsToExistingClusterInternalServerError struct {
	Payload *models.Error
}

// IsSuccess returns true when this assign tags to existing cluster internal server error response has a 2xx status code
func (o *AssignTagsToExistingClusterInternalServerError) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this assign tags to existing cluster internal server error response has a 3xx status code
func (o *AssignTagsToExistingClusterInternalServerError) IsRedirect() bool {
	return false
}

// IsClientError returns true when this assign tags to existing cluster internal server error response has a 4xx status code
func (o *AssignTagsToExistingClusterInternalServerError) IsClientError() bool {
	return false
}

// IsServerError returns true when this assign tags to existing cluster internal server error response has a 5xx status code
func (o *AssignTagsToExistingClusterInternalServerError) IsServerError() bool {
	return true
}

// IsCode returns true when this assign tags to existing cluster internal server error response a status code equal to that given
func (o *AssignTagsToExistingClusterInternalServerError) IsCode(code int) bool {
	return code == 500
}

func (o *AssignTagsToExistingClusterInternalServerError) Error() string {
	return fmt.Sprintf("[PUT /v1/clusters/{id}/tags][%d] assignTagsToExistingClusterInternalServerError  %+v", 500, o.Payload)
}

func (o *AssignTagsToExistingClusterInternalServerError) String() string {
	return fmt.Sprintf("[PUT /v1/clusters/{id}/tags][%d] assignTagsToExistingClusterInternalServerError  %+v", 500, o.Payload)
}

func (o *AssignTagsToExistingClusterInternalServerError) GetPayload() *models.Error {
	return o.Payload
}

func (o *AssignTagsToExistingClusterInternalServerError) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.Error)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}
