// Code generated by go-swagger; DO NOT EDIT.

// Copyright Â© 2023 VMware, Inc. All Rights Reserved.
// Code licenced under: BSD-2

package clusters

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"

	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"
)

// New creates a new clusters API client.
func New(transport runtime.ClientTransport, formats strfmt.Registry) ClientService {
	return &Client{transport: transport, formats: formats}
}

/*
Client for clusters API
*/
type Client struct {
	transport runtime.ClientTransport
	formats   strfmt.Registry
}

// ClientOption is the option for Client methods
type ClientOption func(*runtime.ClientOperation)

// ClientService is the interface for Client methods
type ClientService interface {
	AddDatastoreToCluster(params *AddDatastoreToClusterParams, opts ...ClientOption) (*AddDatastoreToClusterOK, *AddDatastoreToClusterAccepted, error)

	AssignTagsToExistingCluster(params *AssignTagsToExistingClusterParams, opts ...ClientOption) (*AssignTagsToExistingClusterOK, error)

	AssignableTagsToCluster(params *AssignableTagsToClusterParams, opts ...ClientOption) (*AssignableTagsToClusterOK, error)

	CreateCluster(params *CreateClusterParams, opts ...ClientOption) (*CreateClusterOK, *CreateClusterAccepted, error)

	DeleteCluster(params *DeleteClusterParams, opts ...ClientOption) (*DeleteClusterOK, *DeleteClusterAccepted, error)

	GETCluster(params *GETClusterParams, opts ...ClientOption) (*GETClusterOK, error)

	GETClusterDatastores(params *GETClusterDatastoresParams, opts ...ClientOption) (*GETClusterDatastoresOK, error)

	GETClusterTagManagerURL(params *GETClusterTagManagerURLParams, opts ...ClientOption) (*GETClusterTagManagerURLOK, error)

	GETClusters(params *GETClustersParams, opts ...ClientOption) (*GETClustersOK, error)

	GETDatastoreCriterion(params *GETDatastoreCriterionParams, opts ...ClientOption) (*GETDatastoreCriterionOK, error)

	GETDatastoreQueryResponse(params *GETDatastoreQueryResponseParams, opts ...ClientOption) (*GETDatastoreQueryResponseOK, error)

	GETDatastoresCriteria(params *GETDatastoresCriteriaParams, opts ...ClientOption) (*GETDatastoresCriteriaOK, error)

	GETHostCriteria(params *GETHostCriteriaParams, opts ...ClientOption) (*GETHostCriteriaOK, error)

	GETHostCriterion(params *GETHostCriterionParams, opts ...ClientOption) (*GETHostCriterionOK, error)

	GETHostQueryResponse(params *GETHostQueryResponseParams, opts ...ClientOption) (*GETHostQueryResponseOK, error)

	GETTagsAssignedToCluster(params *GETTagsAssignedToClusterParams, opts ...ClientOption) (*GETTagsAssignedToClusterOK, error)

	GETTagsAssignedToClusters(params *GETTagsAssignedToClustersParams, opts ...ClientOption) (*GETTagsAssignedToClustersOK, error)

	GETVdses(params *GETVdsesParams, opts ...ClientOption) (*GETVdsesOK, error)

	POSTDatastoreQuery(params *POSTDatastoreQueryParams, opts ...ClientOption) (*POSTDatastoreQueryOK, error)

	POSTHostQuery(params *POSTHostQueryParams, opts ...ClientOption) (*POSTHostQueryOK, error)

	RemoveDatastoreFromCluster(params *RemoveDatastoreFromClusterParams, opts ...ClientOption) (*RemoveDatastoreFromClusterOK, *RemoveDatastoreFromClusterAccepted, error)

	RemoveTagsFromExistingCluster(params *RemoveTagsFromExistingClusterParams, opts ...ClientOption) (*RemoveTagsFromExistingClusterOK, error)

	UpdateCluster(params *UpdateClusterParams, opts ...ClientOption) (*UpdateClusterOK, *UpdateClusterAccepted, error)

	ValidateClusterOperations(params *ValidateClusterOperationsParams, opts ...ClientOption) (*ValidateClusterOperationsOK, error)

	ValidateClustersOperations(params *ValidateClustersOperationsParams, opts ...ClientOption) (*ValidateClustersOperationsOK, error)

	ValidateVSANRemoteDatastore(params *ValidateVSANRemoteDatastoreParams, opts ...ClientOption) (*ValidateVSANRemoteDatastoreOK, error)

	SetTransport(transport runtime.ClientTransport)
}

/*
AddDatastoreToCluster mounts a datastore to a cluster
*/
func (a *Client) AddDatastoreToCluster(params *AddDatastoreToClusterParams, opts ...ClientOption) (*AddDatastoreToClusterOK, *AddDatastoreToClusterAccepted, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewAddDatastoreToClusterParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "addDatastoreToCluster",
		Method:             "POST",
		PathPattern:        "/v1/clusters/{id}/datastores",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &AddDatastoreToClusterReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, nil, err
	}
	switch value := result.(type) {
	case *AddDatastoreToClusterOK:
		return value, nil, nil
	case *AddDatastoreToClusterAccepted:
		return nil, value, nil
	}
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for clusters: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
AssignTagsToExistingCluster assigns tags to cluster
*/
func (a *Client) AssignTagsToExistingCluster(params *AssignTagsToExistingClusterParams, opts ...ClientOption) (*AssignTagsToExistingClusterOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewAssignTagsToExistingClusterParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "assignTagsToExistingCluster",
		Method:             "PUT",
		PathPattern:        "/v1/clusters/{id}/tags",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &AssignTagsToExistingClusterReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*AssignTagsToExistingClusterOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for assignTagsToExistingCluster: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
AssignableTagsToCluster gets assignable tags to cluster
*/
func (a *Client) AssignableTagsToCluster(params *AssignableTagsToClusterParams, opts ...ClientOption) (*AssignableTagsToClusterOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewAssignableTagsToClusterParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "assignableTagsToCluster",
		Method:             "GET",
		PathPattern:        "/v1/clusters/{id}/tags/assignable-tags",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &AssignableTagsToClusterReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*AssignableTagsToClusterOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for assignableTagsToCluster: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
CreateCluster creates a cluster and add to an existing domain
*/
func (a *Client) CreateCluster(params *CreateClusterParams, opts ...ClientOption) (*CreateClusterOK, *CreateClusterAccepted, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewCreateClusterParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "createCluster",
		Method:             "POST",
		PathPattern:        "/v1/clusters",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &CreateClusterReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, nil, err
	}
	switch value := result.(type) {
	case *CreateClusterOK:
		return value, nil, nil
	case *CreateClusterAccepted:
		return nil, value, nil
	}
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for clusters: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
DeleteCluster deletes a cluster from a domain if it has been previously initialized for deletion
*/
func (a *Client) DeleteCluster(params *DeleteClusterParams, opts ...ClientOption) (*DeleteClusterOK, *DeleteClusterAccepted, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewDeleteClusterParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "deleteCluster",
		Method:             "DELETE",
		PathPattern:        "/v1/clusters/{id}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &DeleteClusterReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, nil, err
	}
	switch value := result.(type) {
	case *DeleteClusterOK:
		return value, nil, nil
	case *DeleteClusterAccepted:
		return nil, value, nil
	}
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for clusters: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
GETCluster Gets a cluster
*/
func (a *Client) GETCluster(params *GETClusterParams, opts ...ClientOption) (*GETClusterOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGETClusterParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "getCluster",
		Method:             "GET",
		PathPattern:        "/v1/clusters/{id}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GETClusterReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GETClusterOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for getCluster: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
GETClusterDatastores Gets the list of all datastores associated with the cluster
*/
func (a *Client) GETClusterDatastores(params *GETClusterDatastoresParams, opts ...ClientOption) (*GETClusterDatastoresOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGETClusterDatastoresParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "getClusterDatastores",
		Method:             "GET",
		PathPattern:        "/v1/clusters/{clusterId}/datastores",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GETClusterDatastoresReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GETClusterDatastoresOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for getClusterDatastores: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
GETClusterTagManagerURL Gets cluster tag manager Url
*/
func (a *Client) GETClusterTagManagerURL(params *GETClusterTagManagerURLParams, opts ...ClientOption) (*GETClusterTagManagerURLOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGETClusterTagManagerURLParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "getClusterTagManagerUrl",
		Method:             "GET",
		PathPattern:        "/v1/clusters/{id}/tags/tag-manager",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GETClusterTagManagerURLReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GETClusterTagManagerURLOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for getClusterTagManagerUrl: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
GETClusters Gets the clusters
*/
func (a *Client) GETClusters(params *GETClustersParams, opts ...ClientOption) (*GETClustersOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGETClustersParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "getClusters",
		Method:             "GET",
		PathPattern:        "/v1/clusters",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GETClustersReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GETClustersOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for getClusters: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
GETDatastoreCriterion Gets a criterion to query for datastore
*/
func (a *Client) GETDatastoreCriterion(params *GETDatastoreCriterionParams, opts ...ClientOption) (*GETDatastoreCriterionOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGETDatastoreCriterionParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "getDatastoreCriterion",
		Method:             "GET",
		PathPattern:        "/v1/clusters/{id}/datastores/criteria/{name}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GETDatastoreCriterionReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GETDatastoreCriterionOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for getDatastoreCriterion: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
GETDatastoreQueryResponse Gets datastore query response
*/
func (a *Client) GETDatastoreQueryResponse(params *GETDatastoreQueryResponseParams, opts ...ClientOption) (*GETDatastoreQueryResponseOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGETDatastoreQueryResponseParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "getDatastoreQueryResponse",
		Method:             "GET",
		PathPattern:        "/v1/clusters/{clusterId}/datastores/queries/{queryId}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GETDatastoreQueryResponseReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GETDatastoreQueryResponseOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for getDatastoreQueryResponse: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
GETDatastoresCriteria Gets all datastore criteria
*/
func (a *Client) GETDatastoresCriteria(params *GETDatastoresCriteriaParams, opts ...ClientOption) (*GETDatastoresCriteriaOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGETDatastoresCriteriaParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "getDatastoresCriteria",
		Method:             "GET",
		PathPattern:        "/v1/clusters/{id}/datastores/criteria",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GETDatastoresCriteriaReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GETDatastoresCriteriaOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for getDatastoresCriteria: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
GETHostCriteria Gets all host criteria
*/
func (a *Client) GETHostCriteria(params *GETHostCriteriaParams, opts ...ClientOption) (*GETHostCriteriaOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGETHostCriteriaParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "getHostCriteria",
		Method:             "GET",
		PathPattern:        "/v1/clusters/{id}/hosts/criteria",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GETHostCriteriaReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GETHostCriteriaOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for getHostCriteria: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
GETHostCriterion Gets a criterion to query for host
*/
func (a *Client) GETHostCriterion(params *GETHostCriterionParams, opts ...ClientOption) (*GETHostCriterionOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGETHostCriterionParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "getHostCriterion",
		Method:             "GET",
		PathPattern:        "/v1/clusters/{id}/hosts/criteria/{name}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GETHostCriterionReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GETHostCriterionOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for getHostCriterion: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
GETHostQueryResponse Gets query response
*/
func (a *Client) GETHostQueryResponse(params *GETHostQueryResponseParams, opts ...ClientOption) (*GETHostQueryResponseOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGETHostQueryResponseParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "getHostQueryResponse",
		Method:             "GET",
		PathPattern:        "/v1/clusters/{clusterId}/hosts/queries/{queryId}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GETHostQueryResponseReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GETHostQueryResponseOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for getHostQueryResponse: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
GETTagsAssignedToCluster Gets tags assigned to cluster
*/
func (a *Client) GETTagsAssignedToCluster(params *GETTagsAssignedToClusterParams, opts ...ClientOption) (*GETTagsAssignedToClusterOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGETTagsAssignedToClusterParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "getTagsAssignedToCluster",
		Method:             "GET",
		PathPattern:        "/v1/clusters/{id}/tags",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GETTagsAssignedToClusterReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GETTagsAssignedToClusterOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for getTagsAssignedToCluster: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
GETTagsAssignedToClusters Gets tags assigned to clusters
*/
func (a *Client) GETTagsAssignedToClusters(params *GETTagsAssignedToClustersParams, opts ...ClientOption) (*GETTagsAssignedToClustersOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGETTagsAssignedToClustersParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "getTagsAssignedToClusters",
		Method:             "GET",
		PathPattern:        "/v1/clusters/tags",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GETTagsAssignedToClustersReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GETTagsAssignedToClustersOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for getTagsAssignedToClusters: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
GETVdses Gets the list of v d ses of a cluster
*/
func (a *Client) GETVdses(params *GETVdsesParams, opts ...ClientOption) (*GETVdsesOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGETVdsesParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "getVdses",
		Method:             "GET",
		PathPattern:        "/v1/clusters/{clusterId}/vdses",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GETVdsesReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GETVdsesOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for getVdses: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
POSTDatastoreQuery Posts a datastore query
*/
func (a *Client) POSTDatastoreQuery(params *POSTDatastoreQueryParams, opts ...ClientOption) (*POSTDatastoreQueryOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewPOSTDatastoreQueryParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "postDatastoreQuery",
		Method:             "POST",
		PathPattern:        "/v1/clusters/{id}/datastores/queries",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &POSTDatastoreQueryReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*POSTDatastoreQueryOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for postDatastoreQuery: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
POSTHostQuery Posts a host query
*/
func (a *Client) POSTHostQuery(params *POSTHostQueryParams, opts ...ClientOption) (*POSTHostQueryOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewPOSTHostQueryParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "postHostQuery",
		Method:             "POST",
		PathPattern:        "/v1/clusters/{id}/hosts/queries",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &POSTHostQueryReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*POSTHostQueryOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for postHostQuery: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
RemoveDatastoreFromCluster unmounts a datastore from a cluster
*/
func (a *Client) RemoveDatastoreFromCluster(params *RemoveDatastoreFromClusterParams, opts ...ClientOption) (*RemoveDatastoreFromClusterOK, *RemoveDatastoreFromClusterAccepted, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewRemoveDatastoreFromClusterParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "removeDatastoreFromCluster",
		Method:             "DELETE",
		PathPattern:        "/v1/clusters/{id}/datastores/{datastoreId}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &RemoveDatastoreFromClusterReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, nil, err
	}
	switch value := result.(type) {
	case *RemoveDatastoreFromClusterOK:
		return value, nil, nil
	case *RemoveDatastoreFromClusterAccepted:
		return nil, value, nil
	}
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for clusters: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
RemoveTagsFromExistingCluster removes tags from cluster
*/
func (a *Client) RemoveTagsFromExistingCluster(params *RemoveTagsFromExistingClusterParams, opts ...ClientOption) (*RemoveTagsFromExistingClusterOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewRemoveTagsFromExistingClusterParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "removeTagsFromExistingCluster",
		Method:             "DELETE",
		PathPattern:        "/v1/clusters/{id}/tags",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &RemoveTagsFromExistingClusterReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*RemoveTagsFromExistingClusterOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for removeTagsFromExistingCluster: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
UpdateCluster updates a cluster by adding or removing hosts stretching a standard v SAN cluster unstretching a stretched cluster or by marking for deletion
*/
func (a *Client) UpdateCluster(params *UpdateClusterParams, opts ...ClientOption) (*UpdateClusterOK, *UpdateClusterAccepted, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewUpdateClusterParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "updateCluster",
		Method:             "PATCH",
		PathPattern:        "/v1/clusters/{id}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &UpdateClusterReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, nil, err
	}
	switch value := result.(type) {
	case *UpdateClusterOK:
		return value, nil, nil
	case *UpdateClusterAccepted:
		return nil, value, nil
	}
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for clusters: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
ValidateClusterOperations validates input specification for updating given cluster
*/
func (a *Client) ValidateClusterOperations(params *ValidateClusterOperationsParams, opts ...ClientOption) (*ValidateClusterOperationsOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewValidateClusterOperationsParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "validateClusterOperations",
		Method:             "POST",
		PathPattern:        "/v1/clusters/{id}/validations",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &ValidateClusterOperationsReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*ValidateClusterOperationsOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for validateClusterOperations: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
ValidateClustersOperations validates the input specification for cluster creation
*/
func (a *Client) ValidateClustersOperations(params *ValidateClustersOperationsParams, opts ...ClientOption) (*ValidateClustersOperationsOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewValidateClustersOperationsParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "validateClustersOperations",
		Method:             "POST",
		PathPattern:        "/v1/clusters/validations",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &ValidateClustersOperationsReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*ValidateClustersOperationsOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for validateClustersOperations: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
ValidateVSANRemoteDatastore validates the input spec for mounting v SAN remote datastore to an existing cluster
*/
func (a *Client) ValidateVSANRemoteDatastore(params *ValidateVSANRemoteDatastoreParams, opts ...ClientOption) (*ValidateVSANRemoteDatastoreOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewValidateVSANRemoteDatastoreParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "validateVsanRemoteDatastore",
		Method:             "POST",
		PathPattern:        "/v1/clusters/{clusterId}/datastores/validation",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &ValidateVSANRemoteDatastoreReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*ValidateVSANRemoteDatastoreOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for validateVsanRemoteDatastore: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

// SetTransport changes the transport on the client
func (a *Client) SetTransport(transport runtime.ClientTransport) {
	a.transport = transport
}
