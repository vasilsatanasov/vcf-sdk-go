// Code generated by go-swagger; DO NOT EDIT.

// Copyright Â© 2023 VMware, Inc. All Rights Reserved.
// Code licenced under: BSD-2

package clusters

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"
	"io"

	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"

	"vcf-sdk-go/models"
)

// GETHostQueryResponseReader is a Reader for the GETHostQueryResponse structure.
type GETHostQueryResponseReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *GETHostQueryResponseReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {
	case 200:
		result := NewGETHostQueryResponseOK()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil
	case 400:
		result := NewGETHostQueryResponseBadRequest()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 404:
		result := NewGETHostQueryResponseNotFound()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 500:
		result := NewGETHostQueryResponseInternalServerError()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	default:
		return nil, runtime.NewAPIError("response status code does not match any response statuses defined for this endpoint in the swagger spec", response, response.Code())
	}
}

// NewGETHostQueryResponseOK creates a GETHostQueryResponseOK with default headers values
func NewGETHostQueryResponseOK() *GETHostQueryResponseOK {
	return &GETHostQueryResponseOK{}
}

/*
GETHostQueryResponseOK describes a response with status code 200, with default header values.

Ok
*/
type GETHostQueryResponseOK struct {
	Payload *models.HostQueryResponse
}

// IsSuccess returns true when this get host query response o k response has a 2xx status code
func (o *GETHostQueryResponseOK) IsSuccess() bool {
	return true
}

// IsRedirect returns true when this get host query response o k response has a 3xx status code
func (o *GETHostQueryResponseOK) IsRedirect() bool {
	return false
}

// IsClientError returns true when this get host query response o k response has a 4xx status code
func (o *GETHostQueryResponseOK) IsClientError() bool {
	return false
}

// IsServerError returns true when this get host query response o k response has a 5xx status code
func (o *GETHostQueryResponseOK) IsServerError() bool {
	return false
}

// IsCode returns true when this get host query response o k response a status code equal to that given
func (o *GETHostQueryResponseOK) IsCode(code int) bool {
	return code == 200
}

func (o *GETHostQueryResponseOK) Error() string {
	return fmt.Sprintf("[GET /v1/clusters/{clusterId}/hosts/queries/{queryId}][%d] getHostQueryResponseOK  %+v", 200, o.Payload)
}

func (o *GETHostQueryResponseOK) String() string {
	return fmt.Sprintf("[GET /v1/clusters/{clusterId}/hosts/queries/{queryId}][%d] getHostQueryResponseOK  %+v", 200, o.Payload)
}

func (o *GETHostQueryResponseOK) GetPayload() *models.HostQueryResponse {
	return o.Payload
}

func (o *GETHostQueryResponseOK) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.HostQueryResponse)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewGETHostQueryResponseBadRequest creates a GETHostQueryResponseBadRequest with default headers values
func NewGETHostQueryResponseBadRequest() *GETHostQueryResponseBadRequest {
	return &GETHostQueryResponseBadRequest{}
}

/*
GETHostQueryResponseBadRequest describes a response with status code 400, with default header values.

Bad Request
*/
type GETHostQueryResponseBadRequest struct {
	Payload *models.Error
}

// IsSuccess returns true when this get host query response bad request response has a 2xx status code
func (o *GETHostQueryResponseBadRequest) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this get host query response bad request response has a 3xx status code
func (o *GETHostQueryResponseBadRequest) IsRedirect() bool {
	return false
}

// IsClientError returns true when this get host query response bad request response has a 4xx status code
func (o *GETHostQueryResponseBadRequest) IsClientError() bool {
	return true
}

// IsServerError returns true when this get host query response bad request response has a 5xx status code
func (o *GETHostQueryResponseBadRequest) IsServerError() bool {
	return false
}

// IsCode returns true when this get host query response bad request response a status code equal to that given
func (o *GETHostQueryResponseBadRequest) IsCode(code int) bool {
	return code == 400
}

func (o *GETHostQueryResponseBadRequest) Error() string {
	return fmt.Sprintf("[GET /v1/clusters/{clusterId}/hosts/queries/{queryId}][%d] getHostQueryResponseBadRequest  %+v", 400, o.Payload)
}

func (o *GETHostQueryResponseBadRequest) String() string {
	return fmt.Sprintf("[GET /v1/clusters/{clusterId}/hosts/queries/{queryId}][%d] getHostQueryResponseBadRequest  %+v", 400, o.Payload)
}

func (o *GETHostQueryResponseBadRequest) GetPayload() *models.Error {
	return o.Payload
}

func (o *GETHostQueryResponseBadRequest) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.Error)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewGETHostQueryResponseNotFound creates a GETHostQueryResponseNotFound with default headers values
func NewGETHostQueryResponseNotFound() *GETHostQueryResponseNotFound {
	return &GETHostQueryResponseNotFound{}
}

/*
GETHostQueryResponseNotFound describes a response with status code 404, with default header values.

Query Not Found
*/
type GETHostQueryResponseNotFound struct {
	Payload *models.Error
}

// IsSuccess returns true when this get host query response not found response has a 2xx status code
func (o *GETHostQueryResponseNotFound) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this get host query response not found response has a 3xx status code
func (o *GETHostQueryResponseNotFound) IsRedirect() bool {
	return false
}

// IsClientError returns true when this get host query response not found response has a 4xx status code
func (o *GETHostQueryResponseNotFound) IsClientError() bool {
	return true
}

// IsServerError returns true when this get host query response not found response has a 5xx status code
func (o *GETHostQueryResponseNotFound) IsServerError() bool {
	return false
}

// IsCode returns true when this get host query response not found response a status code equal to that given
func (o *GETHostQueryResponseNotFound) IsCode(code int) bool {
	return code == 404
}

func (o *GETHostQueryResponseNotFound) Error() string {
	return fmt.Sprintf("[GET /v1/clusters/{clusterId}/hosts/queries/{queryId}][%d] getHostQueryResponseNotFound  %+v", 404, o.Payload)
}

func (o *GETHostQueryResponseNotFound) String() string {
	return fmt.Sprintf("[GET /v1/clusters/{clusterId}/hosts/queries/{queryId}][%d] getHostQueryResponseNotFound  %+v", 404, o.Payload)
}

func (o *GETHostQueryResponseNotFound) GetPayload() *models.Error {
	return o.Payload
}

func (o *GETHostQueryResponseNotFound) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.Error)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewGETHostQueryResponseInternalServerError creates a GETHostQueryResponseInternalServerError with default headers values
func NewGETHostQueryResponseInternalServerError() *GETHostQueryResponseInternalServerError {
	return &GETHostQueryResponseInternalServerError{}
}

/*
GETHostQueryResponseInternalServerError describes a response with status code 500, with default header values.

Internal Server Error
*/
type GETHostQueryResponseInternalServerError struct {
	Payload *models.Error
}

// IsSuccess returns true when this get host query response internal server error response has a 2xx status code
func (o *GETHostQueryResponseInternalServerError) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this get host query response internal server error response has a 3xx status code
func (o *GETHostQueryResponseInternalServerError) IsRedirect() bool {
	return false
}

// IsClientError returns true when this get host query response internal server error response has a 4xx status code
func (o *GETHostQueryResponseInternalServerError) IsClientError() bool {
	return false
}

// IsServerError returns true when this get host query response internal server error response has a 5xx status code
func (o *GETHostQueryResponseInternalServerError) IsServerError() bool {
	return true
}

// IsCode returns true when this get host query response internal server error response a status code equal to that given
func (o *GETHostQueryResponseInternalServerError) IsCode(code int) bool {
	return code == 500
}

func (o *GETHostQueryResponseInternalServerError) Error() string {
	return fmt.Sprintf("[GET /v1/clusters/{clusterId}/hosts/queries/{queryId}][%d] getHostQueryResponseInternalServerError  %+v", 500, o.Payload)
}

func (o *GETHostQueryResponseInternalServerError) String() string {
	return fmt.Sprintf("[GET /v1/clusters/{clusterId}/hosts/queries/{queryId}][%d] getHostQueryResponseInternalServerError  %+v", 500, o.Payload)
}

func (o *GETHostQueryResponseInternalServerError) GetPayload() *models.Error {
	return o.Payload
}

func (o *GETHostQueryResponseInternalServerError) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.Error)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}
