// Code generated by go-swagger; DO NOT EDIT.

// Copyright Â© 2023 VMware, Inc. All Rights Reserved.
// Code licenced under: BSD-2

package clusters

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"
	"io"

	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"

	"vcf-sdk-go/models"
)

// GETTagsAssignedToClustersReader is a Reader for the GETTagsAssignedToClusters structure.
type GETTagsAssignedToClustersReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *GETTagsAssignedToClustersReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {
	case 200:
		result := NewGETTagsAssignedToClustersOK()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil
	case 400:
		result := NewGETTagsAssignedToClustersBadRequest()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 500:
		result := NewGETTagsAssignedToClustersInternalServerError()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	default:
		return nil, runtime.NewAPIError("response status code does not match any response statuses defined for this endpoint in the swagger spec", response, response.Code())
	}
}

// NewGETTagsAssignedToClustersOK creates a GETTagsAssignedToClustersOK with default headers values
func NewGETTagsAssignedToClustersOK() *GETTagsAssignedToClustersOK {
	return &GETTagsAssignedToClustersOK{}
}

/*
GETTagsAssignedToClustersOK describes a response with status code 200, with default header values.

Ok
*/
type GETTagsAssignedToClustersOK struct {
	Payload *models.PageOfTagsForResource
}

// IsSuccess returns true when this get tags assigned to clusters o k response has a 2xx status code
func (o *GETTagsAssignedToClustersOK) IsSuccess() bool {
	return true
}

// IsRedirect returns true when this get tags assigned to clusters o k response has a 3xx status code
func (o *GETTagsAssignedToClustersOK) IsRedirect() bool {
	return false
}

// IsClientError returns true when this get tags assigned to clusters o k response has a 4xx status code
func (o *GETTagsAssignedToClustersOK) IsClientError() bool {
	return false
}

// IsServerError returns true when this get tags assigned to clusters o k response has a 5xx status code
func (o *GETTagsAssignedToClustersOK) IsServerError() bool {
	return false
}

// IsCode returns true when this get tags assigned to clusters o k response a status code equal to that given
func (o *GETTagsAssignedToClustersOK) IsCode(code int) bool {
	return code == 200
}

func (o *GETTagsAssignedToClustersOK) Error() string {
	return fmt.Sprintf("[GET /v1/clusters/tags][%d] getTagsAssignedToClustersOK  %+v", 200, o.Payload)
}

func (o *GETTagsAssignedToClustersOK) String() string {
	return fmt.Sprintf("[GET /v1/clusters/tags][%d] getTagsAssignedToClustersOK  %+v", 200, o.Payload)
}

func (o *GETTagsAssignedToClustersOK) GetPayload() *models.PageOfTagsForResource {
	return o.Payload
}

func (o *GETTagsAssignedToClustersOK) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.PageOfTagsForResource)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewGETTagsAssignedToClustersBadRequest creates a GETTagsAssignedToClustersBadRequest with default headers values
func NewGETTagsAssignedToClustersBadRequest() *GETTagsAssignedToClustersBadRequest {
	return &GETTagsAssignedToClustersBadRequest{}
}

/*
GETTagsAssignedToClustersBadRequest describes a response with status code 400, with default header values.

Bad Request
*/
type GETTagsAssignedToClustersBadRequest struct {
	Payload *models.Error
}

// IsSuccess returns true when this get tags assigned to clusters bad request response has a 2xx status code
func (o *GETTagsAssignedToClustersBadRequest) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this get tags assigned to clusters bad request response has a 3xx status code
func (o *GETTagsAssignedToClustersBadRequest) IsRedirect() bool {
	return false
}

// IsClientError returns true when this get tags assigned to clusters bad request response has a 4xx status code
func (o *GETTagsAssignedToClustersBadRequest) IsClientError() bool {
	return true
}

// IsServerError returns true when this get tags assigned to clusters bad request response has a 5xx status code
func (o *GETTagsAssignedToClustersBadRequest) IsServerError() bool {
	return false
}

// IsCode returns true when this get tags assigned to clusters bad request response a status code equal to that given
func (o *GETTagsAssignedToClustersBadRequest) IsCode(code int) bool {
	return code == 400
}

func (o *GETTagsAssignedToClustersBadRequest) Error() string {
	return fmt.Sprintf("[GET /v1/clusters/tags][%d] getTagsAssignedToClustersBadRequest  %+v", 400, o.Payload)
}

func (o *GETTagsAssignedToClustersBadRequest) String() string {
	return fmt.Sprintf("[GET /v1/clusters/tags][%d] getTagsAssignedToClustersBadRequest  %+v", 400, o.Payload)
}

func (o *GETTagsAssignedToClustersBadRequest) GetPayload() *models.Error {
	return o.Payload
}

func (o *GETTagsAssignedToClustersBadRequest) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.Error)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewGETTagsAssignedToClustersInternalServerError creates a GETTagsAssignedToClustersInternalServerError with default headers values
func NewGETTagsAssignedToClustersInternalServerError() *GETTagsAssignedToClustersInternalServerError {
	return &GETTagsAssignedToClustersInternalServerError{}
}

/*
GETTagsAssignedToClustersInternalServerError describes a response with status code 500, with default header values.

InternalServerError
*/
type GETTagsAssignedToClustersInternalServerError struct {
	Payload *models.Error
}

// IsSuccess returns true when this get tags assigned to clusters internal server error response has a 2xx status code
func (o *GETTagsAssignedToClustersInternalServerError) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this get tags assigned to clusters internal server error response has a 3xx status code
func (o *GETTagsAssignedToClustersInternalServerError) IsRedirect() bool {
	return false
}

// IsClientError returns true when this get tags assigned to clusters internal server error response has a 4xx status code
func (o *GETTagsAssignedToClustersInternalServerError) IsClientError() bool {
	return false
}

// IsServerError returns true when this get tags assigned to clusters internal server error response has a 5xx status code
func (o *GETTagsAssignedToClustersInternalServerError) IsServerError() bool {
	return true
}

// IsCode returns true when this get tags assigned to clusters internal server error response a status code equal to that given
func (o *GETTagsAssignedToClustersInternalServerError) IsCode(code int) bool {
	return code == 500
}

func (o *GETTagsAssignedToClustersInternalServerError) Error() string {
	return fmt.Sprintf("[GET /v1/clusters/tags][%d] getTagsAssignedToClustersInternalServerError  %+v", 500, o.Payload)
}

func (o *GETTagsAssignedToClustersInternalServerError) String() string {
	return fmt.Sprintf("[GET /v1/clusters/tags][%d] getTagsAssignedToClustersInternalServerError  %+v", 500, o.Payload)
}

func (o *GETTagsAssignedToClustersInternalServerError) GetPayload() *models.Error {
	return o.Payload
}

func (o *GETTagsAssignedToClustersInternalServerError) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.Error)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}
