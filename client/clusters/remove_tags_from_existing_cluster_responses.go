// Code generated by go-swagger; DO NOT EDIT.

package clusters

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"
	"io"

	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"

	"vcf-sdk-go/models"
)

// RemoveTagsFromExistingClusterReader is a Reader for the RemoveTagsFromExistingCluster structure.
type RemoveTagsFromExistingClusterReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *RemoveTagsFromExistingClusterReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {
	case 200:
		result := NewRemoveTagsFromExistingClusterOK()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil
	case 400:
		result := NewRemoveTagsFromExistingClusterBadRequest()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 500:
		result := NewRemoveTagsFromExistingClusterInternalServerError()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	default:
		return nil, runtime.NewAPIError("response status code does not match any response statuses defined for this endpoint in the swagger spec", response, response.Code())
	}
}

// NewRemoveTagsFromExistingClusterOK creates a RemoveTagsFromExistingClusterOK with default headers values
func NewRemoveTagsFromExistingClusterOK() *RemoveTagsFromExistingClusterOK {
	return &RemoveTagsFromExistingClusterOK{}
}

/*
RemoveTagsFromExistingClusterOK describes a response with status code 200, with default header values.

Ok
*/
type RemoveTagsFromExistingClusterOK struct {
	Payload *models.TagAssignmentResult
}

// IsSuccess returns true when this remove tags from existing cluster o k response has a 2xx status code
func (o *RemoveTagsFromExistingClusterOK) IsSuccess() bool {
	return true
}

// IsRedirect returns true when this remove tags from existing cluster o k response has a 3xx status code
func (o *RemoveTagsFromExistingClusterOK) IsRedirect() bool {
	return false
}

// IsClientError returns true when this remove tags from existing cluster o k response has a 4xx status code
func (o *RemoveTagsFromExistingClusterOK) IsClientError() bool {
	return false
}

// IsServerError returns true when this remove tags from existing cluster o k response has a 5xx status code
func (o *RemoveTagsFromExistingClusterOK) IsServerError() bool {
	return false
}

// IsCode returns true when this remove tags from existing cluster o k response a status code equal to that given
func (o *RemoveTagsFromExistingClusterOK) IsCode(code int) bool {
	return code == 200
}

func (o *RemoveTagsFromExistingClusterOK) Error() string {
	return fmt.Sprintf("[DELETE /v1/clusters/{id}/tags][%d] removeTagsFromExistingClusterOK  %+v", 200, o.Payload)
}

func (o *RemoveTagsFromExistingClusterOK) String() string {
	return fmt.Sprintf("[DELETE /v1/clusters/{id}/tags][%d] removeTagsFromExistingClusterOK  %+v", 200, o.Payload)
}

func (o *RemoveTagsFromExistingClusterOK) GetPayload() *models.TagAssignmentResult {
	return o.Payload
}

func (o *RemoveTagsFromExistingClusterOK) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.TagAssignmentResult)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewRemoveTagsFromExistingClusterBadRequest creates a RemoveTagsFromExistingClusterBadRequest with default headers values
func NewRemoveTagsFromExistingClusterBadRequest() *RemoveTagsFromExistingClusterBadRequest {
	return &RemoveTagsFromExistingClusterBadRequest{}
}

/*
RemoveTagsFromExistingClusterBadRequest describes a response with status code 400, with default header values.

Bad Request
*/
type RemoveTagsFromExistingClusterBadRequest struct {
	Payload *models.Error
}

// IsSuccess returns true when this remove tags from existing cluster bad request response has a 2xx status code
func (o *RemoveTagsFromExistingClusterBadRequest) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this remove tags from existing cluster bad request response has a 3xx status code
func (o *RemoveTagsFromExistingClusterBadRequest) IsRedirect() bool {
	return false
}

// IsClientError returns true when this remove tags from existing cluster bad request response has a 4xx status code
func (o *RemoveTagsFromExistingClusterBadRequest) IsClientError() bool {
	return true
}

// IsServerError returns true when this remove tags from existing cluster bad request response has a 5xx status code
func (o *RemoveTagsFromExistingClusterBadRequest) IsServerError() bool {
	return false
}

// IsCode returns true when this remove tags from existing cluster bad request response a status code equal to that given
func (o *RemoveTagsFromExistingClusterBadRequest) IsCode(code int) bool {
	return code == 400
}

func (o *RemoveTagsFromExistingClusterBadRequest) Error() string {
	return fmt.Sprintf("[DELETE /v1/clusters/{id}/tags][%d] removeTagsFromExistingClusterBadRequest  %+v", 400, o.Payload)
}

func (o *RemoveTagsFromExistingClusterBadRequest) String() string {
	return fmt.Sprintf("[DELETE /v1/clusters/{id}/tags][%d] removeTagsFromExistingClusterBadRequest  %+v", 400, o.Payload)
}

func (o *RemoveTagsFromExistingClusterBadRequest) GetPayload() *models.Error {
	return o.Payload
}

func (o *RemoveTagsFromExistingClusterBadRequest) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.Error)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewRemoveTagsFromExistingClusterInternalServerError creates a RemoveTagsFromExistingClusterInternalServerError with default headers values
func NewRemoveTagsFromExistingClusterInternalServerError() *RemoveTagsFromExistingClusterInternalServerError {
	return &RemoveTagsFromExistingClusterInternalServerError{}
}

/*
RemoveTagsFromExistingClusterInternalServerError describes a response with status code 500, with default header values.

InternalServerError
*/
type RemoveTagsFromExistingClusterInternalServerError struct {
	Payload *models.Error
}

// IsSuccess returns true when this remove tags from existing cluster internal server error response has a 2xx status code
func (o *RemoveTagsFromExistingClusterInternalServerError) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this remove tags from existing cluster internal server error response has a 3xx status code
func (o *RemoveTagsFromExistingClusterInternalServerError) IsRedirect() bool {
	return false
}

// IsClientError returns true when this remove tags from existing cluster internal server error response has a 4xx status code
func (o *RemoveTagsFromExistingClusterInternalServerError) IsClientError() bool {
	return false
}

// IsServerError returns true when this remove tags from existing cluster internal server error response has a 5xx status code
func (o *RemoveTagsFromExistingClusterInternalServerError) IsServerError() bool {
	return true
}

// IsCode returns true when this remove tags from existing cluster internal server error response a status code equal to that given
func (o *RemoveTagsFromExistingClusterInternalServerError) IsCode(code int) bool {
	return code == 500
}

func (o *RemoveTagsFromExistingClusterInternalServerError) Error() string {
	return fmt.Sprintf("[DELETE /v1/clusters/{id}/tags][%d] removeTagsFromExistingClusterInternalServerError  %+v", 500, o.Payload)
}

func (o *RemoveTagsFromExistingClusterInternalServerError) String() string {
	return fmt.Sprintf("[DELETE /v1/clusters/{id}/tags][%d] removeTagsFromExistingClusterInternalServerError  %+v", 500, o.Payload)
}

func (o *RemoveTagsFromExistingClusterInternalServerError) GetPayload() *models.Error {
	return o.Payload
}

func (o *RemoveTagsFromExistingClusterInternalServerError) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.Error)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}
