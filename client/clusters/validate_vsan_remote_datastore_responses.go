// Code generated by go-swagger; DO NOT EDIT.

package clusters

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"
	"io"

	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"

	"vcf-sdk-go/models"
)

// ValidateVsanRemoteDatastoreReader is a Reader for the ValidateVsanRemoteDatastore structure.
type ValidateVsanRemoteDatastoreReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *ValidateVsanRemoteDatastoreReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {
	case 200:
		result := NewValidateVsanRemoteDatastoreOK()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil
	case 400:
		result := NewValidateVsanRemoteDatastoreBadRequest()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 500:
		result := NewValidateVsanRemoteDatastoreInternalServerError()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	default:
		return nil, runtime.NewAPIError("response status code does not match any response statuses defined for this endpoint in the swagger spec", response, response.Code())
	}
}

// NewValidateVsanRemoteDatastoreOK creates a ValidateVsanRemoteDatastoreOK with default headers values
func NewValidateVsanRemoteDatastoreOK() *ValidateVsanRemoteDatastoreOK {
	return &ValidateVsanRemoteDatastoreOK{}
}

/*
ValidateVsanRemoteDatastoreOK describes a response with status code 200, with default header values.

Ok
*/
type ValidateVsanRemoteDatastoreOK struct {
	Payload *models.Validation
}

// IsSuccess returns true when this validate vsan remote datastore o k response has a 2xx status code
func (o *ValidateVsanRemoteDatastoreOK) IsSuccess() bool {
	return true
}

// IsRedirect returns true when this validate vsan remote datastore o k response has a 3xx status code
func (o *ValidateVsanRemoteDatastoreOK) IsRedirect() bool {
	return false
}

// IsClientError returns true when this validate vsan remote datastore o k response has a 4xx status code
func (o *ValidateVsanRemoteDatastoreOK) IsClientError() bool {
	return false
}

// IsServerError returns true when this validate vsan remote datastore o k response has a 5xx status code
func (o *ValidateVsanRemoteDatastoreOK) IsServerError() bool {
	return false
}

// IsCode returns true when this validate vsan remote datastore o k response a status code equal to that given
func (o *ValidateVsanRemoteDatastoreOK) IsCode(code int) bool {
	return code == 200
}

func (o *ValidateVsanRemoteDatastoreOK) Error() string {
	return fmt.Sprintf("[POST /v1/clusters/{clusterId}/datastores/validation][%d] validateVsanRemoteDatastoreOK  %+v", 200, o.Payload)
}

func (o *ValidateVsanRemoteDatastoreOK) String() string {
	return fmt.Sprintf("[POST /v1/clusters/{clusterId}/datastores/validation][%d] validateVsanRemoteDatastoreOK  %+v", 200, o.Payload)
}

func (o *ValidateVsanRemoteDatastoreOK) GetPayload() *models.Validation {
	return o.Payload
}

func (o *ValidateVsanRemoteDatastoreOK) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.Validation)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewValidateVsanRemoteDatastoreBadRequest creates a ValidateVsanRemoteDatastoreBadRequest with default headers values
func NewValidateVsanRemoteDatastoreBadRequest() *ValidateVsanRemoteDatastoreBadRequest {
	return &ValidateVsanRemoteDatastoreBadRequest{}
}

/*
ValidateVsanRemoteDatastoreBadRequest describes a response with status code 400, with default header values.

Bad Request
*/
type ValidateVsanRemoteDatastoreBadRequest struct {
	Payload *models.Error
}

// IsSuccess returns true when this validate vsan remote datastore bad request response has a 2xx status code
func (o *ValidateVsanRemoteDatastoreBadRequest) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this validate vsan remote datastore bad request response has a 3xx status code
func (o *ValidateVsanRemoteDatastoreBadRequest) IsRedirect() bool {
	return false
}

// IsClientError returns true when this validate vsan remote datastore bad request response has a 4xx status code
func (o *ValidateVsanRemoteDatastoreBadRequest) IsClientError() bool {
	return true
}

// IsServerError returns true when this validate vsan remote datastore bad request response has a 5xx status code
func (o *ValidateVsanRemoteDatastoreBadRequest) IsServerError() bool {
	return false
}

// IsCode returns true when this validate vsan remote datastore bad request response a status code equal to that given
func (o *ValidateVsanRemoteDatastoreBadRequest) IsCode(code int) bool {
	return code == 400
}

func (o *ValidateVsanRemoteDatastoreBadRequest) Error() string {
	return fmt.Sprintf("[POST /v1/clusters/{clusterId}/datastores/validation][%d] validateVsanRemoteDatastoreBadRequest  %+v", 400, o.Payload)
}

func (o *ValidateVsanRemoteDatastoreBadRequest) String() string {
	return fmt.Sprintf("[POST /v1/clusters/{clusterId}/datastores/validation][%d] validateVsanRemoteDatastoreBadRequest  %+v", 400, o.Payload)
}

func (o *ValidateVsanRemoteDatastoreBadRequest) GetPayload() *models.Error {
	return o.Payload
}

func (o *ValidateVsanRemoteDatastoreBadRequest) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.Error)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewValidateVsanRemoteDatastoreInternalServerError creates a ValidateVsanRemoteDatastoreInternalServerError with default headers values
func NewValidateVsanRemoteDatastoreInternalServerError() *ValidateVsanRemoteDatastoreInternalServerError {
	return &ValidateVsanRemoteDatastoreInternalServerError{}
}

/*
ValidateVsanRemoteDatastoreInternalServerError describes a response with status code 500, with default header values.

InternalServerError
*/
type ValidateVsanRemoteDatastoreInternalServerError struct {
	Payload *models.Error
}

// IsSuccess returns true when this validate vsan remote datastore internal server error response has a 2xx status code
func (o *ValidateVsanRemoteDatastoreInternalServerError) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this validate vsan remote datastore internal server error response has a 3xx status code
func (o *ValidateVsanRemoteDatastoreInternalServerError) IsRedirect() bool {
	return false
}

// IsClientError returns true when this validate vsan remote datastore internal server error response has a 4xx status code
func (o *ValidateVsanRemoteDatastoreInternalServerError) IsClientError() bool {
	return false
}

// IsServerError returns true when this validate vsan remote datastore internal server error response has a 5xx status code
func (o *ValidateVsanRemoteDatastoreInternalServerError) IsServerError() bool {
	return true
}

// IsCode returns true when this validate vsan remote datastore internal server error response a status code equal to that given
func (o *ValidateVsanRemoteDatastoreInternalServerError) IsCode(code int) bool {
	return code == 500
}

func (o *ValidateVsanRemoteDatastoreInternalServerError) Error() string {
	return fmt.Sprintf("[POST /v1/clusters/{clusterId}/datastores/validation][%d] validateVsanRemoteDatastoreInternalServerError  %+v", 500, o.Payload)
}

func (o *ValidateVsanRemoteDatastoreInternalServerError) String() string {
	return fmt.Sprintf("[POST /v1/clusters/{clusterId}/datastores/validation][%d] validateVsanRemoteDatastoreInternalServerError  %+v", 500, o.Payload)
}

func (o *ValidateVsanRemoteDatastoreInternalServerError) GetPayload() *models.Error {
	return o.Payload
}

func (o *ValidateVsanRemoteDatastoreInternalServerError) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.Error)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}
