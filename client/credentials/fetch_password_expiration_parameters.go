// Code generated by go-swagger; DO NOT EDIT.

// Copyright Â© 2023 VMware, Inc. All Rights Reserved.
// Code licenced under: BSD-2

package credentials

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"net/http"
	"time"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/runtime"
	cr "github.com/go-openapi/runtime/client"
	"github.com/go-openapi/strfmt"

	"vcf-sdk-go/models"
)

// NewFetchPasswordExpirationParams creates a new FetchPasswordExpirationParams object,
// with the default timeout for this client.
//
// Default values are not hydrated, since defaults are normally applied by the API server side.
//
// To enforce default values in parameter, use SetDefaults or WithDefaults.
func NewFetchPasswordExpirationParams() *FetchPasswordExpirationParams {
	return &FetchPasswordExpirationParams{
		timeout: cr.DefaultTimeout,
	}
}

// NewFetchPasswordExpirationParamsWithTimeout creates a new FetchPasswordExpirationParams object
// with the ability to set a timeout on a request.
func NewFetchPasswordExpirationParamsWithTimeout(timeout time.Duration) *FetchPasswordExpirationParams {
	return &FetchPasswordExpirationParams{
		timeout: timeout,
	}
}

// NewFetchPasswordExpirationParamsWithContext creates a new FetchPasswordExpirationParams object
// with the ability to set a context for a request.
func NewFetchPasswordExpirationParamsWithContext(ctx context.Context) *FetchPasswordExpirationParams {
	return &FetchPasswordExpirationParams{
		Context: ctx,
	}
}

// NewFetchPasswordExpirationParamsWithHTTPClient creates a new FetchPasswordExpirationParams object
// with the ability to set a custom HTTPClient for a request.
func NewFetchPasswordExpirationParamsWithHTTPClient(client *http.Client) *FetchPasswordExpirationParams {
	return &FetchPasswordExpirationParams{
		HTTPClient: client,
	}
}

/*
FetchPasswordExpirationParams contains all the parameters to send to the API endpoint

	for the fetch password expiration operation.

	Typically these are written to a http.Request.
*/
type FetchPasswordExpirationParams struct {

	/* CredentialsExpirationSpec.

	   credentialsExpirationSpec
	*/
	CredentialsExpirationSpec *models.CredentialsExpirationSpec

	timeout    time.Duration
	Context    context.Context
	HTTPClient *http.Client
}

// WithDefaults hydrates default values in the fetch password expiration params (not the query body).
//
// All values with no default are reset to their zero value.
func (o *FetchPasswordExpirationParams) WithDefaults() *FetchPasswordExpirationParams {
	o.SetDefaults()
	return o
}

// SetDefaults hydrates default values in the fetch password expiration params (not the query body).
//
// All values with no default are reset to their zero value.
func (o *FetchPasswordExpirationParams) SetDefaults() {
	// no default values defined for this parameter
}

// WithTimeout adds the timeout to the fetch password expiration params
func (o *FetchPasswordExpirationParams) WithTimeout(timeout time.Duration) *FetchPasswordExpirationParams {
	o.SetTimeout(timeout)
	return o
}

// SetTimeout adds the timeout to the fetch password expiration params
func (o *FetchPasswordExpirationParams) SetTimeout(timeout time.Duration) {
	o.timeout = timeout
}

// WithContext adds the context to the fetch password expiration params
func (o *FetchPasswordExpirationParams) WithContext(ctx context.Context) *FetchPasswordExpirationParams {
	o.SetContext(ctx)
	return o
}

// SetContext adds the context to the fetch password expiration params
func (o *FetchPasswordExpirationParams) SetContext(ctx context.Context) {
	o.Context = ctx
}

// WithHTTPClient adds the HTTPClient to the fetch password expiration params
func (o *FetchPasswordExpirationParams) WithHTTPClient(client *http.Client) *FetchPasswordExpirationParams {
	o.SetHTTPClient(client)
	return o
}

// SetHTTPClient adds the HTTPClient to the fetch password expiration params
func (o *FetchPasswordExpirationParams) SetHTTPClient(client *http.Client) {
	o.HTTPClient = client
}

// WithCredentialsExpirationSpec adds the credentialsExpirationSpec to the fetch password expiration params
func (o *FetchPasswordExpirationParams) WithCredentialsExpirationSpec(credentialsExpirationSpec *models.CredentialsExpirationSpec) *FetchPasswordExpirationParams {
	o.SetCredentialsExpirationSpec(credentialsExpirationSpec)
	return o
}

// SetCredentialsExpirationSpec adds the credentialsExpirationSpec to the fetch password expiration params
func (o *FetchPasswordExpirationParams) SetCredentialsExpirationSpec(credentialsExpirationSpec *models.CredentialsExpirationSpec) {
	o.CredentialsExpirationSpec = credentialsExpirationSpec
}

// WriteToRequest writes these params to a swagger request
func (o *FetchPasswordExpirationParams) WriteToRequest(r runtime.ClientRequest, reg strfmt.Registry) error {

	if err := r.SetTimeout(o.timeout); err != nil {
		return err
	}
	var res []error
	if o.CredentialsExpirationSpec != nil {
		if err := r.SetBodyParam(o.CredentialsExpirationSpec); err != nil {
			return err
		}
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}
