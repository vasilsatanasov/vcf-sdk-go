// Code generated by go-swagger; DO NOT EDIT.

// Copyright 2023 VMware, Inc.
// SPDX-License-Identifier: BSD-2-Clause

package credentials

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"
	"io"

	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"

	"github.com/vmware/vcf-sdk-go/models"
)

// FetchPasswordExpirationReader is a Reader for the FetchPasswordExpiration structure.
type FetchPasswordExpirationReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *FetchPasswordExpirationReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {
	case 200:
		result := NewFetchPasswordExpirationOK()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil
	case 202:
		result := NewFetchPasswordExpirationAccepted()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil
	case 400:
		result := NewFetchPasswordExpirationBadRequest()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 401:
		result := NewFetchPasswordExpirationUnauthorized()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 403:
		result := NewFetchPasswordExpirationForbidden()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 429:
		result := NewFetchPasswordExpirationTooManyRequests()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 500:
		result := NewFetchPasswordExpirationInternalServerError()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	default:
		return nil, runtime.NewAPIError("response status code does not match any response statuses defined for this endpoint in the swagger spec", response, response.Code())
	}
}

// NewFetchPasswordExpirationOK creates a FetchPasswordExpirationOK with default headers values
func NewFetchPasswordExpirationOK() *FetchPasswordExpirationOK {
	return &FetchPasswordExpirationOK{}
}

/*
FetchPasswordExpirationOK describes a response with status code 200, with default header values.

OK
*/
type FetchPasswordExpirationOK struct {
	Payload *models.CredentialsExpiration
}

// IsSuccess returns true when this fetch password expiration o k response has a 2xx status code
func (o *FetchPasswordExpirationOK) IsSuccess() bool {
	return true
}

// IsRedirect returns true when this fetch password expiration o k response has a 3xx status code
func (o *FetchPasswordExpirationOK) IsRedirect() bool {
	return false
}

// IsClientError returns true when this fetch password expiration o k response has a 4xx status code
func (o *FetchPasswordExpirationOK) IsClientError() bool {
	return false
}

// IsServerError returns true when this fetch password expiration o k response has a 5xx status code
func (o *FetchPasswordExpirationOK) IsServerError() bool {
	return false
}

// IsCode returns true when this fetch password expiration o k response a status code equal to that given
func (o *FetchPasswordExpirationOK) IsCode(code int) bool {
	return code == 200
}

func (o *FetchPasswordExpirationOK) Error() string {
	return fmt.Sprintf("[POST /v1/credentials/expirations][%d] fetchPasswordExpirationOK  %+v", 200, o.Payload)
}

func (o *FetchPasswordExpirationOK) String() string {
	return fmt.Sprintf("[POST /v1/credentials/expirations][%d] fetchPasswordExpirationOK  %+v", 200, o.Payload)
}

func (o *FetchPasswordExpirationOK) GetPayload() *models.CredentialsExpiration {
	return o.Payload
}

func (o *FetchPasswordExpirationOK) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.CredentialsExpiration)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewFetchPasswordExpirationAccepted creates a FetchPasswordExpirationAccepted with default headers values
func NewFetchPasswordExpirationAccepted() *FetchPasswordExpirationAccepted {
	return &FetchPasswordExpirationAccepted{}
}

/*
FetchPasswordExpirationAccepted describes a response with status code 202, with default header values.

Accepted
*/
type FetchPasswordExpirationAccepted struct {
	Payload *models.Task
}

// IsSuccess returns true when this fetch password expiration accepted response has a 2xx status code
func (o *FetchPasswordExpirationAccepted) IsSuccess() bool {
	return true
}

// IsRedirect returns true when this fetch password expiration accepted response has a 3xx status code
func (o *FetchPasswordExpirationAccepted) IsRedirect() bool {
	return false
}

// IsClientError returns true when this fetch password expiration accepted response has a 4xx status code
func (o *FetchPasswordExpirationAccepted) IsClientError() bool {
	return false
}

// IsServerError returns true when this fetch password expiration accepted response has a 5xx status code
func (o *FetchPasswordExpirationAccepted) IsServerError() bool {
	return false
}

// IsCode returns true when this fetch password expiration accepted response a status code equal to that given
func (o *FetchPasswordExpirationAccepted) IsCode(code int) bool {
	return code == 202
}

func (o *FetchPasswordExpirationAccepted) Error() string {
	return fmt.Sprintf("[POST /v1/credentials/expirations][%d] fetchPasswordExpirationAccepted  %+v", 202, o.Payload)
}

func (o *FetchPasswordExpirationAccepted) String() string {
	return fmt.Sprintf("[POST /v1/credentials/expirations][%d] fetchPasswordExpirationAccepted  %+v", 202, o.Payload)
}

func (o *FetchPasswordExpirationAccepted) GetPayload() *models.Task {
	return o.Payload
}

func (o *FetchPasswordExpirationAccepted) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.Task)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewFetchPasswordExpirationBadRequest creates a FetchPasswordExpirationBadRequest with default headers values
func NewFetchPasswordExpirationBadRequest() *FetchPasswordExpirationBadRequest {
	return &FetchPasswordExpirationBadRequest{}
}

/*
FetchPasswordExpirationBadRequest describes a response with status code 400, with default header values.

Bad Request
*/
type FetchPasswordExpirationBadRequest struct {
	Payload *models.Error
}

// IsSuccess returns true when this fetch password expiration bad request response has a 2xx status code
func (o *FetchPasswordExpirationBadRequest) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this fetch password expiration bad request response has a 3xx status code
func (o *FetchPasswordExpirationBadRequest) IsRedirect() bool {
	return false
}

// IsClientError returns true when this fetch password expiration bad request response has a 4xx status code
func (o *FetchPasswordExpirationBadRequest) IsClientError() bool {
	return true
}

// IsServerError returns true when this fetch password expiration bad request response has a 5xx status code
func (o *FetchPasswordExpirationBadRequest) IsServerError() bool {
	return false
}

// IsCode returns true when this fetch password expiration bad request response a status code equal to that given
func (o *FetchPasswordExpirationBadRequest) IsCode(code int) bool {
	return code == 400
}

func (o *FetchPasswordExpirationBadRequest) Error() string {
	return fmt.Sprintf("[POST /v1/credentials/expirations][%d] fetchPasswordExpirationBadRequest  %+v", 400, o.Payload)
}

func (o *FetchPasswordExpirationBadRequest) String() string {
	return fmt.Sprintf("[POST /v1/credentials/expirations][%d] fetchPasswordExpirationBadRequest  %+v", 400, o.Payload)
}

func (o *FetchPasswordExpirationBadRequest) GetPayload() *models.Error {
	return o.Payload
}

func (o *FetchPasswordExpirationBadRequest) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.Error)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewFetchPasswordExpirationUnauthorized creates a FetchPasswordExpirationUnauthorized with default headers values
func NewFetchPasswordExpirationUnauthorized() *FetchPasswordExpirationUnauthorized {
	return &FetchPasswordExpirationUnauthorized{}
}

/*
FetchPasswordExpirationUnauthorized describes a response with status code 401, with default header values.

Unauthorized
*/
type FetchPasswordExpirationUnauthorized struct {
	Payload *models.Error
}

// IsSuccess returns true when this fetch password expiration unauthorized response has a 2xx status code
func (o *FetchPasswordExpirationUnauthorized) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this fetch password expiration unauthorized response has a 3xx status code
func (o *FetchPasswordExpirationUnauthorized) IsRedirect() bool {
	return false
}

// IsClientError returns true when this fetch password expiration unauthorized response has a 4xx status code
func (o *FetchPasswordExpirationUnauthorized) IsClientError() bool {
	return true
}

// IsServerError returns true when this fetch password expiration unauthorized response has a 5xx status code
func (o *FetchPasswordExpirationUnauthorized) IsServerError() bool {
	return false
}

// IsCode returns true when this fetch password expiration unauthorized response a status code equal to that given
func (o *FetchPasswordExpirationUnauthorized) IsCode(code int) bool {
	return code == 401
}

func (o *FetchPasswordExpirationUnauthorized) Error() string {
	return fmt.Sprintf("[POST /v1/credentials/expirations][%d] fetchPasswordExpirationUnauthorized  %+v", 401, o.Payload)
}

func (o *FetchPasswordExpirationUnauthorized) String() string {
	return fmt.Sprintf("[POST /v1/credentials/expirations][%d] fetchPasswordExpirationUnauthorized  %+v", 401, o.Payload)
}

func (o *FetchPasswordExpirationUnauthorized) GetPayload() *models.Error {
	return o.Payload
}

func (o *FetchPasswordExpirationUnauthorized) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.Error)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewFetchPasswordExpirationForbidden creates a FetchPasswordExpirationForbidden with default headers values
func NewFetchPasswordExpirationForbidden() *FetchPasswordExpirationForbidden {
	return &FetchPasswordExpirationForbidden{}
}

/*
FetchPasswordExpirationForbidden describes a response with status code 403, with default header values.

Forbidden
*/
type FetchPasswordExpirationForbidden struct {
	Payload *models.Error
}

// IsSuccess returns true when this fetch password expiration forbidden response has a 2xx status code
func (o *FetchPasswordExpirationForbidden) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this fetch password expiration forbidden response has a 3xx status code
func (o *FetchPasswordExpirationForbidden) IsRedirect() bool {
	return false
}

// IsClientError returns true when this fetch password expiration forbidden response has a 4xx status code
func (o *FetchPasswordExpirationForbidden) IsClientError() bool {
	return true
}

// IsServerError returns true when this fetch password expiration forbidden response has a 5xx status code
func (o *FetchPasswordExpirationForbidden) IsServerError() bool {
	return false
}

// IsCode returns true when this fetch password expiration forbidden response a status code equal to that given
func (o *FetchPasswordExpirationForbidden) IsCode(code int) bool {
	return code == 403
}

func (o *FetchPasswordExpirationForbidden) Error() string {
	return fmt.Sprintf("[POST /v1/credentials/expirations][%d] fetchPasswordExpirationForbidden  %+v", 403, o.Payload)
}

func (o *FetchPasswordExpirationForbidden) String() string {
	return fmt.Sprintf("[POST /v1/credentials/expirations][%d] fetchPasswordExpirationForbidden  %+v", 403, o.Payload)
}

func (o *FetchPasswordExpirationForbidden) GetPayload() *models.Error {
	return o.Payload
}

func (o *FetchPasswordExpirationForbidden) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.Error)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewFetchPasswordExpirationTooManyRequests creates a FetchPasswordExpirationTooManyRequests with default headers values
func NewFetchPasswordExpirationTooManyRequests() *FetchPasswordExpirationTooManyRequests {
	return &FetchPasswordExpirationTooManyRequests{}
}

/*
FetchPasswordExpirationTooManyRequests describes a response with status code 429, with default header values.

Too many requests
*/
type FetchPasswordExpirationTooManyRequests struct {
	Payload *models.Error
}

// IsSuccess returns true when this fetch password expiration too many requests response has a 2xx status code
func (o *FetchPasswordExpirationTooManyRequests) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this fetch password expiration too many requests response has a 3xx status code
func (o *FetchPasswordExpirationTooManyRequests) IsRedirect() bool {
	return false
}

// IsClientError returns true when this fetch password expiration too many requests response has a 4xx status code
func (o *FetchPasswordExpirationTooManyRequests) IsClientError() bool {
	return true
}

// IsServerError returns true when this fetch password expiration too many requests response has a 5xx status code
func (o *FetchPasswordExpirationTooManyRequests) IsServerError() bool {
	return false
}

// IsCode returns true when this fetch password expiration too many requests response a status code equal to that given
func (o *FetchPasswordExpirationTooManyRequests) IsCode(code int) bool {
	return code == 429
}

func (o *FetchPasswordExpirationTooManyRequests) Error() string {
	return fmt.Sprintf("[POST /v1/credentials/expirations][%d] fetchPasswordExpirationTooManyRequests  %+v", 429, o.Payload)
}

func (o *FetchPasswordExpirationTooManyRequests) String() string {
	return fmt.Sprintf("[POST /v1/credentials/expirations][%d] fetchPasswordExpirationTooManyRequests  %+v", 429, o.Payload)
}

func (o *FetchPasswordExpirationTooManyRequests) GetPayload() *models.Error {
	return o.Payload
}

func (o *FetchPasswordExpirationTooManyRequests) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.Error)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewFetchPasswordExpirationInternalServerError creates a FetchPasswordExpirationInternalServerError with default headers values
func NewFetchPasswordExpirationInternalServerError() *FetchPasswordExpirationInternalServerError {
	return &FetchPasswordExpirationInternalServerError{}
}

/*
FetchPasswordExpirationInternalServerError describes a response with status code 500, with default header values.

Internal Server Error
*/
type FetchPasswordExpirationInternalServerError struct {
	Payload *models.Error
}

// IsSuccess returns true when this fetch password expiration internal server error response has a 2xx status code
func (o *FetchPasswordExpirationInternalServerError) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this fetch password expiration internal server error response has a 3xx status code
func (o *FetchPasswordExpirationInternalServerError) IsRedirect() bool {
	return false
}

// IsClientError returns true when this fetch password expiration internal server error response has a 4xx status code
func (o *FetchPasswordExpirationInternalServerError) IsClientError() bool {
	return false
}

// IsServerError returns true when this fetch password expiration internal server error response has a 5xx status code
func (o *FetchPasswordExpirationInternalServerError) IsServerError() bool {
	return true
}

// IsCode returns true when this fetch password expiration internal server error response a status code equal to that given
func (o *FetchPasswordExpirationInternalServerError) IsCode(code int) bool {
	return code == 500
}

func (o *FetchPasswordExpirationInternalServerError) Error() string {
	return fmt.Sprintf("[POST /v1/credentials/expirations][%d] fetchPasswordExpirationInternalServerError  %+v", 500, o.Payload)
}

func (o *FetchPasswordExpirationInternalServerError) String() string {
	return fmt.Sprintf("[POST /v1/credentials/expirations][%d] fetchPasswordExpirationInternalServerError  %+v", 500, o.Payload)
}

func (o *FetchPasswordExpirationInternalServerError) GetPayload() *models.Error {
	return o.Payload
}

func (o *FetchPasswordExpirationInternalServerError) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.Error)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}
