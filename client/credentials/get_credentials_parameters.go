// Code generated by go-swagger; DO NOT EDIT.

// Copyright Â© 2023 VMware, Inc. All Rights Reserved.
// Code licenced under: BSD-2

package credentials

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"net/http"
	"time"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/runtime"
	cr "github.com/go-openapi/runtime/client"
	"github.com/go-openapi/strfmt"
)

// NewGETCredentialsParams creates a new GETCredentialsParams object,
// with the default timeout for this client.
//
// Default values are not hydrated, since defaults are normally applied by the API server side.
//
// To enforce default values in parameter, use SetDefaults or WithDefaults.
func NewGETCredentialsParams() *GETCredentialsParams {
	return &GETCredentialsParams{
		timeout: cr.DefaultTimeout,
	}
}

// NewGETCredentialsParamsWithTimeout creates a new GETCredentialsParams object
// with the ability to set a timeout on a request.
func NewGETCredentialsParamsWithTimeout(timeout time.Duration) *GETCredentialsParams {
	return &GETCredentialsParams{
		timeout: timeout,
	}
}

// NewGETCredentialsParamsWithContext creates a new GETCredentialsParams object
// with the ability to set a context for a request.
func NewGETCredentialsParamsWithContext(ctx context.Context) *GETCredentialsParams {
	return &GETCredentialsParams{
		Context: ctx,
	}
}

// NewGETCredentialsParamsWithHTTPClient creates a new GETCredentialsParams object
// with the ability to set a custom HTTPClient for a request.
func NewGETCredentialsParamsWithHTTPClient(client *http.Client) *GETCredentialsParams {
	return &GETCredentialsParams{
		HTTPClient: client,
	}
}

/*
GETCredentialsParams contains all the parameters to send to the API endpoint

	for the get credentials operation.

	Typically these are written to a http.Request.
*/
type GETCredentialsParams struct {

	/* AccountType.

	   Type of the account that needs to be fetched by filtering
	*/
	AccountType *string

	/* DomainName.

	   The name of the domain to which the resource belongs to (may be null in case there is no associated domain)
	*/
	DomainName *string

	/* PageNumber.

	   The page number (must be a positive number), starts with 0
	*/
	PageNumber *string

	/* PageSize.

	   The page size (must be a positive number, 0 as page size returns all records in one page
	*/
	PageSize *string

	/* ResourceIP.

	   The IP address of the resource
	*/
	ResourceIP *string

	/* ResourceName.

	   The name of the resource
	*/
	ResourceName *string

	/* ResourceType.

	   The type of the resource. One among: ESXI, VCENTER, PSC, NSX_MANAGER, NSX_CONTROLLER, NSX_EDGE, NSXT_MANAGER, NSXT_EDGE, VRLI, VROPS, VRA, WSA, VRSLCM, VXRAIL_MANAGER, BACKUP
	*/
	ResourceType *string

	timeout    time.Duration
	Context    context.Context
	HTTPClient *http.Client
}

// WithDefaults hydrates default values in the get credentials params (not the query body).
//
// All values with no default are reset to their zero value.
func (o *GETCredentialsParams) WithDefaults() *GETCredentialsParams {
	o.SetDefaults()
	return o
}

// SetDefaults hydrates default values in the get credentials params (not the query body).
//
// All values with no default are reset to their zero value.
func (o *GETCredentialsParams) SetDefaults() {
	// no default values defined for this parameter
}

// WithTimeout adds the timeout to the get credentials params
func (o *GETCredentialsParams) WithTimeout(timeout time.Duration) *GETCredentialsParams {
	o.SetTimeout(timeout)
	return o
}

// SetTimeout adds the timeout to the get credentials params
func (o *GETCredentialsParams) SetTimeout(timeout time.Duration) {
	o.timeout = timeout
}

// WithContext adds the context to the get credentials params
func (o *GETCredentialsParams) WithContext(ctx context.Context) *GETCredentialsParams {
	o.SetContext(ctx)
	return o
}

// SetContext adds the context to the get credentials params
func (o *GETCredentialsParams) SetContext(ctx context.Context) {
	o.Context = ctx
}

// WithHTTPClient adds the HTTPClient to the get credentials params
func (o *GETCredentialsParams) WithHTTPClient(client *http.Client) *GETCredentialsParams {
	o.SetHTTPClient(client)
	return o
}

// SetHTTPClient adds the HTTPClient to the get credentials params
func (o *GETCredentialsParams) SetHTTPClient(client *http.Client) {
	o.HTTPClient = client
}

// WithAccountType adds the accountType to the get credentials params
func (o *GETCredentialsParams) WithAccountType(accountType *string) *GETCredentialsParams {
	o.SetAccountType(accountType)
	return o
}

// SetAccountType adds the accountType to the get credentials params
func (o *GETCredentialsParams) SetAccountType(accountType *string) {
	o.AccountType = accountType
}

// WithDomainName adds the domainName to the get credentials params
func (o *GETCredentialsParams) WithDomainName(domainName *string) *GETCredentialsParams {
	o.SetDomainName(domainName)
	return o
}

// SetDomainName adds the domainName to the get credentials params
func (o *GETCredentialsParams) SetDomainName(domainName *string) {
	o.DomainName = domainName
}

// WithPageNumber adds the pageNumber to the get credentials params
func (o *GETCredentialsParams) WithPageNumber(pageNumber *string) *GETCredentialsParams {
	o.SetPageNumber(pageNumber)
	return o
}

// SetPageNumber adds the pageNumber to the get credentials params
func (o *GETCredentialsParams) SetPageNumber(pageNumber *string) {
	o.PageNumber = pageNumber
}

// WithPageSize adds the pageSize to the get credentials params
func (o *GETCredentialsParams) WithPageSize(pageSize *string) *GETCredentialsParams {
	o.SetPageSize(pageSize)
	return o
}

// SetPageSize adds the pageSize to the get credentials params
func (o *GETCredentialsParams) SetPageSize(pageSize *string) {
	o.PageSize = pageSize
}

// WithResourceIP adds the resourceIP to the get credentials params
func (o *GETCredentialsParams) WithResourceIP(resourceIP *string) *GETCredentialsParams {
	o.SetResourceIP(resourceIP)
	return o
}

// SetResourceIP adds the resourceIp to the get credentials params
func (o *GETCredentialsParams) SetResourceIP(resourceIP *string) {
	o.ResourceIP = resourceIP
}

// WithResourceName adds the resourceName to the get credentials params
func (o *GETCredentialsParams) WithResourceName(resourceName *string) *GETCredentialsParams {
	o.SetResourceName(resourceName)
	return o
}

// SetResourceName adds the resourceName to the get credentials params
func (o *GETCredentialsParams) SetResourceName(resourceName *string) {
	o.ResourceName = resourceName
}

// WithResourceType adds the resourceType to the get credentials params
func (o *GETCredentialsParams) WithResourceType(resourceType *string) *GETCredentialsParams {
	o.SetResourceType(resourceType)
	return o
}

// SetResourceType adds the resourceType to the get credentials params
func (o *GETCredentialsParams) SetResourceType(resourceType *string) {
	o.ResourceType = resourceType
}

// WriteToRequest writes these params to a swagger request
func (o *GETCredentialsParams) WriteToRequest(r runtime.ClientRequest, reg strfmt.Registry) error {

	if err := r.SetTimeout(o.timeout); err != nil {
		return err
	}
	var res []error

	if o.AccountType != nil {

		// query param accountType
		var qrAccountType string

		if o.AccountType != nil {
			qrAccountType = *o.AccountType
		}
		qAccountType := qrAccountType
		if qAccountType != "" {

			if err := r.SetQueryParam("accountType", qAccountType); err != nil {
				return err
			}
		}
	}

	if o.DomainName != nil {

		// query param domainName
		var qrDomainName string

		if o.DomainName != nil {
			qrDomainName = *o.DomainName
		}
		qDomainName := qrDomainName
		if qDomainName != "" {

			if err := r.SetQueryParam("domainName", qDomainName); err != nil {
				return err
			}
		}
	}

	if o.PageNumber != nil {

		// query param pageNumber
		var qrPageNumber string

		if o.PageNumber != nil {
			qrPageNumber = *o.PageNumber
		}
		qPageNumber := qrPageNumber
		if qPageNumber != "" {

			if err := r.SetQueryParam("pageNumber", qPageNumber); err != nil {
				return err
			}
		}
	}

	if o.PageSize != nil {

		// query param pageSize
		var qrPageSize string

		if o.PageSize != nil {
			qrPageSize = *o.PageSize
		}
		qPageSize := qrPageSize
		if qPageSize != "" {

			if err := r.SetQueryParam("pageSize", qPageSize); err != nil {
				return err
			}
		}
	}

	if o.ResourceIP != nil {

		// query param resourceIp
		var qrResourceIP string

		if o.ResourceIP != nil {
			qrResourceIP = *o.ResourceIP
		}
		qResourceIP := qrResourceIP
		if qResourceIP != "" {

			if err := r.SetQueryParam("resourceIp", qResourceIP); err != nil {
				return err
			}
		}
	}

	if o.ResourceName != nil {

		// query param resourceName
		var qrResourceName string

		if o.ResourceName != nil {
			qrResourceName = *o.ResourceName
		}
		qResourceName := qrResourceName
		if qResourceName != "" {

			if err := r.SetQueryParam("resourceName", qResourceName); err != nil {
				return err
			}
		}
	}

	if o.ResourceType != nil {

		// query param resourceType
		var qrResourceType string

		if o.ResourceType != nil {
			qrResourceType = *o.ResourceType
		}
		qResourceType := qrResourceType
		if qResourceType != "" {

			if err := r.SetQueryParam("resourceType", qResourceType); err != nil {
				return err
			}
		}
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}
