// Code generated by go-swagger; DO NOT EDIT.

// Copyright Â© 2023 VMware, Inc. All Rights Reserved.
// Code licenced under: BSD-2

package credentials

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"
	"io"

	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"

	"vcf-sdk-go/models"
)

// GETExpirationsForPasswordsReader is a Reader for the GETExpirationsForPasswords structure.
type GETExpirationsForPasswordsReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *GETExpirationsForPasswordsReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {
	case 200:
		result := NewGETExpirationsForPasswordsOK()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil
	case 400:
		result := NewGETExpirationsForPasswordsBadRequest()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 404:
		result := NewGETExpirationsForPasswordsNotFound()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 500:
		result := NewGETExpirationsForPasswordsInternalServerError()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	default:
		return nil, runtime.NewAPIError("response status code does not match any response statuses defined for this endpoint in the swagger spec", response, response.Code())
	}
}

// NewGETExpirationsForPasswordsOK creates a GETExpirationsForPasswordsOK with default headers values
func NewGETExpirationsForPasswordsOK() *GETExpirationsForPasswordsOK {
	return &GETExpirationsForPasswordsOK{}
}

/*
GETExpirationsForPasswordsOK describes a response with status code 200, with default header values.

OK
*/
type GETExpirationsForPasswordsOK struct {
	Payload *models.CredentialsValidation
}

// IsSuccess returns true when this get expirations for passwords o k response has a 2xx status code
func (o *GETExpirationsForPasswordsOK) IsSuccess() bool {
	return true
}

// IsRedirect returns true when this get expirations for passwords o k response has a 3xx status code
func (o *GETExpirationsForPasswordsOK) IsRedirect() bool {
	return false
}

// IsClientError returns true when this get expirations for passwords o k response has a 4xx status code
func (o *GETExpirationsForPasswordsOK) IsClientError() bool {
	return false
}

// IsServerError returns true when this get expirations for passwords o k response has a 5xx status code
func (o *GETExpirationsForPasswordsOK) IsServerError() bool {
	return false
}

// IsCode returns true when this get expirations for passwords o k response a status code equal to that given
func (o *GETExpirationsForPasswordsOK) IsCode(code int) bool {
	return code == 200
}

func (o *GETExpirationsForPasswordsOK) Error() string {
	return fmt.Sprintf("[GET /v1/credentials/expirations/{id}][%d] getExpirationsForPasswordsOK  %+v", 200, o.Payload)
}

func (o *GETExpirationsForPasswordsOK) String() string {
	return fmt.Sprintf("[GET /v1/credentials/expirations/{id}][%d] getExpirationsForPasswordsOK  %+v", 200, o.Payload)
}

func (o *GETExpirationsForPasswordsOK) GetPayload() *models.CredentialsValidation {
	return o.Payload
}

func (o *GETExpirationsForPasswordsOK) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.CredentialsValidation)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewGETExpirationsForPasswordsBadRequest creates a GETExpirationsForPasswordsBadRequest with default headers values
func NewGETExpirationsForPasswordsBadRequest() *GETExpirationsForPasswordsBadRequest {
	return &GETExpirationsForPasswordsBadRequest{}
}

/*
GETExpirationsForPasswordsBadRequest describes a response with status code 400, with default header values.

Bad Request
*/
type GETExpirationsForPasswordsBadRequest struct {
	Payload *models.Error
}

// IsSuccess returns true when this get expirations for passwords bad request response has a 2xx status code
func (o *GETExpirationsForPasswordsBadRequest) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this get expirations for passwords bad request response has a 3xx status code
func (o *GETExpirationsForPasswordsBadRequest) IsRedirect() bool {
	return false
}

// IsClientError returns true when this get expirations for passwords bad request response has a 4xx status code
func (o *GETExpirationsForPasswordsBadRequest) IsClientError() bool {
	return true
}

// IsServerError returns true when this get expirations for passwords bad request response has a 5xx status code
func (o *GETExpirationsForPasswordsBadRequest) IsServerError() bool {
	return false
}

// IsCode returns true when this get expirations for passwords bad request response a status code equal to that given
func (o *GETExpirationsForPasswordsBadRequest) IsCode(code int) bool {
	return code == 400
}

func (o *GETExpirationsForPasswordsBadRequest) Error() string {
	return fmt.Sprintf("[GET /v1/credentials/expirations/{id}][%d] getExpirationsForPasswordsBadRequest  %+v", 400, o.Payload)
}

func (o *GETExpirationsForPasswordsBadRequest) String() string {
	return fmt.Sprintf("[GET /v1/credentials/expirations/{id}][%d] getExpirationsForPasswordsBadRequest  %+v", 400, o.Payload)
}

func (o *GETExpirationsForPasswordsBadRequest) GetPayload() *models.Error {
	return o.Payload
}

func (o *GETExpirationsForPasswordsBadRequest) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.Error)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewGETExpirationsForPasswordsNotFound creates a GETExpirationsForPasswordsNotFound with default headers values
func NewGETExpirationsForPasswordsNotFound() *GETExpirationsForPasswordsNotFound {
	return &GETExpirationsForPasswordsNotFound{}
}

/*
GETExpirationsForPasswordsNotFound describes a response with status code 404, with default header values.

Not Found
*/
type GETExpirationsForPasswordsNotFound struct {
	Payload *models.Error
}

// IsSuccess returns true when this get expirations for passwords not found response has a 2xx status code
func (o *GETExpirationsForPasswordsNotFound) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this get expirations for passwords not found response has a 3xx status code
func (o *GETExpirationsForPasswordsNotFound) IsRedirect() bool {
	return false
}

// IsClientError returns true when this get expirations for passwords not found response has a 4xx status code
func (o *GETExpirationsForPasswordsNotFound) IsClientError() bool {
	return true
}

// IsServerError returns true when this get expirations for passwords not found response has a 5xx status code
func (o *GETExpirationsForPasswordsNotFound) IsServerError() bool {
	return false
}

// IsCode returns true when this get expirations for passwords not found response a status code equal to that given
func (o *GETExpirationsForPasswordsNotFound) IsCode(code int) bool {
	return code == 404
}

func (o *GETExpirationsForPasswordsNotFound) Error() string {
	return fmt.Sprintf("[GET /v1/credentials/expirations/{id}][%d] getExpirationsForPasswordsNotFound  %+v", 404, o.Payload)
}

func (o *GETExpirationsForPasswordsNotFound) String() string {
	return fmt.Sprintf("[GET /v1/credentials/expirations/{id}][%d] getExpirationsForPasswordsNotFound  %+v", 404, o.Payload)
}

func (o *GETExpirationsForPasswordsNotFound) GetPayload() *models.Error {
	return o.Payload
}

func (o *GETExpirationsForPasswordsNotFound) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.Error)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewGETExpirationsForPasswordsInternalServerError creates a GETExpirationsForPasswordsInternalServerError with default headers values
func NewGETExpirationsForPasswordsInternalServerError() *GETExpirationsForPasswordsInternalServerError {
	return &GETExpirationsForPasswordsInternalServerError{}
}

/*
GETExpirationsForPasswordsInternalServerError describes a response with status code 500, with default header values.

Internal server error
*/
type GETExpirationsForPasswordsInternalServerError struct {
}

// IsSuccess returns true when this get expirations for passwords internal server error response has a 2xx status code
func (o *GETExpirationsForPasswordsInternalServerError) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this get expirations for passwords internal server error response has a 3xx status code
func (o *GETExpirationsForPasswordsInternalServerError) IsRedirect() bool {
	return false
}

// IsClientError returns true when this get expirations for passwords internal server error response has a 4xx status code
func (o *GETExpirationsForPasswordsInternalServerError) IsClientError() bool {
	return false
}

// IsServerError returns true when this get expirations for passwords internal server error response has a 5xx status code
func (o *GETExpirationsForPasswordsInternalServerError) IsServerError() bool {
	return true
}

// IsCode returns true when this get expirations for passwords internal server error response a status code equal to that given
func (o *GETExpirationsForPasswordsInternalServerError) IsCode(code int) bool {
	return code == 500
}

func (o *GETExpirationsForPasswordsInternalServerError) Error() string {
	return fmt.Sprintf("[GET /v1/credentials/expirations/{id}][%d] getExpirationsForPasswordsInternalServerError ", 500)
}

func (o *GETExpirationsForPasswordsInternalServerError) String() string {
	return fmt.Sprintf("[GET /v1/credentials/expirations/{id}][%d] getExpirationsForPasswordsInternalServerError ", 500)
}

func (o *GETExpirationsForPasswordsInternalServerError) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}
