// Code generated by go-swagger; DO NOT EDIT.

// Copyright Â© 2023 VMware, Inc. All Rights Reserved.
// Code licenced under: BSD-2

package domains

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"

	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"
)

// New creates a new domains API client.
func New(transport runtime.ClientTransport, formats strfmt.Registry) ClientService {
	return &Client{transport: transport, formats: formats}
}

/*
Client for domains API
*/
type Client struct {
	transport runtime.ClientTransport
	formats   strfmt.Registry
}

// ClientOption is the option for Client methods
type ClientOption func(*runtime.ClientOperation)

// ClientService is the interface for Client methods
type ClientService interface {
	AssignTagsToExistingDomain(params *AssignTagsToExistingDomainParams, opts ...ClientOption) (*AssignTagsToExistingDomainOK, error)

	AssignableTagsToDomain(params *AssignableTagsToDomainParams, opts ...ClientOption) (*AssignableTagsToDomainOK, error)

	CreateDomain(params *CreateDomainParams, opts ...ClientOption) (*CreateDomainOK, *CreateDomainAccepted, error)

	DeleteDomain(params *DeleteDomainParams, opts ...ClientOption) (*DeleteDomainOK, *DeleteDomainAccepted, error)

	GETClusterCriteria(params *GETClusterCriteriaParams, opts ...ClientOption) (*GETClusterCriteriaOK, error)

	GETClusterCriterion(params *GETClusterCriterionParams, opts ...ClientOption) (*GETClusterCriterionOK, error)

	GETClusterQueryResponse(params *GETClusterQueryResponseParams, opts ...ClientOption) (*GETClusterQueryResponseOK, error)

	GETClustersQueryResponse(params *GETClustersQueryResponseParams, opts ...ClientOption) (*GETClustersQueryResponseOK, error)

	GETDatastoreCriterion1(params *GETDatastoreCriterion1Params, opts ...ClientOption) (*GETDatastoreCriterion1OK, error)

	GETDatastoreQueryResponse1(params *GETDatastoreQueryResponse1Params, opts ...ClientOption) (*GETDatastoreQueryResponse1OK, error)

	GETDatastoresCriteria1(params *GETDatastoresCriteria1Params, opts ...ClientOption) (*GETDatastoresCriteria1OK, error)

	GETDomain(params *GETDomainParams, opts ...ClientOption) (*GETDomainOK, error)

	GETDomainEndpoints(params *GETDomainEndpointsParams, opts ...ClientOption) (*GETDomainEndpointsOK, error)

	GETDomainTagManagerURL(params *GETDomainTagManagerURLParams, opts ...ClientOption) (*GETDomainTagManagerURLOK, error)

	GETDomains(params *GETDomainsParams, opts ...ClientOption) (*GETDomainsOK, error)

	GETTagsAssignedToDomain(params *GETTagsAssignedToDomainParams, opts ...ClientOption) (*GETTagsAssignedToDomainOK, error)

	GETTagsAssignedToDomains(params *GETTagsAssignedToDomainsParams, opts ...ClientOption) (*GETTagsAssignedToDomainsOK, error)

	POSTClusterQuery(params *POSTClusterQueryParams, opts ...ClientOption) (*POSTClusterQueryOK, error)

	POSTClustersQuery(params *POSTClustersQueryParams, opts ...ClientOption) (*POSTClustersQueryOK, error)

	POSTDatastoreQuery1(params *POSTDatastoreQuery1Params, opts ...ClientOption) (*POSTDatastoreQuery1OK, error)

	RemoveTagsFromDomain(params *RemoveTagsFromDomainParams, opts ...ClientOption) (*RemoveTagsFromDomainOK, error)

	UpdateDomain(params *UpdateDomainParams, opts ...ClientOption) (*UpdateDomainOK, *UpdateDomainAccepted, error)

	ValidateDomainsOperations(params *ValidateDomainsOperationsParams, opts ...ClientOption) (*ValidateDomainsOperationsOK, error)

	SetTransport(transport runtime.ClientTransport)
}

/*
AssignTagsToExistingDomain assigns tags to domain
*/
func (a *Client) AssignTagsToExistingDomain(params *AssignTagsToExistingDomainParams, opts ...ClientOption) (*AssignTagsToExistingDomainOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewAssignTagsToExistingDomainParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "assignTagsToExistingDomain",
		Method:             "PUT",
		PathPattern:        "/v1/domains/{id}/tags",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &AssignTagsToExistingDomainReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*AssignTagsToExistingDomainOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for assignTagsToExistingDomain: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
AssignableTagsToDomain gets assignable tags to domain
*/
func (a *Client) AssignableTagsToDomain(params *AssignableTagsToDomainParams, opts ...ClientOption) (*AssignableTagsToDomainOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewAssignableTagsToDomainParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "assignableTagsToDomain",
		Method:             "GET",
		PathPattern:        "/v1/domains/{id}/tags/assignable-tags",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &AssignableTagsToDomainReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*AssignableTagsToDomainOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for assignableTagsToDomain: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
CreateDomain creates a domain
*/
func (a *Client) CreateDomain(params *CreateDomainParams, opts ...ClientOption) (*CreateDomainOK, *CreateDomainAccepted, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewCreateDomainParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "createDomain",
		Method:             "POST",
		PathPattern:        "/v1/domains",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &CreateDomainReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, nil, err
	}
	switch value := result.(type) {
	case *CreateDomainOK:
		return value, nil, nil
	case *CreateDomainAccepted:
		return nil, value, nil
	}
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for domains: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
DeleteDomain deletes a domain if it has been previously initialized for deletion
*/
func (a *Client) DeleteDomain(params *DeleteDomainParams, opts ...ClientOption) (*DeleteDomainOK, *DeleteDomainAccepted, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewDeleteDomainParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "deleteDomain",
		Method:             "DELETE",
		PathPattern:        "/v1/domains/{id}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &DeleteDomainReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, nil, err
	}
	switch value := result.(type) {
	case *DeleteDomainOK:
		return value, nil, nil
	case *DeleteDomainAccepted:
		return nil, value, nil
	}
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for domains: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
GETClusterCriteria Gets all cluster criteria
*/
func (a *Client) GETClusterCriteria(params *GETClusterCriteriaParams, opts ...ClientOption) (*GETClusterCriteriaOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGETClusterCriteriaParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "getClusterCriteria",
		Method:             "GET",
		PathPattern:        "/v1/domains/{domainId}/clusters/criteria",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GETClusterCriteriaReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GETClusterCriteriaOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for getClusterCriteria: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
GETClusterCriterion Gets a criterion to query for cluster
*/
func (a *Client) GETClusterCriterion(params *GETClusterCriterionParams, opts ...ClientOption) (*GETClusterCriterionOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGETClusterCriterionParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "getClusterCriterion",
		Method:             "GET",
		PathPattern:        "/v1/domains/{domainId}/clusters/criteria/{name}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GETClusterCriterionReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GETClusterCriterionOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for getClusterCriterion: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
GETClusterQueryResponse Gets cluster query response
*/
func (a *Client) GETClusterQueryResponse(params *GETClusterQueryResponseParams, opts ...ClientOption) (*GETClusterQueryResponseOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGETClusterQueryResponseParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "getClusterQueryResponse",
		Method:             "GET",
		PathPattern:        "/v1/domains/{domainId}/clusters/{clusterName}/queries/{queryId}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GETClusterQueryResponseReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GETClusterQueryResponseOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for getClusterQueryResponse: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
GETClustersQueryResponse Gets clusters query response
*/
func (a *Client) GETClustersQueryResponse(params *GETClustersQueryResponseParams, opts ...ClientOption) (*GETClustersQueryResponseOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGETClustersQueryResponseParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "getClustersQueryResponse",
		Method:             "GET",
		PathPattern:        "/v1/domains/{domainId}/clusters/queries/{queryId}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GETClustersQueryResponseReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GETClustersQueryResponseOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for getClustersQueryResponse: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
GETDatastoreCriterion1 Gets a criterion to query for datastore
*/
func (a *Client) GETDatastoreCriterion1(params *GETDatastoreCriterion1Params, opts ...ClientOption) (*GETDatastoreCriterion1OK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGETDatastoreCriterion1Params()
	}
	op := &runtime.ClientOperation{
		ID:                 "getDatastoreCriterion_1",
		Method:             "GET",
		PathPattern:        "/v1/domains/{domainId}/datastores/criteria/{name}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GETDatastoreCriterion1Reader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GETDatastoreCriterion1OK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for getDatastoreCriterion_1: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
GETDatastoreQueryResponse1 Gets datastore query response
*/
func (a *Client) GETDatastoreQueryResponse1(params *GETDatastoreQueryResponse1Params, opts ...ClientOption) (*GETDatastoreQueryResponse1OK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGETDatastoreQueryResponse1Params()
	}
	op := &runtime.ClientOperation{
		ID:                 "getDatastoreQueryResponse_1",
		Method:             "GET",
		PathPattern:        "/v1/domains/{domainId}/datastores/queries/{queryId}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GETDatastoreQueryResponse1Reader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GETDatastoreQueryResponse1OK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for getDatastoreQueryResponse_1: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
GETDatastoresCriteria1 Gets all datastore criteria
*/
func (a *Client) GETDatastoresCriteria1(params *GETDatastoresCriteria1Params, opts ...ClientOption) (*GETDatastoresCriteria1OK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGETDatastoresCriteria1Params()
	}
	op := &runtime.ClientOperation{
		ID:                 "getDatastoresCriteria_1",
		Method:             "GET",
		PathPattern:        "/v1/domains/{domainId}/datastores/criteria",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GETDatastoresCriteria1Reader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GETDatastoresCriteria1OK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for getDatastoresCriteria_1: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
GETDomain Gets a domain
*/
func (a *Client) GETDomain(params *GETDomainParams, opts ...ClientOption) (*GETDomainOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGETDomainParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "getDomain",
		Method:             "GET",
		PathPattern:        "/v1/domains/{id}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GETDomainReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GETDomainOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for getDomain: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
GETDomainEndpoints Gets endpoints of a domain
*/
func (a *Client) GETDomainEndpoints(params *GETDomainEndpointsParams, opts ...ClientOption) (*GETDomainEndpointsOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGETDomainEndpointsParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "getDomainEndpoints",
		Method:             "GET",
		PathPattern:        "/v1/domains/{id}/endpoints",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GETDomainEndpointsReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GETDomainEndpointsOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for getDomainEndpoints: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
GETDomainTagManagerURL Gets domain tag manager Url
*/
func (a *Client) GETDomainTagManagerURL(params *GETDomainTagManagerURLParams, opts ...ClientOption) (*GETDomainTagManagerURLOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGETDomainTagManagerURLParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "getDomainTagManagerUrl",
		Method:             "GET",
		PathPattern:        "/v1/domains/{id}/tags/tag-manager",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GETDomainTagManagerURLReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GETDomainTagManagerURLOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for getDomainTagManagerUrl: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
GETDomains Gets the domains
*/
func (a *Client) GETDomains(params *GETDomainsParams, opts ...ClientOption) (*GETDomainsOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGETDomainsParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "getDomains",
		Method:             "GET",
		PathPattern:        "/v1/domains",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GETDomainsReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GETDomainsOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for getDomains: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
GETTagsAssignedToDomain Gets tags assigned to domain
*/
func (a *Client) GETTagsAssignedToDomain(params *GETTagsAssignedToDomainParams, opts ...ClientOption) (*GETTagsAssignedToDomainOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGETTagsAssignedToDomainParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "getTagsAssignedToDomain",
		Method:             "GET",
		PathPattern:        "/v1/domains/{id}/tags",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GETTagsAssignedToDomainReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GETTagsAssignedToDomainOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for getTagsAssignedToDomain: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
GETTagsAssignedToDomains Gets tags assigned to domains
*/
func (a *Client) GETTagsAssignedToDomains(params *GETTagsAssignedToDomainsParams, opts ...ClientOption) (*GETTagsAssignedToDomainsOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGETTagsAssignedToDomainsParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "getTagsAssignedToDomains",
		Method:             "GET",
		PathPattern:        "/v1/domains/tags",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GETTagsAssignedToDomainsReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GETTagsAssignedToDomainsOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for getTagsAssignedToDomains: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
POSTClusterQuery Posts a cluster query
*/
func (a *Client) POSTClusterQuery(params *POSTClusterQueryParams, opts ...ClientOption) (*POSTClusterQueryOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewPOSTClusterQueryParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "postClusterQuery",
		Method:             "POST",
		PathPattern:        "/v1/domains/{domainId}/clusters/{clusterName}/queries",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &POSTClusterQueryReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*POSTClusterQueryOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for postClusterQuery: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
POSTClustersQuery Posts clusters query
*/
func (a *Client) POSTClustersQuery(params *POSTClustersQueryParams, opts ...ClientOption) (*POSTClustersQueryOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewPOSTClustersQueryParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "postClustersQuery",
		Method:             "POST",
		PathPattern:        "/v1/domains/{domainId}/clusters/queries",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &POSTClustersQueryReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*POSTClustersQueryOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for postClustersQuery: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
POSTDatastoreQuery1 Posts a datastore query
*/
func (a *Client) POSTDatastoreQuery1(params *POSTDatastoreQuery1Params, opts ...ClientOption) (*POSTDatastoreQuery1OK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewPOSTDatastoreQuery1Params()
	}
	op := &runtime.ClientOperation{
		ID:                 "postDatastoreQuery_1",
		Method:             "POST",
		PathPattern:        "/v1/domains/{domainId}/datastores/queries",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &POSTDatastoreQuery1Reader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*POSTDatastoreQuery1OK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for postDatastoreQuery_1: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
RemoveTagsFromDomain removes tags from domain
*/
func (a *Client) RemoveTagsFromDomain(params *RemoveTagsFromDomainParams, opts ...ClientOption) (*RemoveTagsFromDomainOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewRemoveTagsFromDomainParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "removeTagsFromDomain",
		Method:             "DELETE",
		PathPattern:        "/v1/domains/{id}/tags",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &RemoveTagsFromDomainReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*RemoveTagsFromDomainOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for removeTagsFromDomain: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
UpdateDomain updates a domain
*/
func (a *Client) UpdateDomain(params *UpdateDomainParams, opts ...ClientOption) (*UpdateDomainOK, *UpdateDomainAccepted, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewUpdateDomainParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "updateDomain",
		Method:             "PATCH",
		PathPattern:        "/v1/domains/{id}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &UpdateDomainReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, nil, err
	}
	switch value := result.(type) {
	case *UpdateDomainOK:
		return value, nil, nil
	case *UpdateDomainAccepted:
		return nil, value, nil
	}
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for domains: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
ValidateDomainsOperations validates the input spec for domains operations
*/
func (a *Client) ValidateDomainsOperations(params *ValidateDomainsOperationsParams, opts ...ClientOption) (*ValidateDomainsOperationsOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewValidateDomainsOperationsParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "validateDomainsOperations",
		Method:             "POST",
		PathPattern:        "/v1/domains/validations",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &ValidateDomainsOperationsReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*ValidateDomainsOperationsOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for validateDomainsOperations: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

// SetTransport changes the transport on the client
func (a *Client) SetTransport(transport runtime.ClientTransport) {
	a.transport = transport
}
