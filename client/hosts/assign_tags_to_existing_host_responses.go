// Code generated by go-swagger; DO NOT EDIT.

package hosts

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"
	"io"

	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"

	"vcf-sdk-go/models"
)

// AssignTagsToExistingHostReader is a Reader for the AssignTagsToExistingHost structure.
type AssignTagsToExistingHostReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *AssignTagsToExistingHostReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {
	case 200:
		result := NewAssignTagsToExistingHostOK()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil
	case 400:
		result := NewAssignTagsToExistingHostBadRequest()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 500:
		result := NewAssignTagsToExistingHostInternalServerError()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	default:
		return nil, runtime.NewAPIError("response status code does not match any response statuses defined for this endpoint in the swagger spec", response, response.Code())
	}
}

// NewAssignTagsToExistingHostOK creates a AssignTagsToExistingHostOK with default headers values
func NewAssignTagsToExistingHostOK() *AssignTagsToExistingHostOK {
	return &AssignTagsToExistingHostOK{}
}

/*
AssignTagsToExistingHostOK describes a response with status code 200, with default header values.

Ok
*/
type AssignTagsToExistingHostOK struct {
	Payload *models.TagAssignmentResult
}

// IsSuccess returns true when this assign tags to existing host o k response has a 2xx status code
func (o *AssignTagsToExistingHostOK) IsSuccess() bool {
	return true
}

// IsRedirect returns true when this assign tags to existing host o k response has a 3xx status code
func (o *AssignTagsToExistingHostOK) IsRedirect() bool {
	return false
}

// IsClientError returns true when this assign tags to existing host o k response has a 4xx status code
func (o *AssignTagsToExistingHostOK) IsClientError() bool {
	return false
}

// IsServerError returns true when this assign tags to existing host o k response has a 5xx status code
func (o *AssignTagsToExistingHostOK) IsServerError() bool {
	return false
}

// IsCode returns true when this assign tags to existing host o k response a status code equal to that given
func (o *AssignTagsToExistingHostOK) IsCode(code int) bool {
	return code == 200
}

func (o *AssignTagsToExistingHostOK) Error() string {
	return fmt.Sprintf("[PUT /v1/hosts/{id}/tags][%d] assignTagsToExistingHostOK  %+v", 200, o.Payload)
}

func (o *AssignTagsToExistingHostOK) String() string {
	return fmt.Sprintf("[PUT /v1/hosts/{id}/tags][%d] assignTagsToExistingHostOK  %+v", 200, o.Payload)
}

func (o *AssignTagsToExistingHostOK) GetPayload() *models.TagAssignmentResult {
	return o.Payload
}

func (o *AssignTagsToExistingHostOK) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.TagAssignmentResult)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewAssignTagsToExistingHostBadRequest creates a AssignTagsToExistingHostBadRequest with default headers values
func NewAssignTagsToExistingHostBadRequest() *AssignTagsToExistingHostBadRequest {
	return &AssignTagsToExistingHostBadRequest{}
}

/*
AssignTagsToExistingHostBadRequest describes a response with status code 400, with default header values.

Bad Request
*/
type AssignTagsToExistingHostBadRequest struct {
	Payload *models.Error
}

// IsSuccess returns true when this assign tags to existing host bad request response has a 2xx status code
func (o *AssignTagsToExistingHostBadRequest) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this assign tags to existing host bad request response has a 3xx status code
func (o *AssignTagsToExistingHostBadRequest) IsRedirect() bool {
	return false
}

// IsClientError returns true when this assign tags to existing host bad request response has a 4xx status code
func (o *AssignTagsToExistingHostBadRequest) IsClientError() bool {
	return true
}

// IsServerError returns true when this assign tags to existing host bad request response has a 5xx status code
func (o *AssignTagsToExistingHostBadRequest) IsServerError() bool {
	return false
}

// IsCode returns true when this assign tags to existing host bad request response a status code equal to that given
func (o *AssignTagsToExistingHostBadRequest) IsCode(code int) bool {
	return code == 400
}

func (o *AssignTagsToExistingHostBadRequest) Error() string {
	return fmt.Sprintf("[PUT /v1/hosts/{id}/tags][%d] assignTagsToExistingHostBadRequest  %+v", 400, o.Payload)
}

func (o *AssignTagsToExistingHostBadRequest) String() string {
	return fmt.Sprintf("[PUT /v1/hosts/{id}/tags][%d] assignTagsToExistingHostBadRequest  %+v", 400, o.Payload)
}

func (o *AssignTagsToExistingHostBadRequest) GetPayload() *models.Error {
	return o.Payload
}

func (o *AssignTagsToExistingHostBadRequest) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.Error)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewAssignTagsToExistingHostInternalServerError creates a AssignTagsToExistingHostInternalServerError with default headers values
func NewAssignTagsToExistingHostInternalServerError() *AssignTagsToExistingHostInternalServerError {
	return &AssignTagsToExistingHostInternalServerError{}
}

/*
AssignTagsToExistingHostInternalServerError describes a response with status code 500, with default header values.

InternalServerError
*/
type AssignTagsToExistingHostInternalServerError struct {
	Payload *models.Error
}

// IsSuccess returns true when this assign tags to existing host internal server error response has a 2xx status code
func (o *AssignTagsToExistingHostInternalServerError) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this assign tags to existing host internal server error response has a 3xx status code
func (o *AssignTagsToExistingHostInternalServerError) IsRedirect() bool {
	return false
}

// IsClientError returns true when this assign tags to existing host internal server error response has a 4xx status code
func (o *AssignTagsToExistingHostInternalServerError) IsClientError() bool {
	return false
}

// IsServerError returns true when this assign tags to existing host internal server error response has a 5xx status code
func (o *AssignTagsToExistingHostInternalServerError) IsServerError() bool {
	return true
}

// IsCode returns true when this assign tags to existing host internal server error response a status code equal to that given
func (o *AssignTagsToExistingHostInternalServerError) IsCode(code int) bool {
	return code == 500
}

func (o *AssignTagsToExistingHostInternalServerError) Error() string {
	return fmt.Sprintf("[PUT /v1/hosts/{id}/tags][%d] assignTagsToExistingHostInternalServerError  %+v", 500, o.Payload)
}

func (o *AssignTagsToExistingHostInternalServerError) String() string {
	return fmt.Sprintf("[PUT /v1/hosts/{id}/tags][%d] assignTagsToExistingHostInternalServerError  %+v", 500, o.Payload)
}

func (o *AssignTagsToExistingHostInternalServerError) GetPayload() *models.Error {
	return o.Payload
}

func (o *AssignTagsToExistingHostInternalServerError) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.Error)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}
