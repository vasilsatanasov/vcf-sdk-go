// Code generated by go-swagger; DO NOT EDIT.

// Copyright Â© 2023 VMware, Inc. All Rights Reserved.
// Code licenced under: BSD-2

package hosts

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"
	"io"

	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"

	"vcf-sdk-go/models"
)

// GETHostReader is a Reader for the GETHost structure.
type GETHostReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *GETHostReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {
	case 200:
		result := NewGETHostOK()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil
	case 400:
		result := NewGETHostBadRequest()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 404:
		result := NewGETHostNotFound()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 500:
		result := NewGETHostInternalServerError()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	default:
		return nil, runtime.NewAPIError("response status code does not match any response statuses defined for this endpoint in the swagger spec", response, response.Code())
	}
}

// NewGETHostOK creates a GETHostOK with default headers values
func NewGETHostOK() *GETHostOK {
	return &GETHostOK{}
}

/*
GETHostOK describes a response with status code 200, with default header values.

Ok
*/
type GETHostOK struct {
	Payload *models.Host
}

// IsSuccess returns true when this get host o k response has a 2xx status code
func (o *GETHostOK) IsSuccess() bool {
	return true
}

// IsRedirect returns true when this get host o k response has a 3xx status code
func (o *GETHostOK) IsRedirect() bool {
	return false
}

// IsClientError returns true when this get host o k response has a 4xx status code
func (o *GETHostOK) IsClientError() bool {
	return false
}

// IsServerError returns true when this get host o k response has a 5xx status code
func (o *GETHostOK) IsServerError() bool {
	return false
}

// IsCode returns true when this get host o k response a status code equal to that given
func (o *GETHostOK) IsCode(code int) bool {
	return code == 200
}

func (o *GETHostOK) Error() string {
	return fmt.Sprintf("[GET /v1/hosts/{id}][%d] getHostOK  %+v", 200, o.Payload)
}

func (o *GETHostOK) String() string {
	return fmt.Sprintf("[GET /v1/hosts/{id}][%d] getHostOK  %+v", 200, o.Payload)
}

func (o *GETHostOK) GetPayload() *models.Host {
	return o.Payload
}

func (o *GETHostOK) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.Host)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewGETHostBadRequest creates a GETHostBadRequest with default headers values
func NewGETHostBadRequest() *GETHostBadRequest {
	return &GETHostBadRequest{}
}

/*
GETHostBadRequest describes a response with status code 400, with default header values.

Bad Request
*/
type GETHostBadRequest struct {
	Payload *models.Error
}

// IsSuccess returns true when this get host bad request response has a 2xx status code
func (o *GETHostBadRequest) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this get host bad request response has a 3xx status code
func (o *GETHostBadRequest) IsRedirect() bool {
	return false
}

// IsClientError returns true when this get host bad request response has a 4xx status code
func (o *GETHostBadRequest) IsClientError() bool {
	return true
}

// IsServerError returns true when this get host bad request response has a 5xx status code
func (o *GETHostBadRequest) IsServerError() bool {
	return false
}

// IsCode returns true when this get host bad request response a status code equal to that given
func (o *GETHostBadRequest) IsCode(code int) bool {
	return code == 400
}

func (o *GETHostBadRequest) Error() string {
	return fmt.Sprintf("[GET /v1/hosts/{id}][%d] getHostBadRequest  %+v", 400, o.Payload)
}

func (o *GETHostBadRequest) String() string {
	return fmt.Sprintf("[GET /v1/hosts/{id}][%d] getHostBadRequest  %+v", 400, o.Payload)
}

func (o *GETHostBadRequest) GetPayload() *models.Error {
	return o.Payload
}

func (o *GETHostBadRequest) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.Error)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewGETHostNotFound creates a GETHostNotFound with default headers values
func NewGETHostNotFound() *GETHostNotFound {
	return &GETHostNotFound{}
}

/*
GETHostNotFound describes a response with status code 404, with default header values.

Host Not Found
*/
type GETHostNotFound struct {
	Payload *models.Error
}

// IsSuccess returns true when this get host not found response has a 2xx status code
func (o *GETHostNotFound) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this get host not found response has a 3xx status code
func (o *GETHostNotFound) IsRedirect() bool {
	return false
}

// IsClientError returns true when this get host not found response has a 4xx status code
func (o *GETHostNotFound) IsClientError() bool {
	return true
}

// IsServerError returns true when this get host not found response has a 5xx status code
func (o *GETHostNotFound) IsServerError() bool {
	return false
}

// IsCode returns true when this get host not found response a status code equal to that given
func (o *GETHostNotFound) IsCode(code int) bool {
	return code == 404
}

func (o *GETHostNotFound) Error() string {
	return fmt.Sprintf("[GET /v1/hosts/{id}][%d] getHostNotFound  %+v", 404, o.Payload)
}

func (o *GETHostNotFound) String() string {
	return fmt.Sprintf("[GET /v1/hosts/{id}][%d] getHostNotFound  %+v", 404, o.Payload)
}

func (o *GETHostNotFound) GetPayload() *models.Error {
	return o.Payload
}

func (o *GETHostNotFound) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.Error)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewGETHostInternalServerError creates a GETHostInternalServerError with default headers values
func NewGETHostInternalServerError() *GETHostInternalServerError {
	return &GETHostInternalServerError{}
}

/*
GETHostInternalServerError describes a response with status code 500, with default header values.

Internal Server Error
*/
type GETHostInternalServerError struct {
	Payload *models.Error
}

// IsSuccess returns true when this get host internal server error response has a 2xx status code
func (o *GETHostInternalServerError) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this get host internal server error response has a 3xx status code
func (o *GETHostInternalServerError) IsRedirect() bool {
	return false
}

// IsClientError returns true when this get host internal server error response has a 4xx status code
func (o *GETHostInternalServerError) IsClientError() bool {
	return false
}

// IsServerError returns true when this get host internal server error response has a 5xx status code
func (o *GETHostInternalServerError) IsServerError() bool {
	return true
}

// IsCode returns true when this get host internal server error response a status code equal to that given
func (o *GETHostInternalServerError) IsCode(code int) bool {
	return code == 500
}

func (o *GETHostInternalServerError) Error() string {
	return fmt.Sprintf("[GET /v1/hosts/{id}][%d] getHostInternalServerError  %+v", 500, o.Payload)
}

func (o *GETHostInternalServerError) String() string {
	return fmt.Sprintf("[GET /v1/hosts/{id}][%d] getHostInternalServerError  %+v", 500, o.Payload)
}

func (o *GETHostInternalServerError) GetPayload() *models.Error {
	return o.Payload
}

func (o *GETHostInternalServerError) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.Error)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}
