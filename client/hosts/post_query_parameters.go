// Code generated by go-swagger; DO NOT EDIT.

// Copyright Â© 2023 VMware, Inc. All Rights Reserved.
// Code licenced under: BSD-2

package hosts

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"net/http"
	"time"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/runtime"
	cr "github.com/go-openapi/runtime/client"
	"github.com/go-openapi/strfmt"

	"github.com/vmware/vcf-sdk-go/models"
)

// NewPOSTQueryParams creates a new POSTQueryParams object,
// with the default timeout for this client.
//
// Default values are not hydrated, since defaults are normally applied by the API server side.
//
// To enforce default values in parameter, use SetDefaults or WithDefaults.
func NewPOSTQueryParams() *POSTQueryParams {
	return &POSTQueryParams{
		timeout: cr.DefaultTimeout,
	}
}

// NewPOSTQueryParamsWithTimeout creates a new POSTQueryParams object
// with the ability to set a timeout on a request.
func NewPOSTQueryParamsWithTimeout(timeout time.Duration) *POSTQueryParams {
	return &POSTQueryParams{
		timeout: timeout,
	}
}

// NewPOSTQueryParamsWithContext creates a new POSTQueryParams object
// with the ability to set a context for a request.
func NewPOSTQueryParamsWithContext(ctx context.Context) *POSTQueryParams {
	return &POSTQueryParams{
		Context: ctx,
	}
}

// NewPOSTQueryParamsWithHTTPClient creates a new POSTQueryParams object
// with the ability to set a custom HTTPClient for a request.
func NewPOSTQueryParamsWithHTTPClient(client *http.Client) *POSTQueryParams {
	return &POSTQueryParams{
		HTTPClient: client,
	}
}

/*
POSTQueryParams contains all the parameters to send to the API endpoint

	for the post query operation.

	Typically these are written to a http.Request.
*/
type POSTQueryParams struct {

	/* HostCriterion.

	   hostCriterion
	*/
	HostCriterion *models.HostCriterion

	timeout    time.Duration
	Context    context.Context
	HTTPClient *http.Client
}

// WithDefaults hydrates default values in the post query params (not the query body).
//
// All values with no default are reset to their zero value.
func (o *POSTQueryParams) WithDefaults() *POSTQueryParams {
	o.SetDefaults()
	return o
}

// SetDefaults hydrates default values in the post query params (not the query body).
//
// All values with no default are reset to their zero value.
func (o *POSTQueryParams) SetDefaults() {
	// no default values defined for this parameter
}

// WithTimeout adds the timeout to the post query params
func (o *POSTQueryParams) WithTimeout(timeout time.Duration) *POSTQueryParams {
	o.SetTimeout(timeout)
	return o
}

// SetTimeout adds the timeout to the post query params
func (o *POSTQueryParams) SetTimeout(timeout time.Duration) {
	o.timeout = timeout
}

// WithContext adds the context to the post query params
func (o *POSTQueryParams) WithContext(ctx context.Context) *POSTQueryParams {
	o.SetContext(ctx)
	return o
}

// SetContext adds the context to the post query params
func (o *POSTQueryParams) SetContext(ctx context.Context) {
	o.Context = ctx
}

// WithHTTPClient adds the HTTPClient to the post query params
func (o *POSTQueryParams) WithHTTPClient(client *http.Client) *POSTQueryParams {
	o.SetHTTPClient(client)
	return o
}

// SetHTTPClient adds the HTTPClient to the post query params
func (o *POSTQueryParams) SetHTTPClient(client *http.Client) {
	o.HTTPClient = client
}

// WithHostCriterion adds the hostCriterion to the post query params
func (o *POSTQueryParams) WithHostCriterion(hostCriterion *models.HostCriterion) *POSTQueryParams {
	o.SetHostCriterion(hostCriterion)
	return o
}

// SetHostCriterion adds the hostCriterion to the post query params
func (o *POSTQueryParams) SetHostCriterion(hostCriterion *models.HostCriterion) {
	o.HostCriterion = hostCriterion
}

// WriteToRequest writes these params to a swagger request
func (o *POSTQueryParams) WriteToRequest(r runtime.ClientRequest, reg strfmt.Registry) error {

	if err := r.SetTimeout(o.timeout); err != nil {
		return err
	}
	var res []error
	if o.HostCriterion != nil {
		if err := r.SetBodyParam(o.HostCriterion); err != nil {
			return err
		}
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}
