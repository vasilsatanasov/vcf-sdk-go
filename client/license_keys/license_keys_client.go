// Code generated by go-swagger; DO NOT EDIT.

// Copyright 2023 VMware, Inc.
// SPDX-License-Identifier: BSD-2-Clause

package license_keys

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"

	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"
)

// New creates a new license keys API client.
func New(transport runtime.ClientTransport, formats strfmt.Registry) ClientService {
	return &Client{transport: transport, formats: formats}
}

/*
Client for license keys API
*/
type Client struct {
	transport runtime.ClientTransport
	formats   strfmt.Registry
}

// ClientOption is the option for Client methods
type ClientOption func(*runtime.ClientOperation)

// ClientService is the interface for Client methods
type ClientService interface {
	AddLicenseKey(params *AddLicenseKeyParams, opts ...ClientOption) (*AddLicenseKeyOK, *AddLicenseKeyCreated, error)

	DeleteLicenseKey(params *DeleteLicenseKeyParams, opts ...ClientOption) (*DeleteLicenseKeyOK, *DeleteLicenseKeyNoContent, error)

	GETLicenseKey(params *GETLicenseKeyParams, opts ...ClientOption) (*GETLicenseKeyOK, error)

	GETLicenseKeys(params *GETLicenseKeysParams, opts ...ClientOption) (*GETLicenseKeysOK, error)

	GETLicensingInfo(params *GETLicensingInfoParams, opts ...ClientOption) (*GETLicensingInfoOK, error)

	SetTransport(transport runtime.ClientTransport)
}

/*
AddLicenseKey adds a license key
*/
func (a *Client) AddLicenseKey(params *AddLicenseKeyParams, opts ...ClientOption) (*AddLicenseKeyOK, *AddLicenseKeyCreated, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewAddLicenseKeyParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "addLicenseKey",
		Method:             "POST",
		PathPattern:        "/v1/license-keys",
		ProducesMediaTypes: []string{"*/*"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &AddLicenseKeyReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, nil, err
	}
	switch value := result.(type) {
	case *AddLicenseKeyOK:
		return value, nil, nil
	case *AddLicenseKeyCreated:
		return nil, value, nil
	}
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for license_keys: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
DeleteLicenseKey deletes a license key
*/
func (a *Client) DeleteLicenseKey(params *DeleteLicenseKeyParams, opts ...ClientOption) (*DeleteLicenseKeyOK, *DeleteLicenseKeyNoContent, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewDeleteLicenseKeyParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "deleteLicenseKey",
		Method:             "DELETE",
		PathPattern:        "/v1/license-keys/{key}",
		ProducesMediaTypes: []string{"*/*"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &DeleteLicenseKeyReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, nil, err
	}
	switch value := result.(type) {
	case *DeleteLicenseKeyOK:
		return value, nil, nil
	case *DeleteLicenseKeyNoContent:
		return nil, value, nil
	}
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for license_keys: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
GETLicenseKey Gets a license key by key
*/
func (a *Client) GETLicenseKey(params *GETLicenseKeyParams, opts ...ClientOption) (*GETLicenseKeyOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGETLicenseKeyParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "getLicenseKey",
		Method:             "GET",
		PathPattern:        "/v1/license-keys/{key}",
		ProducesMediaTypes: []string{"*/*"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GETLicenseKeyReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GETLicenseKeyOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for getLicenseKey: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
GETLicenseKeys Gets the license keys
*/
func (a *Client) GETLicenseKeys(params *GETLicenseKeysParams, opts ...ClientOption) (*GETLicenseKeysOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGETLicenseKeysParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "getLicenseKeys",
		Method:             "GET",
		PathPattern:        "/v1/license-keys",
		ProducesMediaTypes: []string{"*/*"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GETLicenseKeysReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GETLicenseKeysOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for getLicenseKeys: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
GETLicensingInfo Gets the licensing information
*/
func (a *Client) GETLicensingInfo(params *GETLicensingInfoParams, opts ...ClientOption) (*GETLicensingInfoOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGETLicensingInfoParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "getLicensingInfo",
		Method:             "GET",
		PathPattern:        "/v1/licensing-info",
		ProducesMediaTypes: []string{"*/*"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GETLicensingInfoReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GETLicensingInfoOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for getLicensingInfo: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

// SetTransport changes the transport on the client
func (a *Client) SetTransport(transport runtime.ClientTransport) {
	a.transport = transport
}
