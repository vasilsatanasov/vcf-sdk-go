// Code generated by go-swagger; DO NOT EDIT.

// Copyright 2023 VMware, Inc.
// SPDX-License-Identifier: BSD-2-Clause

package license_keys

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"
	"io"

	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"

	"github.com/vmware/vcf-sdk-go/models"
)

// UpdateDomainLicensingInfoReader is a Reader for the UpdateDomainLicensingInfo structure.
type UpdateDomainLicensingInfoReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *UpdateDomainLicensingInfoReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {
	case 200:
		result := NewUpdateDomainLicensingInfoOK()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil
	case 202:
		result := NewUpdateDomainLicensingInfoAccepted()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil
	case 400:
		result := NewUpdateDomainLicensingInfoBadRequest()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 409:
		result := NewUpdateDomainLicensingInfoConflict()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 500:
		result := NewUpdateDomainLicensingInfoInternalServerError()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	default:
		return nil, runtime.NewAPIError("response status code does not match any response statuses defined for this endpoint in the swagger spec", response, response.Code())
	}
}

// NewUpdateDomainLicensingInfoOK creates a UpdateDomainLicensingInfoOK with default headers values
func NewUpdateDomainLicensingInfoOK() *UpdateDomainLicensingInfoOK {
	return &UpdateDomainLicensingInfoOK{}
}

/*
UpdateDomainLicensingInfoOK describes a response with status code 200, with default header values.

OK
*/
type UpdateDomainLicensingInfoOK struct {
}

// IsSuccess returns true when this update domain licensing info o k response has a 2xx status code
func (o *UpdateDomainLicensingInfoOK) IsSuccess() bool {
	return true
}

// IsRedirect returns true when this update domain licensing info o k response has a 3xx status code
func (o *UpdateDomainLicensingInfoOK) IsRedirect() bool {
	return false
}

// IsClientError returns true when this update domain licensing info o k response has a 4xx status code
func (o *UpdateDomainLicensingInfoOK) IsClientError() bool {
	return false
}

// IsServerError returns true when this update domain licensing info o k response has a 5xx status code
func (o *UpdateDomainLicensingInfoOK) IsServerError() bool {
	return false
}

// IsCode returns true when this update domain licensing info o k response a status code equal to that given
func (o *UpdateDomainLicensingInfoOK) IsCode(code int) bool {
	return code == 200
}

func (o *UpdateDomainLicensingInfoOK) Error() string {
	return fmt.Sprintf("[PUT /v1/licensing-info/domains/{id}][%d] updateDomainLicensingInfoOK ", 200)
}

func (o *UpdateDomainLicensingInfoOK) String() string {
	return fmt.Sprintf("[PUT /v1/licensing-info/domains/{id}][%d] updateDomainLicensingInfoOK ", 200)
}

func (o *UpdateDomainLicensingInfoOK) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}

// NewUpdateDomainLicensingInfoAccepted creates a UpdateDomainLicensingInfoAccepted with default headers values
func NewUpdateDomainLicensingInfoAccepted() *UpdateDomainLicensingInfoAccepted {
	return &UpdateDomainLicensingInfoAccepted{}
}

/*
UpdateDomainLicensingInfoAccepted describes a response with status code 202, with default header values.

Accepted
*/
type UpdateDomainLicensingInfoAccepted struct {
}

// IsSuccess returns true when this update domain licensing info accepted response has a 2xx status code
func (o *UpdateDomainLicensingInfoAccepted) IsSuccess() bool {
	return true
}

// IsRedirect returns true when this update domain licensing info accepted response has a 3xx status code
func (o *UpdateDomainLicensingInfoAccepted) IsRedirect() bool {
	return false
}

// IsClientError returns true when this update domain licensing info accepted response has a 4xx status code
func (o *UpdateDomainLicensingInfoAccepted) IsClientError() bool {
	return false
}

// IsServerError returns true when this update domain licensing info accepted response has a 5xx status code
func (o *UpdateDomainLicensingInfoAccepted) IsServerError() bool {
	return false
}

// IsCode returns true when this update domain licensing info accepted response a status code equal to that given
func (o *UpdateDomainLicensingInfoAccepted) IsCode(code int) bool {
	return code == 202
}

func (o *UpdateDomainLicensingInfoAccepted) Error() string {
	return fmt.Sprintf("[PUT /v1/licensing-info/domains/{id}][%d] updateDomainLicensingInfoAccepted ", 202)
}

func (o *UpdateDomainLicensingInfoAccepted) String() string {
	return fmt.Sprintf("[PUT /v1/licensing-info/domains/{id}][%d] updateDomainLicensingInfoAccepted ", 202)
}

func (o *UpdateDomainLicensingInfoAccepted) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}

// NewUpdateDomainLicensingInfoBadRequest creates a UpdateDomainLicensingInfoBadRequest with default headers values
func NewUpdateDomainLicensingInfoBadRequest() *UpdateDomainLicensingInfoBadRequest {
	return &UpdateDomainLicensingInfoBadRequest{}
}

/*
UpdateDomainLicensingInfoBadRequest describes a response with status code 400, with default header values.

Bad Request
*/
type UpdateDomainLicensingInfoBadRequest struct {
	Payload *models.Error
}

// IsSuccess returns true when this update domain licensing info bad request response has a 2xx status code
func (o *UpdateDomainLicensingInfoBadRequest) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this update domain licensing info bad request response has a 3xx status code
func (o *UpdateDomainLicensingInfoBadRequest) IsRedirect() bool {
	return false
}

// IsClientError returns true when this update domain licensing info bad request response has a 4xx status code
func (o *UpdateDomainLicensingInfoBadRequest) IsClientError() bool {
	return true
}

// IsServerError returns true when this update domain licensing info bad request response has a 5xx status code
func (o *UpdateDomainLicensingInfoBadRequest) IsServerError() bool {
	return false
}

// IsCode returns true when this update domain licensing info bad request response a status code equal to that given
func (o *UpdateDomainLicensingInfoBadRequest) IsCode(code int) bool {
	return code == 400
}

func (o *UpdateDomainLicensingInfoBadRequest) Error() string {
	return fmt.Sprintf("[PUT /v1/licensing-info/domains/{id}][%d] updateDomainLicensingInfoBadRequest  %+v", 400, o.Payload)
}

func (o *UpdateDomainLicensingInfoBadRequest) String() string {
	return fmt.Sprintf("[PUT /v1/licensing-info/domains/{id}][%d] updateDomainLicensingInfoBadRequest  %+v", 400, o.Payload)
}

func (o *UpdateDomainLicensingInfoBadRequest) GetPayload() *models.Error {
	return o.Payload
}

func (o *UpdateDomainLicensingInfoBadRequest) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.Error)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewUpdateDomainLicensingInfoConflict creates a UpdateDomainLicensingInfoConflict with default headers values
func NewUpdateDomainLicensingInfoConflict() *UpdateDomainLicensingInfoConflict {
	return &UpdateDomainLicensingInfoConflict{}
}

/*
UpdateDomainLicensingInfoConflict describes a response with status code 409, with default header values.

Conflict
*/
type UpdateDomainLicensingInfoConflict struct {
	Payload *models.Error
}

// IsSuccess returns true when this update domain licensing info conflict response has a 2xx status code
func (o *UpdateDomainLicensingInfoConflict) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this update domain licensing info conflict response has a 3xx status code
func (o *UpdateDomainLicensingInfoConflict) IsRedirect() bool {
	return false
}

// IsClientError returns true when this update domain licensing info conflict response has a 4xx status code
func (o *UpdateDomainLicensingInfoConflict) IsClientError() bool {
	return true
}

// IsServerError returns true when this update domain licensing info conflict response has a 5xx status code
func (o *UpdateDomainLicensingInfoConflict) IsServerError() bool {
	return false
}

// IsCode returns true when this update domain licensing info conflict response a status code equal to that given
func (o *UpdateDomainLicensingInfoConflict) IsCode(code int) bool {
	return code == 409
}

func (o *UpdateDomainLicensingInfoConflict) Error() string {
	return fmt.Sprintf("[PUT /v1/licensing-info/domains/{id}][%d] updateDomainLicensingInfoConflict  %+v", 409, o.Payload)
}

func (o *UpdateDomainLicensingInfoConflict) String() string {
	return fmt.Sprintf("[PUT /v1/licensing-info/domains/{id}][%d] updateDomainLicensingInfoConflict  %+v", 409, o.Payload)
}

func (o *UpdateDomainLicensingInfoConflict) GetPayload() *models.Error {
	return o.Payload
}

func (o *UpdateDomainLicensingInfoConflict) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.Error)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewUpdateDomainLicensingInfoInternalServerError creates a UpdateDomainLicensingInfoInternalServerError with default headers values
func NewUpdateDomainLicensingInfoInternalServerError() *UpdateDomainLicensingInfoInternalServerError {
	return &UpdateDomainLicensingInfoInternalServerError{}
}

/*
UpdateDomainLicensingInfoInternalServerError describes a response with status code 500, with default header values.

Internal server error
*/
type UpdateDomainLicensingInfoInternalServerError struct {
	Payload *models.Error
}

// IsSuccess returns true when this update domain licensing info internal server error response has a 2xx status code
func (o *UpdateDomainLicensingInfoInternalServerError) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this update domain licensing info internal server error response has a 3xx status code
func (o *UpdateDomainLicensingInfoInternalServerError) IsRedirect() bool {
	return false
}

// IsClientError returns true when this update domain licensing info internal server error response has a 4xx status code
func (o *UpdateDomainLicensingInfoInternalServerError) IsClientError() bool {
	return false
}

// IsServerError returns true when this update domain licensing info internal server error response has a 5xx status code
func (o *UpdateDomainLicensingInfoInternalServerError) IsServerError() bool {
	return true
}

// IsCode returns true when this update domain licensing info internal server error response a status code equal to that given
func (o *UpdateDomainLicensingInfoInternalServerError) IsCode(code int) bool {
	return code == 500
}

func (o *UpdateDomainLicensingInfoInternalServerError) Error() string {
	return fmt.Sprintf("[PUT /v1/licensing-info/domains/{id}][%d] updateDomainLicensingInfoInternalServerError  %+v", 500, o.Payload)
}

func (o *UpdateDomainLicensingInfoInternalServerError) String() string {
	return fmt.Sprintf("[PUT /v1/licensing-info/domains/{id}][%d] updateDomainLicensingInfoInternalServerError  %+v", 500, o.Payload)
}

func (o *UpdateDomainLicensingInfoInternalServerError) GetPayload() *models.Error {
	return o.Payload
}

func (o *UpdateDomainLicensingInfoInternalServerError) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.Error)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}
