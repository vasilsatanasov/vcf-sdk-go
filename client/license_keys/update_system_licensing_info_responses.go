// Code generated by go-swagger; DO NOT EDIT.

// Copyright 2023 VMware, Inc.
// SPDX-License-Identifier: BSD-2-Clause

package license_keys

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"
	"io"

	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"

	"github.com/vmware/vcf-sdk-go/models"
)

// UpdateSystemLicensingInfoReader is a Reader for the UpdateSystemLicensingInfo structure.
type UpdateSystemLicensingInfoReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *UpdateSystemLicensingInfoReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {
	case 200:
		result := NewUpdateSystemLicensingInfoOK()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil
	case 202:
		result := NewUpdateSystemLicensingInfoAccepted()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil
	case 400:
		result := NewUpdateSystemLicensingInfoBadRequest()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 409:
		result := NewUpdateSystemLicensingInfoConflict()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 500:
		result := NewUpdateSystemLicensingInfoInternalServerError()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	default:
		return nil, runtime.NewAPIError("response status code does not match any response statuses defined for this endpoint in the swagger spec", response, response.Code())
	}
}

// NewUpdateSystemLicensingInfoOK creates a UpdateSystemLicensingInfoOK with default headers values
func NewUpdateSystemLicensingInfoOK() *UpdateSystemLicensingInfoOK {
	return &UpdateSystemLicensingInfoOK{}
}

/*
UpdateSystemLicensingInfoOK describes a response with status code 200, with default header values.

OK
*/
type UpdateSystemLicensingInfoOK struct {
}

// IsSuccess returns true when this update system licensing info o k response has a 2xx status code
func (o *UpdateSystemLicensingInfoOK) IsSuccess() bool {
	return true
}

// IsRedirect returns true when this update system licensing info o k response has a 3xx status code
func (o *UpdateSystemLicensingInfoOK) IsRedirect() bool {
	return false
}

// IsClientError returns true when this update system licensing info o k response has a 4xx status code
func (o *UpdateSystemLicensingInfoOK) IsClientError() bool {
	return false
}

// IsServerError returns true when this update system licensing info o k response has a 5xx status code
func (o *UpdateSystemLicensingInfoOK) IsServerError() bool {
	return false
}

// IsCode returns true when this update system licensing info o k response a status code equal to that given
func (o *UpdateSystemLicensingInfoOK) IsCode(code int) bool {
	return code == 200
}

func (o *UpdateSystemLicensingInfoOK) Error() string {
	return fmt.Sprintf("[PUT /v1/licensing-info/system][%d] updateSystemLicensingInfoOK ", 200)
}

func (o *UpdateSystemLicensingInfoOK) String() string {
	return fmt.Sprintf("[PUT /v1/licensing-info/system][%d] updateSystemLicensingInfoOK ", 200)
}

func (o *UpdateSystemLicensingInfoOK) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}

// NewUpdateSystemLicensingInfoAccepted creates a UpdateSystemLicensingInfoAccepted with default headers values
func NewUpdateSystemLicensingInfoAccepted() *UpdateSystemLicensingInfoAccepted {
	return &UpdateSystemLicensingInfoAccepted{}
}

/*
UpdateSystemLicensingInfoAccepted describes a response with status code 202, with default header values.

Accepted
*/
type UpdateSystemLicensingInfoAccepted struct {
}

// IsSuccess returns true when this update system licensing info accepted response has a 2xx status code
func (o *UpdateSystemLicensingInfoAccepted) IsSuccess() bool {
	return true
}

// IsRedirect returns true when this update system licensing info accepted response has a 3xx status code
func (o *UpdateSystemLicensingInfoAccepted) IsRedirect() bool {
	return false
}

// IsClientError returns true when this update system licensing info accepted response has a 4xx status code
func (o *UpdateSystemLicensingInfoAccepted) IsClientError() bool {
	return false
}

// IsServerError returns true when this update system licensing info accepted response has a 5xx status code
func (o *UpdateSystemLicensingInfoAccepted) IsServerError() bool {
	return false
}

// IsCode returns true when this update system licensing info accepted response a status code equal to that given
func (o *UpdateSystemLicensingInfoAccepted) IsCode(code int) bool {
	return code == 202
}

func (o *UpdateSystemLicensingInfoAccepted) Error() string {
	return fmt.Sprintf("[PUT /v1/licensing-info/system][%d] updateSystemLicensingInfoAccepted ", 202)
}

func (o *UpdateSystemLicensingInfoAccepted) String() string {
	return fmt.Sprintf("[PUT /v1/licensing-info/system][%d] updateSystemLicensingInfoAccepted ", 202)
}

func (o *UpdateSystemLicensingInfoAccepted) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}

// NewUpdateSystemLicensingInfoBadRequest creates a UpdateSystemLicensingInfoBadRequest with default headers values
func NewUpdateSystemLicensingInfoBadRequest() *UpdateSystemLicensingInfoBadRequest {
	return &UpdateSystemLicensingInfoBadRequest{}
}

/*
UpdateSystemLicensingInfoBadRequest describes a response with status code 400, with default header values.

Bad Request
*/
type UpdateSystemLicensingInfoBadRequest struct {
	Payload *models.Error
}

// IsSuccess returns true when this update system licensing info bad request response has a 2xx status code
func (o *UpdateSystemLicensingInfoBadRequest) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this update system licensing info bad request response has a 3xx status code
func (o *UpdateSystemLicensingInfoBadRequest) IsRedirect() bool {
	return false
}

// IsClientError returns true when this update system licensing info bad request response has a 4xx status code
func (o *UpdateSystemLicensingInfoBadRequest) IsClientError() bool {
	return true
}

// IsServerError returns true when this update system licensing info bad request response has a 5xx status code
func (o *UpdateSystemLicensingInfoBadRequest) IsServerError() bool {
	return false
}

// IsCode returns true when this update system licensing info bad request response a status code equal to that given
func (o *UpdateSystemLicensingInfoBadRequest) IsCode(code int) bool {
	return code == 400
}

func (o *UpdateSystemLicensingInfoBadRequest) Error() string {
	return fmt.Sprintf("[PUT /v1/licensing-info/system][%d] updateSystemLicensingInfoBadRequest  %+v", 400, o.Payload)
}

func (o *UpdateSystemLicensingInfoBadRequest) String() string {
	return fmt.Sprintf("[PUT /v1/licensing-info/system][%d] updateSystemLicensingInfoBadRequest  %+v", 400, o.Payload)
}

func (o *UpdateSystemLicensingInfoBadRequest) GetPayload() *models.Error {
	return o.Payload
}

func (o *UpdateSystemLicensingInfoBadRequest) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.Error)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewUpdateSystemLicensingInfoConflict creates a UpdateSystemLicensingInfoConflict with default headers values
func NewUpdateSystemLicensingInfoConflict() *UpdateSystemLicensingInfoConflict {
	return &UpdateSystemLicensingInfoConflict{}
}

/*
UpdateSystemLicensingInfoConflict describes a response with status code 409, with default header values.

Conflict
*/
type UpdateSystemLicensingInfoConflict struct {
	Payload *models.Error
}

// IsSuccess returns true when this update system licensing info conflict response has a 2xx status code
func (o *UpdateSystemLicensingInfoConflict) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this update system licensing info conflict response has a 3xx status code
func (o *UpdateSystemLicensingInfoConflict) IsRedirect() bool {
	return false
}

// IsClientError returns true when this update system licensing info conflict response has a 4xx status code
func (o *UpdateSystemLicensingInfoConflict) IsClientError() bool {
	return true
}

// IsServerError returns true when this update system licensing info conflict response has a 5xx status code
func (o *UpdateSystemLicensingInfoConflict) IsServerError() bool {
	return false
}

// IsCode returns true when this update system licensing info conflict response a status code equal to that given
func (o *UpdateSystemLicensingInfoConflict) IsCode(code int) bool {
	return code == 409
}

func (o *UpdateSystemLicensingInfoConflict) Error() string {
	return fmt.Sprintf("[PUT /v1/licensing-info/system][%d] updateSystemLicensingInfoConflict  %+v", 409, o.Payload)
}

func (o *UpdateSystemLicensingInfoConflict) String() string {
	return fmt.Sprintf("[PUT /v1/licensing-info/system][%d] updateSystemLicensingInfoConflict  %+v", 409, o.Payload)
}

func (o *UpdateSystemLicensingInfoConflict) GetPayload() *models.Error {
	return o.Payload
}

func (o *UpdateSystemLicensingInfoConflict) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.Error)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewUpdateSystemLicensingInfoInternalServerError creates a UpdateSystemLicensingInfoInternalServerError with default headers values
func NewUpdateSystemLicensingInfoInternalServerError() *UpdateSystemLicensingInfoInternalServerError {
	return &UpdateSystemLicensingInfoInternalServerError{}
}

/*
UpdateSystemLicensingInfoInternalServerError describes a response with status code 500, with default header values.

Internal server error
*/
type UpdateSystemLicensingInfoInternalServerError struct {
	Payload *models.Error
}

// IsSuccess returns true when this update system licensing info internal server error response has a 2xx status code
func (o *UpdateSystemLicensingInfoInternalServerError) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this update system licensing info internal server error response has a 3xx status code
func (o *UpdateSystemLicensingInfoInternalServerError) IsRedirect() bool {
	return false
}

// IsClientError returns true when this update system licensing info internal server error response has a 4xx status code
func (o *UpdateSystemLicensingInfoInternalServerError) IsClientError() bool {
	return false
}

// IsServerError returns true when this update system licensing info internal server error response has a 5xx status code
func (o *UpdateSystemLicensingInfoInternalServerError) IsServerError() bool {
	return true
}

// IsCode returns true when this update system licensing info internal server error response a status code equal to that given
func (o *UpdateSystemLicensingInfoInternalServerError) IsCode(code int) bool {
	return code == 500
}

func (o *UpdateSystemLicensingInfoInternalServerError) Error() string {
	return fmt.Sprintf("[PUT /v1/licensing-info/system][%d] updateSystemLicensingInfoInternalServerError  %+v", 500, o.Payload)
}

func (o *UpdateSystemLicensingInfoInternalServerError) String() string {
	return fmt.Sprintf("[PUT /v1/licensing-info/system][%d] updateSystemLicensingInfoInternalServerError  %+v", 500, o.Payload)
}

func (o *UpdateSystemLicensingInfoInternalServerError) GetPayload() *models.Error {
	return o.Payload
}

func (o *UpdateSystemLicensingInfoInternalServerError) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.Error)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}
