// Code generated by go-swagger; DO NOT EDIT.

// Copyright 2023 VMware, Inc.
// SPDX-License-Identifier: BSD-2-Clause

package network_pools

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"net/http"
	"time"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/runtime"
	cr "github.com/go-openapi/runtime/client"
	"github.com/go-openapi/strfmt"

	"github.com/vmware/vcf-sdk-go/models"
)

// NewDeleteIPPoolFromNetworkOfNetworkPoolParams creates a new DeleteIPPoolFromNetworkOfNetworkPoolParams object,
// with the default timeout for this client.
//
// Default values are not hydrated, since defaults are normally applied by the API server side.
//
// To enforce default values in parameter, use SetDefaults or WithDefaults.
func NewDeleteIPPoolFromNetworkOfNetworkPoolParams() *DeleteIPPoolFromNetworkOfNetworkPoolParams {
	return &DeleteIPPoolFromNetworkOfNetworkPoolParams{
		timeout: cr.DefaultTimeout,
	}
}

// NewDeleteIPPoolFromNetworkOfNetworkPoolParamsWithTimeout creates a new DeleteIPPoolFromNetworkOfNetworkPoolParams object
// with the ability to set a timeout on a request.
func NewDeleteIPPoolFromNetworkOfNetworkPoolParamsWithTimeout(timeout time.Duration) *DeleteIPPoolFromNetworkOfNetworkPoolParams {
	return &DeleteIPPoolFromNetworkOfNetworkPoolParams{
		timeout: timeout,
	}
}

// NewDeleteIPPoolFromNetworkOfNetworkPoolParamsWithContext creates a new DeleteIPPoolFromNetworkOfNetworkPoolParams object
// with the ability to set a context for a request.
func NewDeleteIPPoolFromNetworkOfNetworkPoolParamsWithContext(ctx context.Context) *DeleteIPPoolFromNetworkOfNetworkPoolParams {
	return &DeleteIPPoolFromNetworkOfNetworkPoolParams{
		Context: ctx,
	}
}

// NewDeleteIPPoolFromNetworkOfNetworkPoolParamsWithHTTPClient creates a new DeleteIPPoolFromNetworkOfNetworkPoolParams object
// with the ability to set a custom HTTPClient for a request.
func NewDeleteIPPoolFromNetworkOfNetworkPoolParamsWithHTTPClient(client *http.Client) *DeleteIPPoolFromNetworkOfNetworkPoolParams {
	return &DeleteIPPoolFromNetworkOfNetworkPoolParams{
		HTTPClient: client,
	}
}

/*
DeleteIPPoolFromNetworkOfNetworkPoolParams contains all the parameters to send to the API endpoint

	for the delete Ip pool from network of network pool operation.

	Typically these are written to a http.Request.
*/
type DeleteIPPoolFromNetworkOfNetworkPoolParams struct {

	/* ID.

	   ID of the networkpool
	*/
	ID string

	/* IPPool.

	   ipPool
	*/
	IPPool *models.IPPool

	/* NetworkID.

	   ID of the network
	*/
	NetworkID string

	timeout    time.Duration
	Context    context.Context
	HTTPClient *http.Client
}

// WithDefaults hydrates default values in the delete Ip pool from network of network pool params (not the query body).
//
// All values with no default are reset to their zero value.
func (o *DeleteIPPoolFromNetworkOfNetworkPoolParams) WithDefaults() *DeleteIPPoolFromNetworkOfNetworkPoolParams {
	o.SetDefaults()
	return o
}

// SetDefaults hydrates default values in the delete Ip pool from network of network pool params (not the query body).
//
// All values with no default are reset to their zero value.
func (o *DeleteIPPoolFromNetworkOfNetworkPoolParams) SetDefaults() {
	// no default values defined for this parameter
}

// WithTimeout adds the timeout to the delete Ip pool from network of network pool params
func (o *DeleteIPPoolFromNetworkOfNetworkPoolParams) WithTimeout(timeout time.Duration) *DeleteIPPoolFromNetworkOfNetworkPoolParams {
	o.SetTimeout(timeout)
	return o
}

// SetTimeout adds the timeout to the delete Ip pool from network of network pool params
func (o *DeleteIPPoolFromNetworkOfNetworkPoolParams) SetTimeout(timeout time.Duration) {
	o.timeout = timeout
}

// WithContext adds the context to the delete Ip pool from network of network pool params
func (o *DeleteIPPoolFromNetworkOfNetworkPoolParams) WithContext(ctx context.Context) *DeleteIPPoolFromNetworkOfNetworkPoolParams {
	o.SetContext(ctx)
	return o
}

// SetContext adds the context to the delete Ip pool from network of network pool params
func (o *DeleteIPPoolFromNetworkOfNetworkPoolParams) SetContext(ctx context.Context) {
	o.Context = ctx
}

// WithHTTPClient adds the HTTPClient to the delete Ip pool from network of network pool params
func (o *DeleteIPPoolFromNetworkOfNetworkPoolParams) WithHTTPClient(client *http.Client) *DeleteIPPoolFromNetworkOfNetworkPoolParams {
	o.SetHTTPClient(client)
	return o
}

// SetHTTPClient adds the HTTPClient to the delete Ip pool from network of network pool params
func (o *DeleteIPPoolFromNetworkOfNetworkPoolParams) SetHTTPClient(client *http.Client) {
	o.HTTPClient = client
}

// WithID adds the id to the delete Ip pool from network of network pool params
func (o *DeleteIPPoolFromNetworkOfNetworkPoolParams) WithID(id string) *DeleteIPPoolFromNetworkOfNetworkPoolParams {
	o.SetID(id)
	return o
}

// SetID adds the id to the delete Ip pool from network of network pool params
func (o *DeleteIPPoolFromNetworkOfNetworkPoolParams) SetID(id string) {
	o.ID = id
}

// WithIPPool adds the iPPool to the delete Ip pool from network of network pool params
func (o *DeleteIPPoolFromNetworkOfNetworkPoolParams) WithIPPool(iPPool *models.IPPool) *DeleteIPPoolFromNetworkOfNetworkPoolParams {
	o.SetIPPool(iPPool)
	return o
}

// SetIPPool adds the ipPool to the delete Ip pool from network of network pool params
func (o *DeleteIPPoolFromNetworkOfNetworkPoolParams) SetIPPool(iPPool *models.IPPool) {
	o.IPPool = iPPool
}

// WithNetworkID adds the networkID to the delete Ip pool from network of network pool params
func (o *DeleteIPPoolFromNetworkOfNetworkPoolParams) WithNetworkID(networkID string) *DeleteIPPoolFromNetworkOfNetworkPoolParams {
	o.SetNetworkID(networkID)
	return o
}

// SetNetworkID adds the networkId to the delete Ip pool from network of network pool params
func (o *DeleteIPPoolFromNetworkOfNetworkPoolParams) SetNetworkID(networkID string) {
	o.NetworkID = networkID
}

// WriteToRequest writes these params to a swagger request
func (o *DeleteIPPoolFromNetworkOfNetworkPoolParams) WriteToRequest(r runtime.ClientRequest, reg strfmt.Registry) error {

	if err := r.SetTimeout(o.timeout); err != nil {
		return err
	}
	var res []error

	// path param id
	if err := r.SetPathParam("id", o.ID); err != nil {
		return err
	}
	if o.IPPool != nil {
		if err := r.SetBodyParam(o.IPPool); err != nil {
			return err
		}
	}

	// path param networkId
	if err := r.SetPathParam("networkId", o.NetworkID); err != nil {
		return err
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}
