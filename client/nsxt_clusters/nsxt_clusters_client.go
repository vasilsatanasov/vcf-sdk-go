// Code generated by go-swagger; DO NOT EDIT.

// Copyright Â© 2023 VMware, Inc. All Rights Reserved.
// Code licenced under: BSD-2

package nsxt_clusters

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"

	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"
)

// New creates a new n s x t clusters API client.
func New(transport runtime.ClientTransport, formats strfmt.Registry) ClientService {
	return &Client{transport: transport, formats: formats}
}

/*
Client for n s x t clusters API
*/
type Client struct {
	transport runtime.ClientTransport
	formats   strfmt.Registry
}

// ClientOption is the option for Client methods
type ClientOption func(*runtime.ClientOperation)

// ClientService is the interface for Client methods
type ClientService interface {
	GETCriteria1(params *GETCriteria1Params, opts ...ClientOption) (*GETCriteria1OK, error)

	GETCriterion1(params *GETCriterion1Params, opts ...ClientOption) (*GETCriterion1OK, error)

	GETNSXTCluster(params *GETNSXTClusterParams, opts ...ClientOption) (*GETNSXTClusterOK, error)

	GETNSXTClusterQueryResponse(params *GETNSXTClusterQueryResponseParams, opts ...ClientOption) (*GETNSXTClusterQueryResponseOK, *GETNSXTClusterQueryResponseAccepted, error)

	GETNSXTClusters(params *GETNSXTClustersParams, opts ...ClientOption) (*GETNSXTClustersOK, error)

	GETNSXTIPAddressPool(params *GETNSXTIPAddressPoolParams, opts ...ClientOption) (*GETNSXTIPAddressPoolOK, error)

	GETNSXTIPAddressPools(params *GETNSXTIPAddressPoolsParams, opts ...ClientOption) (*GETNSXTIPAddressPoolsOK, error)

	GETValidationResultUsingGET(params *GETValidationResultUsingGETParams, opts ...ClientOption) (*GETValidationResultUsingGETOK, error)

	POSTQuery1(params *POSTQuery1Params, opts ...ClientOption) (*POSTQuery1OK, *POSTQuery1Accepted, error)

	ValidateIPPoolUsingPOST(params *ValidateIPPoolUsingPOSTParams, opts ...ClientOption) (*ValidateIPPoolUsingPOSTOK, error)

	SetTransport(transport runtime.ClientTransport)
}

/*
GETCriteria1 Gets all n s x t criteria
*/
func (a *Client) GETCriteria1(params *GETCriteria1Params, opts ...ClientOption) (*GETCriteria1OK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGETCriteria1Params()
	}
	op := &runtime.ClientOperation{
		ID:                 "getCriteria_1",
		Method:             "GET",
		PathPattern:        "/v1/nsxt-clusters/criteria",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GETCriteria1Reader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GETCriteria1OK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for getCriteria_1: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
GETCriterion1 Gets a n s x t criterion
*/
func (a *Client) GETCriterion1(params *GETCriterion1Params, opts ...ClientOption) (*GETCriterion1OK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGETCriterion1Params()
	}
	op := &runtime.ClientOperation{
		ID:                 "getCriterion_1",
		Method:             "GET",
		PathPattern:        "/v1/nsxt-clusters/criteria/{name}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GETCriterion1Reader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GETCriterion1OK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for getCriterion_1: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
GETNSXTCluster Gets a n s x t cluster
*/
func (a *Client) GETNSXTCluster(params *GETNSXTClusterParams, opts ...ClientOption) (*GETNSXTClusterOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGETNSXTClusterParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "getNsxtCluster",
		Method:             "GET",
		PathPattern:        "/v1/nsxt-clusters/{id}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GETNSXTClusterReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GETNSXTClusterOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for getNsxtCluster: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
GETNSXTClusterQueryResponse Gets n s x t cluster query response
*/
func (a *Client) GETNSXTClusterQueryResponse(params *GETNSXTClusterQueryResponseParams, opts ...ClientOption) (*GETNSXTClusterQueryResponseOK, *GETNSXTClusterQueryResponseAccepted, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGETNSXTClusterQueryResponseParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "getNsxtClusterQueryResponse",
		Method:             "GET",
		PathPattern:        "/v1/nsxt-clusters/queries/{id}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GETNSXTClusterQueryResponseReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, nil, err
	}
	switch value := result.(type) {
	case *GETNSXTClusterQueryResponseOK:
		return value, nil, nil
	case *GETNSXTClusterQueryResponseAccepted:
		return nil, value, nil
	}
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for nsxt_clusters: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
GETNSXTClusters Gets the n s x t clusters
*/
func (a *Client) GETNSXTClusters(params *GETNSXTClustersParams, opts ...ClientOption) (*GETNSXTClustersOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGETNSXTClustersParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "getNsxtClusters",
		Method:             "GET",
		PathPattern:        "/v1/nsxt-clusters",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GETNSXTClustersReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GETNSXTClustersOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for getNsxtClusters: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
GETNSXTIPAddressPool Gets a n s x t IP address pool
*/
func (a *Client) GETNSXTIPAddressPool(params *GETNSXTIPAddressPoolParams, opts ...ClientOption) (*GETNSXTIPAddressPoolOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGETNSXTIPAddressPoolParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "getNsxtIpAddressPool",
		Method:             "GET",
		PathPattern:        "/v1/nsxt-clusters/{nsxt-cluster-id}/ip-address-pools/{name}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GETNSXTIPAddressPoolReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GETNSXTIPAddressPoolOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for getNsxtIpAddressPool: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
GETNSXTIPAddressPools Gets the n s x t IP address pools
*/
func (a *Client) GETNSXTIPAddressPools(params *GETNSXTIPAddressPoolsParams, opts ...ClientOption) (*GETNSXTIPAddressPoolsOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGETNSXTIPAddressPoolsParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "getNsxtIpAddressPools",
		Method:             "GET",
		PathPattern:        "/v1/nsxt-clusters/{nsxt-cluster-id}/ip-address-pools",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GETNSXTIPAddressPoolsReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GETNSXTIPAddressPoolsOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for getNsxtIpAddressPools: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
GETValidationResultUsingGET gets validation result
*/
func (a *Client) GETValidationResultUsingGET(params *GETValidationResultUsingGETParams, opts ...ClientOption) (*GETValidationResultUsingGETOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGETValidationResultUsingGETParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "getValidationResultUsingGET",
		Method:             "GET",
		PathPattern:        "/v1/nsxt-clusters/ip-address-pools/validations/{id}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GETValidationResultUsingGETReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GETValidationResultUsingGETOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for getValidationResultUsingGET: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
POSTQuery1 Posts a query
*/
func (a *Client) POSTQuery1(params *POSTQuery1Params, opts ...ClientOption) (*POSTQuery1OK, *POSTQuery1Accepted, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewPOSTQuery1Params()
	}
	op := &runtime.ClientOperation{
		ID:                 "postQuery_1",
		Method:             "POST",
		PathPattern:        "/v1/nsxt-clusters/queries",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &POSTQuery1Reader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, nil, err
	}
	switch value := result.(type) {
	case *POSTQuery1OK:
		return value, nil, nil
	case *POSTQuery1Accepted:
		return nil, value, nil
	}
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for nsxt_clusters: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
ValidateIPPoolUsingPOST validates Ip pool
*/
func (a *Client) ValidateIPPoolUsingPOST(params *ValidateIPPoolUsingPOSTParams, opts ...ClientOption) (*ValidateIPPoolUsingPOSTOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewValidateIPPoolUsingPOSTParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "validateIpPoolUsingPOST",
		Method:             "POST",
		PathPattern:        "/v1/nsxt-clusters/ip-address-pools/validations",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &ValidateIPPoolUsingPOSTReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*ValidateIPPoolUsingPOSTOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for validateIpPoolUsingPOST: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

// SetTransport changes the transport on the client
func (a *Client) SetTransport(transport runtime.ClientTransport) {
	a.transport = transport
}
