// Code generated by go-swagger; DO NOT EDIT.

// Copyright 2023 VMware, Inc.
// SPDX-License-Identifier: BSD-2-Clause

package nsxt_edge_clusters

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"
	"io"

	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"

	"github.com/vmware/vcf-sdk-go/models"
)

// ValidateEdgeClusterSpecReader is a Reader for the ValidateEdgeClusterSpec structure.
type ValidateEdgeClusterSpecReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *ValidateEdgeClusterSpecReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {
	case 200:
		result := NewValidateEdgeClusterSpecOK()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil
	case 202:
		result := NewValidateEdgeClusterSpecAccepted()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil
	case 400:
		result := NewValidateEdgeClusterSpecBadRequest()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 500:
		result := NewValidateEdgeClusterSpecInternalServerError()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	default:
		return nil, runtime.NewAPIError("response status code does not match any response statuses defined for this endpoint in the swagger spec", response, response.Code())
	}
}

// NewValidateEdgeClusterSpecOK creates a ValidateEdgeClusterSpecOK with default headers values
func NewValidateEdgeClusterSpecOK() *ValidateEdgeClusterSpecOK {
	return &ValidateEdgeClusterSpecOK{}
}

/*
ValidateEdgeClusterSpecOK describes a response with status code 200, with default header values.

OK
*/
type ValidateEdgeClusterSpecOK struct {
	Payload *models.Validation
}

// IsSuccess returns true when this validate edge cluster spec o k response has a 2xx status code
func (o *ValidateEdgeClusterSpecOK) IsSuccess() bool {
	return true
}

// IsRedirect returns true when this validate edge cluster spec o k response has a 3xx status code
func (o *ValidateEdgeClusterSpecOK) IsRedirect() bool {
	return false
}

// IsClientError returns true when this validate edge cluster spec o k response has a 4xx status code
func (o *ValidateEdgeClusterSpecOK) IsClientError() bool {
	return false
}

// IsServerError returns true when this validate edge cluster spec o k response has a 5xx status code
func (o *ValidateEdgeClusterSpecOK) IsServerError() bool {
	return false
}

// IsCode returns true when this validate edge cluster spec o k response a status code equal to that given
func (o *ValidateEdgeClusterSpecOK) IsCode(code int) bool {
	return code == 200
}

func (o *ValidateEdgeClusterSpecOK) Error() string {
	return fmt.Sprintf("[POST /v1/edge-clusters/validations][%d] validateEdgeClusterSpecOK  %+v", 200, o.Payload)
}

func (o *ValidateEdgeClusterSpecOK) String() string {
	return fmt.Sprintf("[POST /v1/edge-clusters/validations][%d] validateEdgeClusterSpecOK  %+v", 200, o.Payload)
}

func (o *ValidateEdgeClusterSpecOK) GetPayload() *models.Validation {
	return o.Payload
}

func (o *ValidateEdgeClusterSpecOK) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.Validation)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewValidateEdgeClusterSpecAccepted creates a ValidateEdgeClusterSpecAccepted with default headers values
func NewValidateEdgeClusterSpecAccepted() *ValidateEdgeClusterSpecAccepted {
	return &ValidateEdgeClusterSpecAccepted{}
}

/*
ValidateEdgeClusterSpecAccepted describes a response with status code 202, with default header values.

Accepted
*/
type ValidateEdgeClusterSpecAccepted struct {
	Payload *models.Validation
}

// IsSuccess returns true when this validate edge cluster spec accepted response has a 2xx status code
func (o *ValidateEdgeClusterSpecAccepted) IsSuccess() bool {
	return true
}

// IsRedirect returns true when this validate edge cluster spec accepted response has a 3xx status code
func (o *ValidateEdgeClusterSpecAccepted) IsRedirect() bool {
	return false
}

// IsClientError returns true when this validate edge cluster spec accepted response has a 4xx status code
func (o *ValidateEdgeClusterSpecAccepted) IsClientError() bool {
	return false
}

// IsServerError returns true when this validate edge cluster spec accepted response has a 5xx status code
func (o *ValidateEdgeClusterSpecAccepted) IsServerError() bool {
	return false
}

// IsCode returns true when this validate edge cluster spec accepted response a status code equal to that given
func (o *ValidateEdgeClusterSpecAccepted) IsCode(code int) bool {
	return code == 202
}

func (o *ValidateEdgeClusterSpecAccepted) Error() string {
	return fmt.Sprintf("[POST /v1/edge-clusters/validations][%d] validateEdgeClusterSpecAccepted  %+v", 202, o.Payload)
}

func (o *ValidateEdgeClusterSpecAccepted) String() string {
	return fmt.Sprintf("[POST /v1/edge-clusters/validations][%d] validateEdgeClusterSpecAccepted  %+v", 202, o.Payload)
}

func (o *ValidateEdgeClusterSpecAccepted) GetPayload() *models.Validation {
	return o.Payload
}

func (o *ValidateEdgeClusterSpecAccepted) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.Validation)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewValidateEdgeClusterSpecBadRequest creates a ValidateEdgeClusterSpecBadRequest with default headers values
func NewValidateEdgeClusterSpecBadRequest() *ValidateEdgeClusterSpecBadRequest {
	return &ValidateEdgeClusterSpecBadRequest{}
}

/*
ValidateEdgeClusterSpecBadRequest describes a response with status code 400, with default header values.

Bad Request
*/
type ValidateEdgeClusterSpecBadRequest struct {
	Payload *models.Error
}

// IsSuccess returns true when this validate edge cluster spec bad request response has a 2xx status code
func (o *ValidateEdgeClusterSpecBadRequest) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this validate edge cluster spec bad request response has a 3xx status code
func (o *ValidateEdgeClusterSpecBadRequest) IsRedirect() bool {
	return false
}

// IsClientError returns true when this validate edge cluster spec bad request response has a 4xx status code
func (o *ValidateEdgeClusterSpecBadRequest) IsClientError() bool {
	return true
}

// IsServerError returns true when this validate edge cluster spec bad request response has a 5xx status code
func (o *ValidateEdgeClusterSpecBadRequest) IsServerError() bool {
	return false
}

// IsCode returns true when this validate edge cluster spec bad request response a status code equal to that given
func (o *ValidateEdgeClusterSpecBadRequest) IsCode(code int) bool {
	return code == 400
}

func (o *ValidateEdgeClusterSpecBadRequest) Error() string {
	return fmt.Sprintf("[POST /v1/edge-clusters/validations][%d] validateEdgeClusterSpecBadRequest  %+v", 400, o.Payload)
}

func (o *ValidateEdgeClusterSpecBadRequest) String() string {
	return fmt.Sprintf("[POST /v1/edge-clusters/validations][%d] validateEdgeClusterSpecBadRequest  %+v", 400, o.Payload)
}

func (o *ValidateEdgeClusterSpecBadRequest) GetPayload() *models.Error {
	return o.Payload
}

func (o *ValidateEdgeClusterSpecBadRequest) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.Error)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewValidateEdgeClusterSpecInternalServerError creates a ValidateEdgeClusterSpecInternalServerError with default headers values
func NewValidateEdgeClusterSpecInternalServerError() *ValidateEdgeClusterSpecInternalServerError {
	return &ValidateEdgeClusterSpecInternalServerError{}
}

/*
ValidateEdgeClusterSpecInternalServerError describes a response with status code 500, with default header values.

InternalServerError
*/
type ValidateEdgeClusterSpecInternalServerError struct {
	Payload *models.Error
}

// IsSuccess returns true when this validate edge cluster spec internal server error response has a 2xx status code
func (o *ValidateEdgeClusterSpecInternalServerError) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this validate edge cluster spec internal server error response has a 3xx status code
func (o *ValidateEdgeClusterSpecInternalServerError) IsRedirect() bool {
	return false
}

// IsClientError returns true when this validate edge cluster spec internal server error response has a 4xx status code
func (o *ValidateEdgeClusterSpecInternalServerError) IsClientError() bool {
	return false
}

// IsServerError returns true when this validate edge cluster spec internal server error response has a 5xx status code
func (o *ValidateEdgeClusterSpecInternalServerError) IsServerError() bool {
	return true
}

// IsCode returns true when this validate edge cluster spec internal server error response a status code equal to that given
func (o *ValidateEdgeClusterSpecInternalServerError) IsCode(code int) bool {
	return code == 500
}

func (o *ValidateEdgeClusterSpecInternalServerError) Error() string {
	return fmt.Sprintf("[POST /v1/edge-clusters/validations][%d] validateEdgeClusterSpecInternalServerError  %+v", 500, o.Payload)
}

func (o *ValidateEdgeClusterSpecInternalServerError) String() string {
	return fmt.Sprintf("[POST /v1/edge-clusters/validations][%d] validateEdgeClusterSpecInternalServerError  %+v", 500, o.Payload)
}

func (o *ValidateEdgeClusterSpecInternalServerError) GetPayload() *models.Error {
	return o.Payload
}

func (o *ValidateEdgeClusterSpecInternalServerError) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.Error)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}
