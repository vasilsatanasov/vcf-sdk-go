// Code generated by go-swagger; DO NOT EDIT.

// Copyright Â© 2023 VMware, Inc. All Rights Reserved.
// Code licenced under: BSD-2

package releases

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"
	"io"

	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"

	"vcf-sdk-go/models"
)

// GETReleasesReader is a Reader for the GETReleases structure.
type GETReleasesReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *GETReleasesReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {
	case 200:
		result := NewGETReleasesOK()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil
	case 404:
		result := NewGETReleasesNotFound()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 500:
		result := NewGETReleasesInternalServerError()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	default:
		return nil, runtime.NewAPIError("response status code does not match any response statuses defined for this endpoint in the swagger spec", response, response.Code())
	}
}

// NewGETReleasesOK creates a GETReleasesOK with default headers values
func NewGETReleasesOK() *GETReleasesOK {
	return &GETReleasesOK{}
}

/*
GETReleasesOK describes a response with status code 200, with default header values.

Ok
*/
type GETReleasesOK struct {
	Payload *models.PageOfRelease
}

// IsSuccess returns true when this get releases o k response has a 2xx status code
func (o *GETReleasesOK) IsSuccess() bool {
	return true
}

// IsRedirect returns true when this get releases o k response has a 3xx status code
func (o *GETReleasesOK) IsRedirect() bool {
	return false
}

// IsClientError returns true when this get releases o k response has a 4xx status code
func (o *GETReleasesOK) IsClientError() bool {
	return false
}

// IsServerError returns true when this get releases o k response has a 5xx status code
func (o *GETReleasesOK) IsServerError() bool {
	return false
}

// IsCode returns true when this get releases o k response a status code equal to that given
func (o *GETReleasesOK) IsCode(code int) bool {
	return code == 200
}

func (o *GETReleasesOK) Error() string {
	return fmt.Sprintf("[GET /v1/releases][%d] getReleasesOK  %+v", 200, o.Payload)
}

func (o *GETReleasesOK) String() string {
	return fmt.Sprintf("[GET /v1/releases][%d] getReleasesOK  %+v", 200, o.Payload)
}

func (o *GETReleasesOK) GetPayload() *models.PageOfRelease {
	return o.Payload
}

func (o *GETReleasesOK) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.PageOfRelease)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewGETReleasesNotFound creates a GETReleasesNotFound with default headers values
func NewGETReleasesNotFound() *GETReleasesNotFound {
	return &GETReleasesNotFound{}
}

/*
GETReleasesNotFound describes a response with status code 404, with default header values.

Release not found
*/
type GETReleasesNotFound struct {
	Payload *models.Error
}

// IsSuccess returns true when this get releases not found response has a 2xx status code
func (o *GETReleasesNotFound) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this get releases not found response has a 3xx status code
func (o *GETReleasesNotFound) IsRedirect() bool {
	return false
}

// IsClientError returns true when this get releases not found response has a 4xx status code
func (o *GETReleasesNotFound) IsClientError() bool {
	return true
}

// IsServerError returns true when this get releases not found response has a 5xx status code
func (o *GETReleasesNotFound) IsServerError() bool {
	return false
}

// IsCode returns true when this get releases not found response a status code equal to that given
func (o *GETReleasesNotFound) IsCode(code int) bool {
	return code == 404
}

func (o *GETReleasesNotFound) Error() string {
	return fmt.Sprintf("[GET /v1/releases][%d] getReleasesNotFound  %+v", 404, o.Payload)
}

func (o *GETReleasesNotFound) String() string {
	return fmt.Sprintf("[GET /v1/releases][%d] getReleasesNotFound  %+v", 404, o.Payload)
}

func (o *GETReleasesNotFound) GetPayload() *models.Error {
	return o.Payload
}

func (o *GETReleasesNotFound) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.Error)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewGETReleasesInternalServerError creates a GETReleasesInternalServerError with default headers values
func NewGETReleasesInternalServerError() *GETReleasesInternalServerError {
	return &GETReleasesInternalServerError{}
}

/*
GETReleasesInternalServerError describes a response with status code 500, with default header values.

Internal Server Error
*/
type GETReleasesInternalServerError struct {
	Payload *models.Error
}

// IsSuccess returns true when this get releases internal server error response has a 2xx status code
func (o *GETReleasesInternalServerError) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this get releases internal server error response has a 3xx status code
func (o *GETReleasesInternalServerError) IsRedirect() bool {
	return false
}

// IsClientError returns true when this get releases internal server error response has a 4xx status code
func (o *GETReleasesInternalServerError) IsClientError() bool {
	return false
}

// IsServerError returns true when this get releases internal server error response has a 5xx status code
func (o *GETReleasesInternalServerError) IsServerError() bool {
	return true
}

// IsCode returns true when this get releases internal server error response a status code equal to that given
func (o *GETReleasesInternalServerError) IsCode(code int) bool {
	return code == 500
}

func (o *GETReleasesInternalServerError) Error() string {
	return fmt.Sprintf("[GET /v1/releases][%d] getReleasesInternalServerError  %+v", 500, o.Payload)
}

func (o *GETReleasesInternalServerError) String() string {
	return fmt.Sprintf("[GET /v1/releases][%d] getReleasesInternalServerError  %+v", 500, o.Payload)
}

func (o *GETReleasesInternalServerError) GetPayload() *models.Error {
	return o.Payload
}

func (o *GETReleasesInternalServerError) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.Error)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}
