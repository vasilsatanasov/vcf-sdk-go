// Code generated by go-swagger; DO NOT EDIT.

package s_d_d_c

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"net/http"
	"time"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/runtime"
	cr "github.com/go-openapi/runtime/client"
	"github.com/go-openapi/strfmt"

	"vcf-sdk-go/models"
)

// NewCreateSddcParams creates a new CreateSddcParams object,
// with the default timeout for this client.
//
// Default values are not hydrated, since defaults are normally applied by the API server side.
//
// To enforce default values in parameter, use SetDefaults or WithDefaults.
func NewCreateSddcParams() *CreateSddcParams {
	return &CreateSddcParams{
		timeout: cr.DefaultTimeout,
	}
}

// NewCreateSddcParamsWithTimeout creates a new CreateSddcParams object
// with the ability to set a timeout on a request.
func NewCreateSddcParamsWithTimeout(timeout time.Duration) *CreateSddcParams {
	return &CreateSddcParams{
		timeout: timeout,
	}
}

// NewCreateSddcParamsWithContext creates a new CreateSddcParams object
// with the ability to set a context for a request.
func NewCreateSddcParamsWithContext(ctx context.Context) *CreateSddcParams {
	return &CreateSddcParams{
		Context: ctx,
	}
}

// NewCreateSddcParamsWithHTTPClient creates a new CreateSddcParams object
// with the ability to set a custom HTTPClient for a request.
func NewCreateSddcParamsWithHTTPClient(client *http.Client) *CreateSddcParams {
	return &CreateSddcParams{
		HTTPClient: client,
	}
}

/*
CreateSddcParams contains all the parameters to send to the API endpoint

	for the create sddc operation.

	Typically these are written to a http.Request.
*/
type CreateSddcParams struct {

	/* SddcSpec.

	   SDDC specification
	*/
	SddcSpec *models.SddcSpec

	timeout    time.Duration
	Context    context.Context
	HTTPClient *http.Client
}

// WithDefaults hydrates default values in the create sddc params (not the query body).
//
// All values with no default are reset to their zero value.
func (o *CreateSddcParams) WithDefaults() *CreateSddcParams {
	o.SetDefaults()
	return o
}

// SetDefaults hydrates default values in the create sddc params (not the query body).
//
// All values with no default are reset to their zero value.
func (o *CreateSddcParams) SetDefaults() {
	// no default values defined for this parameter
}

// WithTimeout adds the timeout to the create sddc params
func (o *CreateSddcParams) WithTimeout(timeout time.Duration) *CreateSddcParams {
	o.SetTimeout(timeout)
	return o
}

// SetTimeout adds the timeout to the create sddc params
func (o *CreateSddcParams) SetTimeout(timeout time.Duration) {
	o.timeout = timeout
}

// WithContext adds the context to the create sddc params
func (o *CreateSddcParams) WithContext(ctx context.Context) *CreateSddcParams {
	o.SetContext(ctx)
	return o
}

// SetContext adds the context to the create sddc params
func (o *CreateSddcParams) SetContext(ctx context.Context) {
	o.Context = ctx
}

// WithHTTPClient adds the HTTPClient to the create sddc params
func (o *CreateSddcParams) WithHTTPClient(client *http.Client) *CreateSddcParams {
	o.SetHTTPClient(client)
	return o
}

// SetHTTPClient adds the HTTPClient to the create sddc params
func (o *CreateSddcParams) SetHTTPClient(client *http.Client) {
	o.HTTPClient = client
}

// WithSddcSpec adds the sddcSpec to the create sddc params
func (o *CreateSddcParams) WithSddcSpec(sddcSpec *models.SddcSpec) *CreateSddcParams {
	o.SetSddcSpec(sddcSpec)
	return o
}

// SetSddcSpec adds the sddcSpec to the create sddc params
func (o *CreateSddcParams) SetSddcSpec(sddcSpec *models.SddcSpec) {
	o.SddcSpec = sddcSpec
}

// WriteToRequest writes these params to a swagger request
func (o *CreateSddcParams) WriteToRequest(r runtime.ClientRequest, reg strfmt.Registry) error {

	if err := r.SetTimeout(o.timeout); err != nil {
		return err
	}
	var res []error
	if o.SddcSpec != nil {
		if err := r.SetBodyParam(o.SddcSpec); err != nil {
			return err
		}
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}
