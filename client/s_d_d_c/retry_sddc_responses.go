// Code generated by go-swagger; DO NOT EDIT.

package s_d_d_c

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"
	"io"

	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"

	"vcf-sdk-go/models"
)

// RetrySddcReader is a Reader for the RetrySddc structure.
type RetrySddcReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *RetrySddcReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {
	case 200:
		result := NewRetrySddcOK()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil
	case 202:
		result := NewRetrySddcAccepted()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil
	case 400:
		result := NewRetrySddcBadRequest()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 404:
		result := NewRetrySddcNotFound()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 405:
		result := NewRetrySddcMethodNotAllowed()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 500:
		result := NewRetrySddcInternalServerError()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	default:
		return nil, runtime.NewAPIError("response status code does not match any response statuses defined for this endpoint in the swagger spec", response, response.Code())
	}
}

// NewRetrySddcOK creates a RetrySddcOK with default headers values
func NewRetrySddcOK() *RetrySddcOK {
	return &RetrySddcOK{}
}

/*
RetrySddcOK describes a response with status code 200, with default header values.

OK
*/
type RetrySddcOK struct {
	Payload *models.SddcTask
}

// IsSuccess returns true when this retry sddc o k response has a 2xx status code
func (o *RetrySddcOK) IsSuccess() bool {
	return true
}

// IsRedirect returns true when this retry sddc o k response has a 3xx status code
func (o *RetrySddcOK) IsRedirect() bool {
	return false
}

// IsClientError returns true when this retry sddc o k response has a 4xx status code
func (o *RetrySddcOK) IsClientError() bool {
	return false
}

// IsServerError returns true when this retry sddc o k response has a 5xx status code
func (o *RetrySddcOK) IsServerError() bool {
	return false
}

// IsCode returns true when this retry sddc o k response a status code equal to that given
func (o *RetrySddcOK) IsCode(code int) bool {
	return code == 200
}

func (o *RetrySddcOK) Error() string {
	return fmt.Sprintf("[PATCH /v1/sddcs/{id}][%d] retrySddcOK  %+v", 200, o.Payload)
}

func (o *RetrySddcOK) String() string {
	return fmt.Sprintf("[PATCH /v1/sddcs/{id}][%d] retrySddcOK  %+v", 200, o.Payload)
}

func (o *RetrySddcOK) GetPayload() *models.SddcTask {
	return o.Payload
}

func (o *RetrySddcOK) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.SddcTask)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewRetrySddcAccepted creates a RetrySddcAccepted with default headers values
func NewRetrySddcAccepted() *RetrySddcAccepted {
	return &RetrySddcAccepted{}
}

/*
RetrySddcAccepted describes a response with status code 202, with default header values.

Accepted
*/
type RetrySddcAccepted struct {
	Payload *models.SddcTask
}

// IsSuccess returns true when this retry sddc accepted response has a 2xx status code
func (o *RetrySddcAccepted) IsSuccess() bool {
	return true
}

// IsRedirect returns true when this retry sddc accepted response has a 3xx status code
func (o *RetrySddcAccepted) IsRedirect() bool {
	return false
}

// IsClientError returns true when this retry sddc accepted response has a 4xx status code
func (o *RetrySddcAccepted) IsClientError() bool {
	return false
}

// IsServerError returns true when this retry sddc accepted response has a 5xx status code
func (o *RetrySddcAccepted) IsServerError() bool {
	return false
}

// IsCode returns true when this retry sddc accepted response a status code equal to that given
func (o *RetrySddcAccepted) IsCode(code int) bool {
	return code == 202
}

func (o *RetrySddcAccepted) Error() string {
	return fmt.Sprintf("[PATCH /v1/sddcs/{id}][%d] retrySddcAccepted  %+v", 202, o.Payload)
}

func (o *RetrySddcAccepted) String() string {
	return fmt.Sprintf("[PATCH /v1/sddcs/{id}][%d] retrySddcAccepted  %+v", 202, o.Payload)
}

func (o *RetrySddcAccepted) GetPayload() *models.SddcTask {
	return o.Payload
}

func (o *RetrySddcAccepted) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.SddcTask)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewRetrySddcBadRequest creates a RetrySddcBadRequest with default headers values
func NewRetrySddcBadRequest() *RetrySddcBadRequest {
	return &RetrySddcBadRequest{}
}

/*
RetrySddcBadRequest describes a response with status code 400, with default header values.

Bad Request
*/
type RetrySddcBadRequest struct {
	Payload *models.Error
}

// IsSuccess returns true when this retry sddc bad request response has a 2xx status code
func (o *RetrySddcBadRequest) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this retry sddc bad request response has a 3xx status code
func (o *RetrySddcBadRequest) IsRedirect() bool {
	return false
}

// IsClientError returns true when this retry sddc bad request response has a 4xx status code
func (o *RetrySddcBadRequest) IsClientError() bool {
	return true
}

// IsServerError returns true when this retry sddc bad request response has a 5xx status code
func (o *RetrySddcBadRequest) IsServerError() bool {
	return false
}

// IsCode returns true when this retry sddc bad request response a status code equal to that given
func (o *RetrySddcBadRequest) IsCode(code int) bool {
	return code == 400
}

func (o *RetrySddcBadRequest) Error() string {
	return fmt.Sprintf("[PATCH /v1/sddcs/{id}][%d] retrySddcBadRequest  %+v", 400, o.Payload)
}

func (o *RetrySddcBadRequest) String() string {
	return fmt.Sprintf("[PATCH /v1/sddcs/{id}][%d] retrySddcBadRequest  %+v", 400, o.Payload)
}

func (o *RetrySddcBadRequest) GetPayload() *models.Error {
	return o.Payload
}

func (o *RetrySddcBadRequest) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.Error)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewRetrySddcNotFound creates a RetrySddcNotFound with default headers values
func NewRetrySddcNotFound() *RetrySddcNotFound {
	return &RetrySddcNotFound{}
}

/*
RetrySddcNotFound describes a response with status code 404, with default header values.

Not Found
*/
type RetrySddcNotFound struct {
	Payload *models.Error
}

// IsSuccess returns true when this retry sddc not found response has a 2xx status code
func (o *RetrySddcNotFound) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this retry sddc not found response has a 3xx status code
func (o *RetrySddcNotFound) IsRedirect() bool {
	return false
}

// IsClientError returns true when this retry sddc not found response has a 4xx status code
func (o *RetrySddcNotFound) IsClientError() bool {
	return true
}

// IsServerError returns true when this retry sddc not found response has a 5xx status code
func (o *RetrySddcNotFound) IsServerError() bool {
	return false
}

// IsCode returns true when this retry sddc not found response a status code equal to that given
func (o *RetrySddcNotFound) IsCode(code int) bool {
	return code == 404
}

func (o *RetrySddcNotFound) Error() string {
	return fmt.Sprintf("[PATCH /v1/sddcs/{id}][%d] retrySddcNotFound  %+v", 404, o.Payload)
}

func (o *RetrySddcNotFound) String() string {
	return fmt.Sprintf("[PATCH /v1/sddcs/{id}][%d] retrySddcNotFound  %+v", 404, o.Payload)
}

func (o *RetrySddcNotFound) GetPayload() *models.Error {
	return o.Payload
}

func (o *RetrySddcNotFound) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.Error)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewRetrySddcMethodNotAllowed creates a RetrySddcMethodNotAllowed with default headers values
func NewRetrySddcMethodNotAllowed() *RetrySddcMethodNotAllowed {
	return &RetrySddcMethodNotAllowed{}
}

/*
RetrySddcMethodNotAllowed describes a response with status code 405, with default header values.

Not allowed
*/
type RetrySddcMethodNotAllowed struct {
	Payload *models.Error
}

// IsSuccess returns true when this retry sddc method not allowed response has a 2xx status code
func (o *RetrySddcMethodNotAllowed) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this retry sddc method not allowed response has a 3xx status code
func (o *RetrySddcMethodNotAllowed) IsRedirect() bool {
	return false
}

// IsClientError returns true when this retry sddc method not allowed response has a 4xx status code
func (o *RetrySddcMethodNotAllowed) IsClientError() bool {
	return true
}

// IsServerError returns true when this retry sddc method not allowed response has a 5xx status code
func (o *RetrySddcMethodNotAllowed) IsServerError() bool {
	return false
}

// IsCode returns true when this retry sddc method not allowed response a status code equal to that given
func (o *RetrySddcMethodNotAllowed) IsCode(code int) bool {
	return code == 405
}

func (o *RetrySddcMethodNotAllowed) Error() string {
	return fmt.Sprintf("[PATCH /v1/sddcs/{id}][%d] retrySddcMethodNotAllowed  %+v", 405, o.Payload)
}

func (o *RetrySddcMethodNotAllowed) String() string {
	return fmt.Sprintf("[PATCH /v1/sddcs/{id}][%d] retrySddcMethodNotAllowed  %+v", 405, o.Payload)
}

func (o *RetrySddcMethodNotAllowed) GetPayload() *models.Error {
	return o.Payload
}

func (o *RetrySddcMethodNotAllowed) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.Error)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewRetrySddcInternalServerError creates a RetrySddcInternalServerError with default headers values
func NewRetrySddcInternalServerError() *RetrySddcInternalServerError {
	return &RetrySddcInternalServerError{}
}

/*
RetrySddcInternalServerError describes a response with status code 500, with default header values.

Internal Server Error
*/
type RetrySddcInternalServerError struct {
	Payload *models.Error
}

// IsSuccess returns true when this retry sddc internal server error response has a 2xx status code
func (o *RetrySddcInternalServerError) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this retry sddc internal server error response has a 3xx status code
func (o *RetrySddcInternalServerError) IsRedirect() bool {
	return false
}

// IsClientError returns true when this retry sddc internal server error response has a 4xx status code
func (o *RetrySddcInternalServerError) IsClientError() bool {
	return false
}

// IsServerError returns true when this retry sddc internal server error response has a 5xx status code
func (o *RetrySddcInternalServerError) IsServerError() bool {
	return true
}

// IsCode returns true when this retry sddc internal server error response a status code equal to that given
func (o *RetrySddcInternalServerError) IsCode(code int) bool {
	return code == 500
}

func (o *RetrySddcInternalServerError) Error() string {
	return fmt.Sprintf("[PATCH /v1/sddcs/{id}][%d] retrySddcInternalServerError  %+v", 500, o.Payload)
}

func (o *RetrySddcInternalServerError) String() string {
	return fmt.Sprintf("[PATCH /v1/sddcs/{id}][%d] retrySddcInternalServerError  %+v", 500, o.Payload)
}

func (o *RetrySddcInternalServerError) GetPayload() *models.Error {
	return o.Payload
}

func (o *RetrySddcInternalServerError) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.Error)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}
