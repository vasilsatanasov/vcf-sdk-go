// Code generated by go-swagger; DO NOT EDIT.

package s_d_d_c

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"

	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"
)

// New creates a new s d d c API client.
func New(transport runtime.ClientTransport, formats strfmt.Registry) ClientService {
	return &Client{transport: transport, formats: formats}
}

/*
Client for s d d c API
*/
type Client struct {
	transport runtime.ClientTransport
	formats   strfmt.Registry
}

// ClientOption is the option for Client methods
type ClientOption func(*runtime.ClientOperation)

// ClientService is the interface for Client methods
type ClientService interface {
	ConvertToJSONSpec(params *ConvertToJSONSpecParams, opts ...ClientOption) (*ConvertToJSONSpecOK, error)

	CreateSddc(params *CreateSddcParams, opts ...ClientOption) (*CreateSddcOK, *CreateSddcAccepted, error)

	GetAllSddcValidations(params *GetAllSddcValidationsParams, opts ...ClientOption) (*GetAllSddcValidationsOK, error)

	GetBringupDetailReport(params *GetBringupDetailReportParams, opts ...ClientOption) (*GetBringupDetailReportOK, *GetBringupDetailReportNoContent, error)

	GetBringupInfo(params *GetBringupInfoParams, opts ...ClientOption) (*GetBringupInfoOK, error)

	GetBringupValidationReport(params *GetBringupValidationReportParams, opts ...ClientOption) (*GetBringupValidationReportOK, error)

	GetSddcManagerInfo(params *GetSddcManagerInfoParams, opts ...ClientOption) (*GetSddcManagerInfoOK, error)

	GetSddcValidation(params *GetSddcValidationParams, opts ...ClientOption) (*GetSddcValidationOK, error)

	RetrieveAllSddcs(params *RetrieveAllSddcsParams, opts ...ClientOption) (*RetrieveAllSddcsOK, error)

	RetrieveSDDC(params *RetrieveSDDCParams, opts ...ClientOption) (*RetrieveSDDCOK, error)

	RetrySddc(params *RetrySddcParams, opts ...ClientOption) (*RetrySddcOK, *RetrySddcAccepted, error)

	RetrySddcValidation(params *RetrySddcValidationParams, opts ...ClientOption) (*RetrySddcValidationOK, error)

	ValidateSddcSpec(params *ValidateSddcSpecParams, opts ...ClientOption) (*ValidateSddcSpecOK, *ValidateSddcSpecAccepted, error)

	SetTransport(transport runtime.ClientTransport)
}

/*
ConvertToJSONSpec converts s d d c specification Json excel file

SDDC specification incorporates all the client inputs regarding VMW component parameters constituting the SDDC: NTP, DNS spec, ESXi, VC, VSAN, NSX spec et al.
*/
func (a *Client) ConvertToJSONSpec(params *ConvertToJSONSpecParams, opts ...ClientOption) (*ConvertToJSONSpecOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewConvertToJSONSpecParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "convertToJsonSpec",
		Method:             "POST",
		PathPattern:        "/v1/system/sddc-spec-converter",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"multipart/form-data"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &ConvertToJSONSpecReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*ConvertToJSONSpecOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for convertToJsonSpec: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
CreateSddc creates s d d c
*/
func (a *Client) CreateSddc(params *CreateSddcParams, opts ...ClientOption) (*CreateSddcOK, *CreateSddcAccepted, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewCreateSddcParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "createSddc",
		Method:             "POST",
		PathPattern:        "/v1/sddcs",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &CreateSddcReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, nil, err
	}
	switch value := result.(type) {
	case *CreateSddcOK:
		return value, nil, nil
	case *CreateSddcAccepted:
		return nil, value, nil
	}
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for s_d_d_c: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
GetAllSddcValidations gets all s d d c specification validations
*/
func (a *Client) GetAllSddcValidations(params *GetAllSddcValidationsParams, opts ...ClientOption) (*GetAllSddcValidationsOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetAllSddcValidationsParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "getAllSddcValidations",
		Method:             "GET",
		PathPattern:        "/v1/sddcs/validations",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GetAllSddcValidationsReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetAllSddcValidationsOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for getAllSddcValidations: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
GetBringupDetailReport gets s d d c report by ID

Returns the bringup report. Reports are generated in PDF and CSV formats.
*/
func (a *Client) GetBringupDetailReport(params *GetBringupDetailReportParams, opts ...ClientOption) (*GetBringupDetailReportOK, *GetBringupDetailReportNoContent, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetBringupDetailReportParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "getBringupDetailReport",
		Method:             "GET",
		PathPattern:        "/v1/sddcs/{id}/detail-report",
		ProducesMediaTypes: []string{"application/pdf", "text/csv"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GetBringupDetailReportReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, nil, err
	}
	switch value := result.(type) {
	case *GetBringupDetailReportOK:
		return value, nil, nil
	case *GetBringupDetailReportNoContent:
		return nil, value, nil
	}
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for s_d_d_c: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
GetBringupInfo gets bringup info

GET Method to retrieve information about Bringup app
*/
func (a *Client) GetBringupInfo(params *GetBringupInfoParams, opts ...ClientOption) (*GetBringupInfoOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetBringupInfoParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "getBringupInfo",
		Method:             "GET",
		PathPattern:        "/v1/sddcs/about",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GetBringupInfoReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetBringupInfoOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for getBringupInfo: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
GetBringupValidationReport gets validation report by ID

Returns the bringup report for a validation. Reports are generated in PDF format.
*/
func (a *Client) GetBringupValidationReport(params *GetBringupValidationReportParams, opts ...ClientOption) (*GetBringupValidationReportOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetBringupValidationReportParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "getBringupValidationReport",
		Method:             "GET",
		PathPattern:        "/v1/sddcs/validations/{validationId}/report",
		ProducesMediaTypes: []string{"application/pdf"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GetBringupValidationReportReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetBringupValidationReportOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for getBringupValidationReport: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
GetSddcManagerInfo retrieves s d d c manager VM details

Retrieves the details of SDDC Manager VM
*/
func (a *Client) GetSddcManagerInfo(params *GetSddcManagerInfoParams, opts ...ClientOption) (*GetSddcManagerInfoOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetSddcManagerInfoParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "getSddcManagerInfo",
		Method:             "GET",
		PathPattern:        "/v1/sddcs/{id}/sddc-manager",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GetSddcManagerInfoReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetSddcManagerInfoOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for getSddcManagerInfo: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
GetSddcValidation gets s d d c specification validation status by ID
*/
func (a *Client) GetSddcValidation(params *GetSddcValidationParams, opts ...ClientOption) (*GetSddcValidationOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetSddcValidationParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "getSddcValidation",
		Method:             "GET",
		PathPattern:        "/v1/sddcs/validations/{id}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GetSddcValidationReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetSddcValidationOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for getSddcValidation: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
RetrieveAllSddcs retrieves all s d d cs
*/
func (a *Client) RetrieveAllSddcs(params *RetrieveAllSddcsParams, opts ...ClientOption) (*RetrieveAllSddcsOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewRetrieveAllSddcsParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "retrieveAllSddcs",
		Method:             "GET",
		PathPattern:        "/v1/sddcs",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &RetrieveAllSddcsReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*RetrieveAllSddcsOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for retrieveAllSddcs: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
RetrieveSDDC retrieves a s d d c
*/
func (a *Client) RetrieveSDDC(params *RetrieveSDDCParams, opts ...ClientOption) (*RetrieveSDDCOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewRetrieveSDDCParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "retrieveSDDC",
		Method:             "GET",
		PathPattern:        "/v1/sddcs/{id}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &RetrieveSDDCReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*RetrieveSDDCOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for retrieveSDDC: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
RetrySddc retries failed s d d c creation
*/
func (a *Client) RetrySddc(params *RetrySddcParams, opts ...ClientOption) (*RetrySddcOK, *RetrySddcAccepted, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewRetrySddcParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "retrySddc",
		Method:             "PATCH",
		PathPattern:        "/v1/sddcs/{id}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &RetrySddcReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, nil, err
	}
	switch value := result.(type) {
	case *RetrySddcOK:
		return value, nil, nil
	case *RetrySddcAccepted:
		return nil, value, nil
	}
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for s_d_d_c: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
RetrySddcValidation retries s d d c validation

Retry a completed SDDC validation
*/
func (a *Client) RetrySddcValidation(params *RetrySddcValidationParams, opts ...ClientOption) (*RetrySddcValidationOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewRetrySddcValidationParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "retrySddcValidation",
		Method:             "PATCH",
		PathPattern:        "/v1/sddcs/validations/{id}",
		ProducesMediaTypes: []string{"*/*"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &RetrySddcValidationReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*RetrySddcValidationOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for retrySddcValidation: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
ValidateSddcSpec validates s d d c specification before creation

SDDC specification incorporates all the client inputs regarding VMW component parameters constituting the SDDC: NTP, DNS spec, ESXi, VC, VSAN, NSX spec et al.
*/
func (a *Client) ValidateSddcSpec(params *ValidateSddcSpecParams, opts ...ClientOption) (*ValidateSddcSpecOK, *ValidateSddcSpecAccepted, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewValidateSddcSpecParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "validateSddcSpec",
		Method:             "POST",
		PathPattern:        "/v1/sddcs/validations",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &ValidateSddcSpecReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, nil, err
	}
	switch value := result.(type) {
	case *ValidateSddcSpecOK:
		return value, nil, nil
	case *ValidateSddcSpecAccepted:
		return nil, value, nil
	}
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for s_d_d_c: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

// SetTransport changes the transport on the client
func (a *Client) SetTransport(transport runtime.ClientTransport) {
	a.transport = transport
}
