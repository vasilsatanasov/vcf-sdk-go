// Code generated by go-swagger; DO NOT EDIT.

// Copyright Â© 2023 VMware, Inc. All Rights Reserved.
// Code licenced under: BSD-2

package sos

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"

	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"
)

// New creates a new sos API client.
func New(transport runtime.ClientTransport, formats strfmt.Registry) ClientService {
	return &Client{transport: transport, formats: formats}
}

/*
Client for sos API
*/
type Client struct {
	transport runtime.ClientTransport
	formats   strfmt.Registry
}

// ClientOption is the option for Client methods
type ClientOption func(*runtime.ClientOperation)

// ClientService is the interface for Client methods
type ClientService interface {
	Gethealthsummary(params *GethealthsummaryParams, opts ...ClientOption) (*GethealthsummaryOK, error)

	Gethealthsummarytasks(params *GethealthsummarytasksParams, opts ...ClientOption) (*GethealthsummarytasksOK, error)

	GetsupportBundle(params *GetsupportBundleParams, opts ...ClientOption) (*GetsupportBundleOK, error)

	GetsupportBundleTasks(params *GetsupportBundleTasksParams, opts ...ClientOption) (*GetsupportBundleTasksOK, error)

	HealthSummary(params *HealthSummaryParams, opts ...ClientOption) (*HealthSummaryOK, *HealthSummaryAccepted, error)

	Healthsummarydata(params *HealthsummarydataParams, opts ...ClientOption) (*HealthsummarydataOK, error)

	SupportBundledata(params *SupportBundledataParams, opts ...ClientOption) (*SupportBundledataOK, error)

	Supportbundles(params *SupportbundlesParams, opts ...ClientOption) (*SupportbundlesOK, *SupportbundlesAccepted, error)

	SetTransport(transport runtime.ClientTransport)
}

/*
Gethealthsummary fetches the progress of a health summary task
*/
func (a *Client) Gethealthsummary(params *GethealthsummaryParams, opts ...ClientOption) (*GethealthsummaryOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGethealthsummaryParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "gethealthsummary",
		Method:             "GET",
		PathPattern:        "/v1/system/health-summary/{id}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GethealthsummaryReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GethealthsummaryOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for gethealthsummary: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
Gethealthsummarytasks fetches all health summary tasks
*/
func (a *Client) Gethealthsummarytasks(params *GethealthsummarytasksParams, opts ...ClientOption) (*GethealthsummarytasksOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGethealthsummarytasksParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "gethealthsummarytasks",
		Method:             "GET",
		PathPattern:        "/v1/system/health-summary",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GethealthsummarytasksReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GethealthsummarytasksOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for gethealthsummarytasks: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
GetsupportBundle fetches the progress of support bundle task
*/
func (a *Client) GetsupportBundle(params *GetsupportBundleParams, opts ...ClientOption) (*GetsupportBundleOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetsupportBundleParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "getsupportBundle",
		Method:             "GET",
		PathPattern:        "/v1/system/support-bundles/{id}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GetsupportBundleReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetsupportBundleOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for getsupportBundle: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
GetsupportBundleTasks fetches all support bundle tasks
*/
func (a *Client) GetsupportBundleTasks(params *GetsupportBundleTasksParams, opts ...ClientOption) (*GetsupportBundleTasksOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetsupportBundleTasksParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "getsupportBundleTasks",
		Method:             "GET",
		PathPattern:        "/v1/system/support-bundles",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GetsupportBundleTasksReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetsupportBundleTasksOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for getsupportBundleTasks: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
HealthSummary initiates health summary checks
*/
func (a *Client) HealthSummary(params *HealthSummaryParams, opts ...ClientOption) (*HealthSummaryOK, *HealthSummaryAccepted, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewHealthSummaryParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "health-summary",
		Method:             "POST",
		PathPattern:        "/v1/system/health-summary",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &HealthSummaryReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, nil, err
	}
	switch value := result.(type) {
	case *HealthSummaryOK:
		return value, nil, nil
	case *HealthSummaryAccepted:
		return nil, value, nil
	}
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for sos: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
Healthsummarydata downloads health summary bundle
*/
func (a *Client) Healthsummarydata(params *HealthsummarydataParams, opts ...ClientOption) (*HealthsummarydataOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewHealthsummarydataParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "healthsummarydata",
		Method:             "GET",
		PathPattern:        "/v1/system/health-summary/{id}/data",
		ProducesMediaTypes: []string{"application/octet-stream"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &HealthsummarydataReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*HealthsummarydataOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for healthsummarydata: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
SupportBundledata downloads support bundles
*/
func (a *Client) SupportBundledata(params *SupportBundledataParams, opts ...ClientOption) (*SupportBundledataOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewSupportBundledataParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "supportBundledata",
		Method:             "GET",
		PathPattern:        "/v1/system/support-bundles/{id}/data",
		ProducesMediaTypes: []string{"application/octet-stream"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &SupportBundledataReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*SupportBundledataOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for supportBundledata: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
Supportbundles initiates support bundle download
*/
func (a *Client) Supportbundles(params *SupportbundlesParams, opts ...ClientOption) (*SupportbundlesOK, *SupportbundlesAccepted, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewSupportbundlesParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "supportbundles",
		Method:             "POST",
		PathPattern:        "/v1/system/support-bundles",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &SupportbundlesReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, nil, err
	}
	switch value := result.(type) {
	case *SupportbundlesOK:
		return value, nil, nil
	case *SupportbundlesAccepted:
		return nil, value, nil
	}
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for sos: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

// SetTransport changes the transport on the client
func (a *Client) SetTransport(transport runtime.ClientTransport) {
	a.transport = transport
}
