// Code generated by go-swagger; DO NOT EDIT.

// Copyright Â© 2023 VMware, Inc. All Rights Reserved.
// Code licenced under: BSD-2

package sos

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"
	"io"

	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"

	"vcf-sdk-go/models"
)

// SupportBundledataReader is a Reader for the SupportBundledata structure.
type SupportBundledataReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *SupportBundledataReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {
	case 200:
		result := NewSupportBundledataOK()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil
	case 400:
		result := NewSupportBundledataBadRequest()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 401:
		result := NewSupportBundledataUnauthorized()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 404:
		result := NewSupportBundledataNotFound()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 500:
		result := NewSupportBundledataInternalServerError()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	default:
		return nil, runtime.NewAPIError("response status code does not match any response statuses defined for this endpoint in the swagger spec", response, response.Code())
	}
}

// NewSupportBundledataOK creates a SupportBundledataOK with default headers values
func NewSupportBundledataOK() *SupportBundledataOK {
	return &SupportBundledataOK{}
}

/*
SupportBundledataOK describes a response with status code 200, with default header values.

Ok
*/
type SupportBundledataOK struct {
	Payload strfmt.Base64
}

// IsSuccess returns true when this support bundledata o k response has a 2xx status code
func (o *SupportBundledataOK) IsSuccess() bool {
	return true
}

// IsRedirect returns true when this support bundledata o k response has a 3xx status code
func (o *SupportBundledataOK) IsRedirect() bool {
	return false
}

// IsClientError returns true when this support bundledata o k response has a 4xx status code
func (o *SupportBundledataOK) IsClientError() bool {
	return false
}

// IsServerError returns true when this support bundledata o k response has a 5xx status code
func (o *SupportBundledataOK) IsServerError() bool {
	return false
}

// IsCode returns true when this support bundledata o k response a status code equal to that given
func (o *SupportBundledataOK) IsCode(code int) bool {
	return code == 200
}

func (o *SupportBundledataOK) Error() string {
	return fmt.Sprintf("[GET /v1/system/support-bundles/{id}/data][%d] supportBundledataOK  %+v", 200, o.Payload)
}

func (o *SupportBundledataOK) String() string {
	return fmt.Sprintf("[GET /v1/system/support-bundles/{id}/data][%d] supportBundledataOK  %+v", 200, o.Payload)
}

func (o *SupportBundledataOK) GetPayload() strfmt.Base64 {
	return o.Payload
}

func (o *SupportBundledataOK) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// response payload
	if err := consumer.Consume(response.Body(), &o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewSupportBundledataBadRequest creates a SupportBundledataBadRequest with default headers values
func NewSupportBundledataBadRequest() *SupportBundledataBadRequest {
	return &SupportBundledataBadRequest{}
}

/*
SupportBundledataBadRequest describes a response with status code 400, with default header values.

Bad request! Invalid Headers or Data. Error: {error}
*/
type SupportBundledataBadRequest struct {
	Payload *models.Error
}

// IsSuccess returns true when this support bundledata bad request response has a 2xx status code
func (o *SupportBundledataBadRequest) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this support bundledata bad request response has a 3xx status code
func (o *SupportBundledataBadRequest) IsRedirect() bool {
	return false
}

// IsClientError returns true when this support bundledata bad request response has a 4xx status code
func (o *SupportBundledataBadRequest) IsClientError() bool {
	return true
}

// IsServerError returns true when this support bundledata bad request response has a 5xx status code
func (o *SupportBundledataBadRequest) IsServerError() bool {
	return false
}

// IsCode returns true when this support bundledata bad request response a status code equal to that given
func (o *SupportBundledataBadRequest) IsCode(code int) bool {
	return code == 400
}

func (o *SupportBundledataBadRequest) Error() string {
	return fmt.Sprintf("[GET /v1/system/support-bundles/{id}/data][%d] supportBundledataBadRequest  %+v", 400, o.Payload)
}

func (o *SupportBundledataBadRequest) String() string {
	return fmt.Sprintf("[GET /v1/system/support-bundles/{id}/data][%d] supportBundledataBadRequest  %+v", 400, o.Payload)
}

func (o *SupportBundledataBadRequest) GetPayload() *models.Error {
	return o.Payload
}

func (o *SupportBundledataBadRequest) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.Error)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewSupportBundledataUnauthorized creates a SupportBundledataUnauthorized with default headers values
func NewSupportBundledataUnauthorized() *SupportBundledataUnauthorized {
	return &SupportBundledataUnauthorized{}
}

/*
SupportBundledataUnauthorized describes a response with status code 401, with default header values.

Bad request! Authorization Header is missing or not in correct format.
*/
type SupportBundledataUnauthorized struct {
	Payload *models.Error
}

// IsSuccess returns true when this support bundledata unauthorized response has a 2xx status code
func (o *SupportBundledataUnauthorized) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this support bundledata unauthorized response has a 3xx status code
func (o *SupportBundledataUnauthorized) IsRedirect() bool {
	return false
}

// IsClientError returns true when this support bundledata unauthorized response has a 4xx status code
func (o *SupportBundledataUnauthorized) IsClientError() bool {
	return true
}

// IsServerError returns true when this support bundledata unauthorized response has a 5xx status code
func (o *SupportBundledataUnauthorized) IsServerError() bool {
	return false
}

// IsCode returns true when this support bundledata unauthorized response a status code equal to that given
func (o *SupportBundledataUnauthorized) IsCode(code int) bool {
	return code == 401
}

func (o *SupportBundledataUnauthorized) Error() string {
	return fmt.Sprintf("[GET /v1/system/support-bundles/{id}/data][%d] supportBundledataUnauthorized  %+v", 401, o.Payload)
}

func (o *SupportBundledataUnauthorized) String() string {
	return fmt.Sprintf("[GET /v1/system/support-bundles/{id}/data][%d] supportBundledataUnauthorized  %+v", 401, o.Payload)
}

func (o *SupportBundledataUnauthorized) GetPayload() *models.Error {
	return o.Payload
}

func (o *SupportBundledataUnauthorized) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.Error)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewSupportBundledataNotFound creates a SupportBundledataNotFound with default headers values
func NewSupportBundledataNotFound() *SupportBundledataNotFound {
	return &SupportBundledataNotFound{}
}

/*
SupportBundledataNotFound describes a response with status code 404, with default header values.

Bundle not found or not available for download. Id:{id}
*/
type SupportBundledataNotFound struct {
	Payload *models.Error
}

// IsSuccess returns true when this support bundledata not found response has a 2xx status code
func (o *SupportBundledataNotFound) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this support bundledata not found response has a 3xx status code
func (o *SupportBundledataNotFound) IsRedirect() bool {
	return false
}

// IsClientError returns true when this support bundledata not found response has a 4xx status code
func (o *SupportBundledataNotFound) IsClientError() bool {
	return true
}

// IsServerError returns true when this support bundledata not found response has a 5xx status code
func (o *SupportBundledataNotFound) IsServerError() bool {
	return false
}

// IsCode returns true when this support bundledata not found response a status code equal to that given
func (o *SupportBundledataNotFound) IsCode(code int) bool {
	return code == 404
}

func (o *SupportBundledataNotFound) Error() string {
	return fmt.Sprintf("[GET /v1/system/support-bundles/{id}/data][%d] supportBundledataNotFound  %+v", 404, o.Payload)
}

func (o *SupportBundledataNotFound) String() string {
	return fmt.Sprintf("[GET /v1/system/support-bundles/{id}/data][%d] supportBundledataNotFound  %+v", 404, o.Payload)
}

func (o *SupportBundledataNotFound) GetPayload() *models.Error {
	return o.Payload
}

func (o *SupportBundledataNotFound) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.Error)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewSupportBundledataInternalServerError creates a SupportBundledataInternalServerError with default headers values
func NewSupportBundledataInternalServerError() *SupportBundledataInternalServerError {
	return &SupportBundledataInternalServerError{}
}

/*
SupportBundledataInternalServerError describes a response with status code 500, with default header values.

Something went wrong. Internal server error occurred. Error {error}
*/
type SupportBundledataInternalServerError struct {
	Payload *models.Error
}

// IsSuccess returns true when this support bundledata internal server error response has a 2xx status code
func (o *SupportBundledataInternalServerError) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this support bundledata internal server error response has a 3xx status code
func (o *SupportBundledataInternalServerError) IsRedirect() bool {
	return false
}

// IsClientError returns true when this support bundledata internal server error response has a 4xx status code
func (o *SupportBundledataInternalServerError) IsClientError() bool {
	return false
}

// IsServerError returns true when this support bundledata internal server error response has a 5xx status code
func (o *SupportBundledataInternalServerError) IsServerError() bool {
	return true
}

// IsCode returns true when this support bundledata internal server error response a status code equal to that given
func (o *SupportBundledataInternalServerError) IsCode(code int) bool {
	return code == 500
}

func (o *SupportBundledataInternalServerError) Error() string {
	return fmt.Sprintf("[GET /v1/system/support-bundles/{id}/data][%d] supportBundledataInternalServerError  %+v", 500, o.Payload)
}

func (o *SupportBundledataInternalServerError) String() string {
	return fmt.Sprintf("[GET /v1/system/support-bundles/{id}/data][%d] supportBundledataInternalServerError  %+v", 500, o.Payload)
}

func (o *SupportBundledataInternalServerError) GetPayload() *models.Error {
	return o.Payload
}

func (o *SupportBundledataInternalServerError) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.Error)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}
