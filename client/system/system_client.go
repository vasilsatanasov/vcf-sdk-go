// Code generated by go-swagger; DO NOT EDIT.

// Copyright 2023 VMware, Inc.
// SPDX-License-Identifier: BSD-2-Clause

package system

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"

	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"
)

// New creates a new system API client.
func New(transport runtime.ClientTransport, formats strfmt.Registry) ClientService {
	return &Client{transport: transport, formats: formats}
}

/*
Client for system API
*/
type Client struct {
	transport runtime.ClientTransport
	formats   strfmt.Registry
}

// ClientOption is the option for Client methods
type ClientOption func(*runtime.ClientOperation)

// ClientService is the interface for Client methods
type ClientService interface {
	ConfigureDNS(params *ConfigureDNSParams, opts ...ClientOption) (*ConfigureDNSOK, *ConfigureDNSAccepted, error)

	ConfigureNtp(params *ConfigureNtpParams, opts ...ClientOption) (*ConfigureNtpOK, *ConfigureNtpAccepted, error)

	GETDNSConfiguration(params *GETDNSConfigurationParams, opts ...ClientOption) (*GETDNSConfigurationOK, error)

	GETNtpConfiguration(params *GETNtpConfigurationParams, opts ...ClientOption) (*GETNtpConfigurationOK, error)

	GETSystem(params *GETSystemParams, opts ...ClientOption) (*GETSystemOK, error)

	GETValidationOfDNSConfiguration(params *GETValidationOfDNSConfigurationParams, opts ...ClientOption) (*GETValidationOfDNSConfigurationOK, error)

	GETValidationOfNtpConfiguration(params *GETValidationOfNtpConfigurationParams, opts ...ClientOption) (*GETValidationOfNtpConfigurationOK, error)

	GETValidationsOfDNSConfiguration(params *GETValidationsOfDNSConfigurationParams, opts ...ClientOption) (*GETValidationsOfDNSConfigurationOK, error)

	GETValidationsOfNtpConfiguration(params *GETValidationsOfNtpConfigurationParams, opts ...ClientOption) (*GETValidationsOfNtpConfigurationOK, error)

	ValidateDNSConfiguration(params *ValidateDNSConfigurationParams, opts ...ClientOption) (*ValidateDNSConfigurationOK, *ValidateDNSConfigurationAccepted, error)

	ValidateNtpConfiguration(params *ValidateNtpConfigurationParams, opts ...ClientOption) (*ValidateNtpConfigurationOK, *ValidateNtpConfigurationAccepted, error)

	SetTransport(transport runtime.ClientTransport)
}

/*
ConfigureDNS configures the Dns server
*/
func (a *Client) ConfigureDNS(params *ConfigureDNSParams, opts ...ClientOption) (*ConfigureDNSOK, *ConfigureDNSAccepted, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewConfigureDNSParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "configureDns",
		Method:             "PUT",
		PathPattern:        "/v1/system/dns-configuration",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &ConfigureDNSReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, nil, err
	}
	switch value := result.(type) {
	case *ConfigureDNSOK:
		return value, nil, nil
	case *ConfigureDNSAccepted:
		return nil, value, nil
	}
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for system: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
ConfigureNtp configures the ntp server
*/
func (a *Client) ConfigureNtp(params *ConfigureNtpParams, opts ...ClientOption) (*ConfigureNtpOK, *ConfigureNtpAccepted, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewConfigureNtpParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "configureNtp",
		Method:             "PUT",
		PathPattern:        "/v1/system/ntp-configuration",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &ConfigureNtpReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, nil, err
	}
	switch value := result.(type) {
	case *ConfigureNtpOK:
		return value, nil, nil
	case *ConfigureNtpAccepted:
		return nil, value, nil
	}
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for system: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
GETDNSConfiguration Gets the current Dns configuration
*/
func (a *Client) GETDNSConfiguration(params *GETDNSConfigurationParams, opts ...ClientOption) (*GETDNSConfigurationOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGETDNSConfigurationParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "getDnsConfiguration",
		Method:             "GET",
		PathPattern:        "/v1/system/dns-configuration",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GETDNSConfigurationReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GETDNSConfigurationOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for getDnsConfiguration: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
GETNtpConfiguration Gets the current ntp configuration
*/
func (a *Client) GETNtpConfiguration(params *GETNtpConfigurationParams, opts ...ClientOption) (*GETNtpConfigurationOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGETNtpConfigurationParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "getNtpConfiguration",
		Method:             "GET",
		PathPattern:        "/v1/system/ntp-configuration",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GETNtpConfigurationReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GETNtpConfigurationOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for getNtpConfiguration: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
GETSystem Gets the system

Get the system
*/
func (a *Client) GETSystem(params *GETSystemParams, opts ...ClientOption) (*GETSystemOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGETSystemParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "getSystem",
		Method:             "GET",
		PathPattern:        "/v1/system",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GETSystemReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GETSystemOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for getSystem: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
GETValidationOfDNSConfiguration Gets the status of the validation of the input Dns configuration
*/
func (a *Client) GETValidationOfDNSConfiguration(params *GETValidationOfDNSConfigurationParams, opts ...ClientOption) (*GETValidationOfDNSConfigurationOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGETValidationOfDNSConfigurationParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "getValidationOfDnsConfiguration",
		Method:             "GET",
		PathPattern:        "/v1/system/dns-configuration/validations/{id}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GETValidationOfDNSConfigurationReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GETValidationOfDNSConfigurationOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for getValidationOfDnsConfiguration: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
GETValidationOfNtpConfiguration Gets the status of the validation of the input ntp servers to configure new ntp server
*/
func (a *Client) GETValidationOfNtpConfiguration(params *GETValidationOfNtpConfigurationParams, opts ...ClientOption) (*GETValidationOfNtpConfigurationOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGETValidationOfNtpConfigurationParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "getValidationOfNtpConfiguration",
		Method:             "GET",
		PathPattern:        "/v1/system/ntp-configuration/validations/{id}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GETValidationOfNtpConfigurationReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GETValidationOfNtpConfigurationOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for getValidationOfNtpConfiguration: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
GETValidationsOfDNSConfiguration Gets the validations of the input dns servers to configure new DNS server
*/
func (a *Client) GETValidationsOfDNSConfiguration(params *GETValidationsOfDNSConfigurationParams, opts ...ClientOption) (*GETValidationsOfDNSConfigurationOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGETValidationsOfDNSConfigurationParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "getValidationsOfDNSConfiguration",
		Method:             "GET",
		PathPattern:        "/v1/system/dns-configuration/validations",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GETValidationsOfDNSConfigurationReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GETValidationsOfDNSConfigurationOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for getValidationsOfDNSConfiguration: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
GETValidationsOfNtpConfiguration Gets the validations of the input ntp servers to configure new ntp server
*/
func (a *Client) GETValidationsOfNtpConfiguration(params *GETValidationsOfNtpConfigurationParams, opts ...ClientOption) (*GETValidationsOfNtpConfigurationOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGETValidationsOfNtpConfigurationParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "getValidationsOfNtpConfiguration",
		Method:             "GET",
		PathPattern:        "/v1/system/ntp-configuration/validations",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GETValidationsOfNtpConfigurationReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GETValidationsOfNtpConfigurationOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for getValidationsOfNtpConfiguration: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
ValidateDNSConfiguration validates Dns configuration input spec and system health before DNS configuration
*/
func (a *Client) ValidateDNSConfiguration(params *ValidateDNSConfigurationParams, opts ...ClientOption) (*ValidateDNSConfigurationOK, *ValidateDNSConfigurationAccepted, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewValidateDNSConfigurationParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "validateDnsConfiguration",
		Method:             "POST",
		PathPattern:        "/v1/system/dns-configuration/validations",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &ValidateDNSConfigurationReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, nil, err
	}
	switch value := result.(type) {
	case *ValidateDNSConfigurationOK:
		return value, nil, nil
	case *ValidateDNSConfigurationAccepted:
		return nil, value, nil
	}
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for system: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
ValidateNtpConfiguration validates ntp configuration input spec and system health before ntp configuration
*/
func (a *Client) ValidateNtpConfiguration(params *ValidateNtpConfigurationParams, opts ...ClientOption) (*ValidateNtpConfigurationOK, *ValidateNtpConfigurationAccepted, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewValidateNtpConfigurationParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "validateNtpConfiguration",
		Method:             "POST",
		PathPattern:        "/v1/system/ntp-configuration/validations",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &ValidateNtpConfigurationReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, nil, err
	}
	switch value := result.(type) {
	case *ValidateNtpConfigurationOK:
		return value, nil, nil
	case *ValidateNtpConfigurationAccepted:
		return nil, value, nil
	}
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for system: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

// SetTransport changes the transport on the client
func (a *Client) SetTransport(transport runtime.ClientTransport) {
	a.transport = transport
}
