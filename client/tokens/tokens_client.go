// Code generated by go-swagger; DO NOT EDIT.

package tokens

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"

	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"
)

// New creates a new tokens API client.
func New(transport runtime.ClientTransport, formats strfmt.Registry) ClientService {
	return &Client{transport: transport, formats: formats}
}

/*
Client for tokens API
*/
type Client struct {
	transport runtime.ClientTransport
	formats   strfmt.Registry
}

// ClientOption is the option for Client methods
type ClientOption func(*runtime.ClientOperation)

// ClientService is the interface for Client methods
type ClientService interface {
	CreateToken(params *CreateTokenParams, opts ...ClientOption) (*CreateTokenOK, *CreateTokenCreated, error)

	InvalidateRefreshToken(params *InvalidateRefreshTokenParams, opts ...ClientOption) (*InvalidateRefreshTokenNoContent, error)

	RefreshAccessToken(params *RefreshAccessTokenParams, opts ...ClientOption) (*RefreshAccessTokenOK, error)

	SetTransport(transport runtime.ClientTransport)
}

/*
CreateToken creates token pair

Creates access token and refresh token for user access
*/
func (a *Client) CreateToken(params *CreateTokenParams, opts ...ClientOption) (*CreateTokenOK, *CreateTokenCreated, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewCreateTokenParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "createToken",
		Method:             "POST",
		PathPattern:        "/v1/tokens",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &CreateTokenReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, nil, err
	}
	switch value := result.(type) {
	case *CreateTokenOK:
		return value, nil, nil
	case *CreateTokenCreated:
		return nil, value, nil
	}
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for tokens: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
InvalidateRefreshToken invalidates refresh token

Invalidate the provided refresh token
*/
func (a *Client) InvalidateRefreshToken(params *InvalidateRefreshTokenParams, opts ...ClientOption) (*InvalidateRefreshTokenNoContent, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewInvalidateRefreshTokenParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "invalidateRefreshToken",
		Method:             "DELETE",
		PathPattern:        "/v1/tokens/refresh-token",
		ProducesMediaTypes: []string{"*/*"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &InvalidateRefreshTokenReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*InvalidateRefreshTokenNoContent)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for invalidateRefreshToken: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
RefreshAccessToken refreshes access token

Refresh the access token associated with the given refresh token
*/
func (a *Client) RefreshAccessToken(params *RefreshAccessTokenParams, opts ...ClientOption) (*RefreshAccessTokenOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewRefreshAccessTokenParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "refreshAccessToken",
		Method:             "PATCH",
		PathPattern:        "/v1/tokens/access-token/refresh",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &RefreshAccessTokenReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*RefreshAccessTokenOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for refreshAccessToken: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

// SetTransport changes the transport on the client
func (a *Client) SetTransport(transport runtime.ClientTransport) {
	a.transport = transport
}
