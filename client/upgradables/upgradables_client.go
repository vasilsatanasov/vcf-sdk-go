// Code generated by go-swagger; DO NOT EDIT.

// Copyright 2023 VMware, Inc.
// SPDX-License-Identifier: BSD-2-Clause

package upgradables

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"

	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"
)

// New creates a new upgradables API client.
func New(transport runtime.ClientTransport, formats strfmt.Registry) ClientService {
	return &Client{transport: transport, formats: formats}
}

/*
Client for upgradables API
*/
type Client struct {
	transport runtime.ClientTransport
	formats   strfmt.Registry
}

// ClientOption is the option for Client methods
type ClientOption func(*runtime.ClientOperation)

// ClientService is the interface for Client methods
type ClientService interface {
	GETNSXTUpgradeResources(params *GETNSXTUpgradeResourcesParams, opts ...ClientOption) (*GETNSXTUpgradeResourcesOK, error)

	GETUpgradables(params *GETUpgradablesParams, opts ...ClientOption) (*GETUpgradablesOK, error)

	GETUpgradablesByDomain(params *GETUpgradablesByDomainParams, opts ...ClientOption) (*GETUpgradablesByDomainOK, error)

	GETUpgradablesClusters(params *GETUpgradablesClustersParams, opts ...ClientOption) (*GETUpgradablesClustersOK, error)

	SetTransport(transport runtime.ClientTransport)
}

/*
GETNSXTUpgradeResources Gets NSXT upgradable resources

Get the list NSXT upgradable reosurce with resource metadata info
*/
func (a *Client) GETNSXTUpgradeResources(params *GETNSXTUpgradeResourcesParams, opts ...ClientOption) (*GETNSXTUpgradeResourcesOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGETNSXTUpgradeResourcesParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "getNsxtUpgradeResources",
		Method:             "GET",
		PathPattern:        "/v1/upgradables/domains/{domainId}/nsxt",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GETNSXTUpgradeResourcesReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GETNSXTUpgradeResourcesOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for getNsxtUpgradeResources: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
GETUpgradables Gets the upgradables

Fetches the list of Upgradables in the System. Only one Upgradable becomes AVAILABLE for Upgrade. The Upgradables provides information that can be use for Precheck API and also in the actual Upgrade API call.
*/
func (a *Client) GETUpgradables(params *GETUpgradablesParams, opts ...ClientOption) (*GETUpgradablesOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGETUpgradablesParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "getUpgradables",
		Method:             "GET",
		PathPattern:        "/v1/system/upgradables",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GETUpgradablesReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GETUpgradablesOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for getUpgradables: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
GETUpgradablesByDomain Gets the upgradables

Fetches the list of Upgradables for a given domain. If a target version is provided, Upgradables that are required for given target version become Available. The Upgradables providesinformation that can be use for Precheck API and also in the actual Upgrade API call.This API is used only for management domain, for all cases please use v1/system/upgradables.
*/
func (a *Client) GETUpgradablesByDomain(params *GETUpgradablesByDomainParams, opts ...ClientOption) (*GETUpgradablesByDomainOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGETUpgradablesByDomainParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "getUpgradablesByDomain",
		Method:             "GET",
		PathPattern:        "/v1/upgradables/domains/{domainId}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GETUpgradablesByDomainReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GETUpgradablesByDomainOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for getUpgradablesByDomain: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
GETUpgradablesClusters Gets registered and available h s m details along with software details

Fetches the list of available hardware support managers and configured hardware support managers for the give resource along with the hardware support packages and Software details.
*/
func (a *Client) GETUpgradablesClusters(params *GETUpgradablesClustersParams, opts ...ClientOption) (*GETUpgradablesClustersOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGETUpgradablesClustersParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "getUpgradablesClusters",
		Method:             "GET",
		PathPattern:        "/v1/upgradables/domains/{domainId}/clusters",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GETUpgradablesClustersReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GETUpgradablesClustersOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for getUpgradablesClusters: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

// SetTransport changes the transport on the client
func (a *Client) SetTransport(transport runtime.ClientTransport) {
	a.transport = transport
}
