// Code generated by go-swagger; DO NOT EDIT.

// Copyright Â© 2023 VMware, Inc. All Rights Reserved.
// Code licenced under: BSD-2

package upgrades

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"

	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"
)

// New creates a new upgrades API client.
func New(transport runtime.ClientTransport, formats strfmt.Registry) ClientService {
	return &Client{transport: transport, formats: formats}
}

/*
Client for upgrades API
*/
type Client struct {
	transport runtime.ClientTransport
	formats   strfmt.Registry
}

// ClientOption is the option for Client methods
type ClientOption func(*runtime.ClientOperation)

// ClientService is the interface for Client methods
type ClientService interface {
	CommitRescheduleUpgrade(params *CommitRescheduleUpgradeParams, opts ...ClientOption) (*CommitRescheduleUpgradeOK, error)

	GETPrecheckUsingGET(params *GETPrecheckUsingGETParams, opts ...ClientOption) (*GETPrecheckUsingGETOK, error)

	GETUpgradeByID(params *GETUpgradeByIDParams, opts ...ClientOption) (*GETUpgradeByIDOK, error)

	GETUpgrades(params *GETUpgradesParams, opts ...ClientOption) (*GETUpgradesOK, error)

	PerformPrechecksUsingPOST(params *PerformPrechecksUsingPOSTParams, opts ...ClientOption) (*PerformPrechecksUsingPOSTOK, *PerformPrechecksUsingPOSTAccepted, error)

	PerformUpgrade(params *PerformUpgradeParams, opts ...ClientOption) (*PerformUpgradeOK, *PerformUpgradeAccepted, error)

	SetTransport(transport runtime.ClientTransport)
}

/*
CommitRescheduleUpgrade commits reschedule upgrade

Commit/Reschedule an existing upgrade. It moves the upgrade from DRAFT state to SCHEDULED state and/or changes the upgrade scheduled date/time.
*/
func (a *Client) CommitRescheduleUpgrade(params *CommitRescheduleUpgradeParams, opts ...ClientOption) (*CommitRescheduleUpgradeOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewCommitRescheduleUpgradeParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "commitRescheduleUpgrade",
		Method:             "PATCH",
		PathPattern:        "/v1/upgrades/{upgradeId}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &CommitRescheduleUpgradeReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*CommitRescheduleUpgradeOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for commitRescheduleUpgrade: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
GETPrecheckUsingGET gets precheck
*/
func (a *Client) GETPrecheckUsingGET(params *GETPrecheckUsingGETParams, opts ...ClientOption) (*GETPrecheckUsingGETOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGETPrecheckUsingGETParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "getPrecheckUsingGET",
		Method:             "GET",
		PathPattern:        "/v1/upgrades/{upgradeId}/prechecks/{precheckId}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GETPrecheckUsingGETReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GETPrecheckUsingGETOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for getPrecheckUsingGET: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
GETUpgradeByID Gets upgrade by Id

Get Upgrade By Id
*/
func (a *Client) GETUpgradeByID(params *GETUpgradeByIDParams, opts ...ClientOption) (*GETUpgradeByIDOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGETUpgradeByIDParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "getUpgradeById",
		Method:             "GET",
		PathPattern:        "/v1/upgrades/{upgradeId}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GETUpgradeByIDReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GETUpgradeByIDOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for getUpgradeById: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
GETUpgrades Gets upgrades

Get Upgrades
*/
func (a *Client) GETUpgrades(params *GETUpgradesParams, opts ...ClientOption) (*GETUpgradesOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGETUpgradesParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "getUpgrades",
		Method:             "GET",
		PathPattern:        "/v1/upgrades",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GETUpgradesReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GETUpgradesOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for getUpgrades: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
PerformPrechecksUsingPOST performs prechecks
*/
func (a *Client) PerformPrechecksUsingPOST(params *PerformPrechecksUsingPOSTParams, opts ...ClientOption) (*PerformPrechecksUsingPOSTOK, *PerformPrechecksUsingPOSTAccepted, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewPerformPrechecksUsingPOSTParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "performPrechecksUsingPOST",
		Method:             "POST",
		PathPattern:        "/v1/upgrades/{upgradeId}/prechecks",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &PerformPrechecksUsingPOSTReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, nil, err
	}
	switch value := result.(type) {
	case *PerformPrechecksUsingPOSTOK:
		return value, nil, nil
	case *PerformPrechecksUsingPOSTAccepted:
		return nil, value, nil
	}
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for upgrades: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
PerformUpgrade performs upgrade

Schedule/Trigger Upgrade of a Resource. Ex: Resource can be DOMAIN, CLUSTER, UNMANAGED_HOST etc. Performing upgrades are supported on VMware Cloud Foundation 3.5 BOM resources and above.
*/
func (a *Client) PerformUpgrade(params *PerformUpgradeParams, opts ...ClientOption) (*PerformUpgradeOK, *PerformUpgradeAccepted, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewPerformUpgradeParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "performUpgrade",
		Method:             "POST",
		PathPattern:        "/v1/upgrades",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &PerformUpgradeReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, nil, err
	}
	switch value := result.(type) {
	case *PerformUpgradeOK:
		return value, nil, nil
	case *PerformUpgradeAccepted:
		return nil, value, nil
	}
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for upgrades: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

// SetTransport changes the transport on the client
func (a *Client) SetTransport(transport runtime.ClientTransport) {
	a.transport = transport
}
