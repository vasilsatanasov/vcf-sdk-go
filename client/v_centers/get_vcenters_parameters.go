// Code generated by go-swagger; DO NOT EDIT.

// Copyright Â© 2023 VMware, Inc. All Rights Reserved.
// Code licenced under: BSD-2

package v_centers

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"net/http"
	"time"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/runtime"
	cr "github.com/go-openapi/runtime/client"
	"github.com/go-openapi/strfmt"
)

// NewGETVCENTERSParams creates a new GETVCENTERSParams object,
// with the default timeout for this client.
//
// Default values are not hydrated, since defaults are normally applied by the API server side.
//
// To enforce default values in parameter, use SetDefaults or WithDefaults.
func NewGETVCENTERSParams() *GETVCENTERSParams {
	return &GETVCENTERSParams{
		timeout: cr.DefaultTimeout,
	}
}

// NewGETVCENTERSParamsWithTimeout creates a new GETVCENTERSParams object
// with the ability to set a timeout on a request.
func NewGETVCENTERSParamsWithTimeout(timeout time.Duration) *GETVCENTERSParams {
	return &GETVCENTERSParams{
		timeout: timeout,
	}
}

// NewGETVCENTERSParamsWithContext creates a new GETVCENTERSParams object
// with the ability to set a context for a request.
func NewGETVCENTERSParamsWithContext(ctx context.Context) *GETVCENTERSParams {
	return &GETVCENTERSParams{
		Context: ctx,
	}
}

// NewGETVCENTERSParamsWithHTTPClient creates a new GETVCENTERSParams object
// with the ability to set a custom HTTPClient for a request.
func NewGETVCENTERSParamsWithHTTPClient(client *http.Client) *GETVCENTERSParams {
	return &GETVCENTERSParams{
		HTTPClient: client,
	}
}

/*
GETVCENTERSParams contains all the parameters to send to the API endpoint

	for the get Vcenters operation.

	Typically these are written to a http.Request.
*/
type GETVCENTERSParams struct {

	/* DomainID.

	   ID of the domain
	*/
	DomainID *string

	timeout    time.Duration
	Context    context.Context
	HTTPClient *http.Client
}

// WithDefaults hydrates default values in the get Vcenters params (not the query body).
//
// All values with no default are reset to their zero value.
func (o *GETVCENTERSParams) WithDefaults() *GETVCENTERSParams {
	o.SetDefaults()
	return o
}

// SetDefaults hydrates default values in the get Vcenters params (not the query body).
//
// All values with no default are reset to their zero value.
func (o *GETVCENTERSParams) SetDefaults() {
	// no default values defined for this parameter
}

// WithTimeout adds the timeout to the get Vcenters params
func (o *GETVCENTERSParams) WithTimeout(timeout time.Duration) *GETVCENTERSParams {
	o.SetTimeout(timeout)
	return o
}

// SetTimeout adds the timeout to the get Vcenters params
func (o *GETVCENTERSParams) SetTimeout(timeout time.Duration) {
	o.timeout = timeout
}

// WithContext adds the context to the get Vcenters params
func (o *GETVCENTERSParams) WithContext(ctx context.Context) *GETVCENTERSParams {
	o.SetContext(ctx)
	return o
}

// SetContext adds the context to the get Vcenters params
func (o *GETVCENTERSParams) SetContext(ctx context.Context) {
	o.Context = ctx
}

// WithHTTPClient adds the HTTPClient to the get Vcenters params
func (o *GETVCENTERSParams) WithHTTPClient(client *http.Client) *GETVCENTERSParams {
	o.SetHTTPClient(client)
	return o
}

// SetHTTPClient adds the HTTPClient to the get Vcenters params
func (o *GETVCENTERSParams) SetHTTPClient(client *http.Client) {
	o.HTTPClient = client
}

// WithDomainID adds the domainID to the get Vcenters params
func (o *GETVCENTERSParams) WithDomainID(domainID *string) *GETVCENTERSParams {
	o.SetDomainID(domainID)
	return o
}

// SetDomainID adds the domainId to the get Vcenters params
func (o *GETVCENTERSParams) SetDomainID(domainID *string) {
	o.DomainID = domainID
}

// WriteToRequest writes these params to a swagger request
func (o *GETVCENTERSParams) WriteToRequest(r runtime.ClientRequest, reg strfmt.Registry) error {

	if err := r.SetTimeout(o.timeout); err != nil {
		return err
	}
	var res []error

	if o.DomainID != nil {

		// query param domainId
		var qrDomainID string

		if o.DomainID != nil {
			qrDomainID = *o.DomainID
		}
		qDomainID := qrDomainID
		if qDomainID != "" {

			if err := r.SetQueryParam("domainId", qDomainID); err != nil {
				return err
			}
		}
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}
