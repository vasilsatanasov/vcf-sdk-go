// Code generated by go-swagger; DO NOT EDIT.

package v_r_s_l_c_m

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"
	"io"

	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"

	"vcf-sdk-go/models"
)

// RollbackVrslcmReader is a Reader for the RollbackVrslcm structure.
type RollbackVrslcmReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *RollbackVrslcmReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {
	case 202:
		result := NewRollbackVrslcmAccepted()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil
	case 405:
		result := NewRollbackVrslcmMethodNotAllowed()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	default:
		return nil, runtime.NewAPIError("response status code does not match any response statuses defined for this endpoint in the swagger spec", response, response.Code())
	}
}

// NewRollbackVrslcmAccepted creates a RollbackVrslcmAccepted with default headers values
func NewRollbackVrslcmAccepted() *RollbackVrslcmAccepted {
	return &RollbackVrslcmAccepted{}
}

/*
RollbackVrslcmAccepted describes a response with status code 202, with default header values.

Accepted
*/
type RollbackVrslcmAccepted struct {
	Payload *models.Task
}

// IsSuccess returns true when this rollback vrslcm accepted response has a 2xx status code
func (o *RollbackVrslcmAccepted) IsSuccess() bool {
	return true
}

// IsRedirect returns true when this rollback vrslcm accepted response has a 3xx status code
func (o *RollbackVrslcmAccepted) IsRedirect() bool {
	return false
}

// IsClientError returns true when this rollback vrslcm accepted response has a 4xx status code
func (o *RollbackVrslcmAccepted) IsClientError() bool {
	return false
}

// IsServerError returns true when this rollback vrslcm accepted response has a 5xx status code
func (o *RollbackVrslcmAccepted) IsServerError() bool {
	return false
}

// IsCode returns true when this rollback vrslcm accepted response a status code equal to that given
func (o *RollbackVrslcmAccepted) IsCode(code int) bool {
	return code == 202
}

func (o *RollbackVrslcmAccepted) Error() string {
	return fmt.Sprintf("[DELETE /v1/vrslcm][%d] rollbackVrslcmAccepted  %+v", 202, o.Payload)
}

func (o *RollbackVrslcmAccepted) String() string {
	return fmt.Sprintf("[DELETE /v1/vrslcm][%d] rollbackVrslcmAccepted  %+v", 202, o.Payload)
}

func (o *RollbackVrslcmAccepted) GetPayload() *models.Task {
	return o.Payload
}

func (o *RollbackVrslcmAccepted) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.Task)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewRollbackVrslcmMethodNotAllowed creates a RollbackVrslcmMethodNotAllowed with default headers values
func NewRollbackVrslcmMethodNotAllowed() *RollbackVrslcmMethodNotAllowed {
	return &RollbackVrslcmMethodNotAllowed{}
}

/*
RollbackVrslcmMethodNotAllowed describes a response with status code 405, with default header values.

Method Not Allowed
*/
type RollbackVrslcmMethodNotAllowed struct {
	Payload *models.Error
}

// IsSuccess returns true when this rollback vrslcm method not allowed response has a 2xx status code
func (o *RollbackVrslcmMethodNotAllowed) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this rollback vrslcm method not allowed response has a 3xx status code
func (o *RollbackVrslcmMethodNotAllowed) IsRedirect() bool {
	return false
}

// IsClientError returns true when this rollback vrslcm method not allowed response has a 4xx status code
func (o *RollbackVrslcmMethodNotAllowed) IsClientError() bool {
	return true
}

// IsServerError returns true when this rollback vrslcm method not allowed response has a 5xx status code
func (o *RollbackVrslcmMethodNotAllowed) IsServerError() bool {
	return false
}

// IsCode returns true when this rollback vrslcm method not allowed response a status code equal to that given
func (o *RollbackVrslcmMethodNotAllowed) IsCode(code int) bool {
	return code == 405
}

func (o *RollbackVrslcmMethodNotAllowed) Error() string {
	return fmt.Sprintf("[DELETE /v1/vrslcm][%d] rollbackVrslcmMethodNotAllowed  %+v", 405, o.Payload)
}

func (o *RollbackVrslcmMethodNotAllowed) String() string {
	return fmt.Sprintf("[DELETE /v1/vrslcm][%d] rollbackVrslcmMethodNotAllowed  %+v", 405, o.Payload)
}

func (o *RollbackVrslcmMethodNotAllowed) GetPayload() *models.Error {
	return o.Payload
}

func (o *RollbackVrslcmMethodNotAllowed) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.Error)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}
