// Code generated by go-swagger; DO NOT EDIT.

package v_r_s_l_c_m

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"
	"io"

	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"

	"vcf-sdk-go/models"
)

// UpdateVrslcmVersionByIDInInventoryReader is a Reader for the UpdateVrslcmVersionByIDInInventory structure.
type UpdateVrslcmVersionByIDInInventoryReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *UpdateVrslcmVersionByIDInInventoryReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {
	case 200:
		result := NewUpdateVrslcmVersionByIDInInventoryOK()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil
	case 400:
		result := NewUpdateVrslcmVersionByIDInInventoryBadRequest()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 404:
		result := NewUpdateVrslcmVersionByIDInInventoryNotFound()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 405:
		result := NewUpdateVrslcmVersionByIDInInventoryMethodNotAllowed()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 500:
		result := NewUpdateVrslcmVersionByIDInInventoryInternalServerError()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	default:
		return nil, runtime.NewAPIError("response status code does not match any response statuses defined for this endpoint in the swagger spec", response, response.Code())
	}
}

// NewUpdateVrslcmVersionByIDInInventoryOK creates a UpdateVrslcmVersionByIDInInventoryOK with default headers values
func NewUpdateVrslcmVersionByIDInInventoryOK() *UpdateVrslcmVersionByIDInInventoryOK {
	return &UpdateVrslcmVersionByIDInInventoryOK{}
}

/*
UpdateVrslcmVersionByIDInInventoryOK describes a response with status code 200, with default header values.

OK
*/
type UpdateVrslcmVersionByIDInInventoryOK struct {
	Payload string
}

// IsSuccess returns true when this update vrslcm version by Id in inventory o k response has a 2xx status code
func (o *UpdateVrslcmVersionByIDInInventoryOK) IsSuccess() bool {
	return true
}

// IsRedirect returns true when this update vrslcm version by Id in inventory o k response has a 3xx status code
func (o *UpdateVrslcmVersionByIDInInventoryOK) IsRedirect() bool {
	return false
}

// IsClientError returns true when this update vrslcm version by Id in inventory o k response has a 4xx status code
func (o *UpdateVrslcmVersionByIDInInventoryOK) IsClientError() bool {
	return false
}

// IsServerError returns true when this update vrslcm version by Id in inventory o k response has a 5xx status code
func (o *UpdateVrslcmVersionByIDInInventoryOK) IsServerError() bool {
	return false
}

// IsCode returns true when this update vrslcm version by Id in inventory o k response a status code equal to that given
func (o *UpdateVrslcmVersionByIDInInventoryOK) IsCode(code int) bool {
	return code == 200
}

func (o *UpdateVrslcmVersionByIDInInventoryOK) Error() string {
	return fmt.Sprintf("[PUT /v1/vrslcms/{id}][%d] updateVrslcmVersionByIdInInventoryOK  %+v", 200, o.Payload)
}

func (o *UpdateVrslcmVersionByIDInInventoryOK) String() string {
	return fmt.Sprintf("[PUT /v1/vrslcms/{id}][%d] updateVrslcmVersionByIdInInventoryOK  %+v", 200, o.Payload)
}

func (o *UpdateVrslcmVersionByIDInInventoryOK) GetPayload() string {
	return o.Payload
}

func (o *UpdateVrslcmVersionByIDInInventoryOK) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// response payload
	if err := consumer.Consume(response.Body(), &o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewUpdateVrslcmVersionByIDInInventoryBadRequest creates a UpdateVrslcmVersionByIDInInventoryBadRequest with default headers values
func NewUpdateVrslcmVersionByIDInInventoryBadRequest() *UpdateVrslcmVersionByIDInInventoryBadRequest {
	return &UpdateVrslcmVersionByIDInInventoryBadRequest{}
}

/*
UpdateVrslcmVersionByIDInInventoryBadRequest describes a response with status code 400, with default header values.

Bad Request
*/
type UpdateVrslcmVersionByIDInInventoryBadRequest struct {
	Payload *models.Error
}

// IsSuccess returns true when this update vrslcm version by Id in inventory bad request response has a 2xx status code
func (o *UpdateVrslcmVersionByIDInInventoryBadRequest) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this update vrslcm version by Id in inventory bad request response has a 3xx status code
func (o *UpdateVrslcmVersionByIDInInventoryBadRequest) IsRedirect() bool {
	return false
}

// IsClientError returns true when this update vrslcm version by Id in inventory bad request response has a 4xx status code
func (o *UpdateVrslcmVersionByIDInInventoryBadRequest) IsClientError() bool {
	return true
}

// IsServerError returns true when this update vrslcm version by Id in inventory bad request response has a 5xx status code
func (o *UpdateVrslcmVersionByIDInInventoryBadRequest) IsServerError() bool {
	return false
}

// IsCode returns true when this update vrslcm version by Id in inventory bad request response a status code equal to that given
func (o *UpdateVrslcmVersionByIDInInventoryBadRequest) IsCode(code int) bool {
	return code == 400
}

func (o *UpdateVrslcmVersionByIDInInventoryBadRequest) Error() string {
	return fmt.Sprintf("[PUT /v1/vrslcms/{id}][%d] updateVrslcmVersionByIdInInventoryBadRequest  %+v", 400, o.Payload)
}

func (o *UpdateVrslcmVersionByIDInInventoryBadRequest) String() string {
	return fmt.Sprintf("[PUT /v1/vrslcms/{id}][%d] updateVrslcmVersionByIdInInventoryBadRequest  %+v", 400, o.Payload)
}

func (o *UpdateVrslcmVersionByIDInInventoryBadRequest) GetPayload() *models.Error {
	return o.Payload
}

func (o *UpdateVrslcmVersionByIDInInventoryBadRequest) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.Error)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewUpdateVrslcmVersionByIDInInventoryNotFound creates a UpdateVrslcmVersionByIDInInventoryNotFound with default headers values
func NewUpdateVrslcmVersionByIDInInventoryNotFound() *UpdateVrslcmVersionByIDInInventoryNotFound {
	return &UpdateVrslcmVersionByIDInInventoryNotFound{}
}

/*
UpdateVrslcmVersionByIDInInventoryNotFound describes a response with status code 404, with default header values.

Not Found
*/
type UpdateVrslcmVersionByIDInInventoryNotFound struct {
	Payload *models.Error
}

// IsSuccess returns true when this update vrslcm version by Id in inventory not found response has a 2xx status code
func (o *UpdateVrslcmVersionByIDInInventoryNotFound) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this update vrslcm version by Id in inventory not found response has a 3xx status code
func (o *UpdateVrslcmVersionByIDInInventoryNotFound) IsRedirect() bool {
	return false
}

// IsClientError returns true when this update vrslcm version by Id in inventory not found response has a 4xx status code
func (o *UpdateVrslcmVersionByIDInInventoryNotFound) IsClientError() bool {
	return true
}

// IsServerError returns true when this update vrslcm version by Id in inventory not found response has a 5xx status code
func (o *UpdateVrslcmVersionByIDInInventoryNotFound) IsServerError() bool {
	return false
}

// IsCode returns true when this update vrslcm version by Id in inventory not found response a status code equal to that given
func (o *UpdateVrslcmVersionByIDInInventoryNotFound) IsCode(code int) bool {
	return code == 404
}

func (o *UpdateVrslcmVersionByIDInInventoryNotFound) Error() string {
	return fmt.Sprintf("[PUT /v1/vrslcms/{id}][%d] updateVrslcmVersionByIdInInventoryNotFound  %+v", 404, o.Payload)
}

func (o *UpdateVrslcmVersionByIDInInventoryNotFound) String() string {
	return fmt.Sprintf("[PUT /v1/vrslcms/{id}][%d] updateVrslcmVersionByIdInInventoryNotFound  %+v", 404, o.Payload)
}

func (o *UpdateVrslcmVersionByIDInInventoryNotFound) GetPayload() *models.Error {
	return o.Payload
}

func (o *UpdateVrslcmVersionByIDInInventoryNotFound) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.Error)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewUpdateVrslcmVersionByIDInInventoryMethodNotAllowed creates a UpdateVrslcmVersionByIDInInventoryMethodNotAllowed with default headers values
func NewUpdateVrslcmVersionByIDInInventoryMethodNotAllowed() *UpdateVrslcmVersionByIDInInventoryMethodNotAllowed {
	return &UpdateVrslcmVersionByIDInInventoryMethodNotAllowed{}
}

/*
UpdateVrslcmVersionByIDInInventoryMethodNotAllowed describes a response with status code 405, with default header values.

Method Not Allowed
*/
type UpdateVrslcmVersionByIDInInventoryMethodNotAllowed struct {
	Payload *models.Error
}

// IsSuccess returns true when this update vrslcm version by Id in inventory method not allowed response has a 2xx status code
func (o *UpdateVrslcmVersionByIDInInventoryMethodNotAllowed) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this update vrslcm version by Id in inventory method not allowed response has a 3xx status code
func (o *UpdateVrslcmVersionByIDInInventoryMethodNotAllowed) IsRedirect() bool {
	return false
}

// IsClientError returns true when this update vrslcm version by Id in inventory method not allowed response has a 4xx status code
func (o *UpdateVrslcmVersionByIDInInventoryMethodNotAllowed) IsClientError() bool {
	return true
}

// IsServerError returns true when this update vrslcm version by Id in inventory method not allowed response has a 5xx status code
func (o *UpdateVrslcmVersionByIDInInventoryMethodNotAllowed) IsServerError() bool {
	return false
}

// IsCode returns true when this update vrslcm version by Id in inventory method not allowed response a status code equal to that given
func (o *UpdateVrslcmVersionByIDInInventoryMethodNotAllowed) IsCode(code int) bool {
	return code == 405
}

func (o *UpdateVrslcmVersionByIDInInventoryMethodNotAllowed) Error() string {
	return fmt.Sprintf("[PUT /v1/vrslcms/{id}][%d] updateVrslcmVersionByIdInInventoryMethodNotAllowed  %+v", 405, o.Payload)
}

func (o *UpdateVrslcmVersionByIDInInventoryMethodNotAllowed) String() string {
	return fmt.Sprintf("[PUT /v1/vrslcms/{id}][%d] updateVrslcmVersionByIdInInventoryMethodNotAllowed  %+v", 405, o.Payload)
}

func (o *UpdateVrslcmVersionByIDInInventoryMethodNotAllowed) GetPayload() *models.Error {
	return o.Payload
}

func (o *UpdateVrslcmVersionByIDInInventoryMethodNotAllowed) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.Error)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewUpdateVrslcmVersionByIDInInventoryInternalServerError creates a UpdateVrslcmVersionByIDInInventoryInternalServerError with default headers values
func NewUpdateVrslcmVersionByIDInInventoryInternalServerError() *UpdateVrslcmVersionByIDInInventoryInternalServerError {
	return &UpdateVrslcmVersionByIDInInventoryInternalServerError{}
}

/*
UpdateVrslcmVersionByIDInInventoryInternalServerError describes a response with status code 500, with default header values.

Internal Server Error
*/
type UpdateVrslcmVersionByIDInInventoryInternalServerError struct {
	Payload *models.Error
}

// IsSuccess returns true when this update vrslcm version by Id in inventory internal server error response has a 2xx status code
func (o *UpdateVrslcmVersionByIDInInventoryInternalServerError) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this update vrslcm version by Id in inventory internal server error response has a 3xx status code
func (o *UpdateVrslcmVersionByIDInInventoryInternalServerError) IsRedirect() bool {
	return false
}

// IsClientError returns true when this update vrslcm version by Id in inventory internal server error response has a 4xx status code
func (o *UpdateVrslcmVersionByIDInInventoryInternalServerError) IsClientError() bool {
	return false
}

// IsServerError returns true when this update vrslcm version by Id in inventory internal server error response has a 5xx status code
func (o *UpdateVrslcmVersionByIDInInventoryInternalServerError) IsServerError() bool {
	return true
}

// IsCode returns true when this update vrslcm version by Id in inventory internal server error response a status code equal to that given
func (o *UpdateVrslcmVersionByIDInInventoryInternalServerError) IsCode(code int) bool {
	return code == 500
}

func (o *UpdateVrslcmVersionByIDInInventoryInternalServerError) Error() string {
	return fmt.Sprintf("[PUT /v1/vrslcms/{id}][%d] updateVrslcmVersionByIdInInventoryInternalServerError  %+v", 500, o.Payload)
}

func (o *UpdateVrslcmVersionByIDInInventoryInternalServerError) String() string {
	return fmt.Sprintf("[PUT /v1/vrslcms/{id}][%d] updateVrslcmVersionByIdInInventoryInternalServerError  %+v", 500, o.Payload)
}

func (o *UpdateVrslcmVersionByIDInInventoryInternalServerError) GetPayload() *models.Error {
	return o.Payload
}

func (o *UpdateVrslcmVersionByIDInInventoryInternalServerError) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.Error)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}
