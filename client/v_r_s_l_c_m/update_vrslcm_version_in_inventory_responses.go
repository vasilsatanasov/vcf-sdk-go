// Code generated by go-swagger; DO NOT EDIT.

package v_r_s_l_c_m

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"
	"io"

	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"

	"vcf-sdk-go/models"
)

// UpdateVrslcmVersionInInventoryReader is a Reader for the UpdateVrslcmVersionInInventory structure.
type UpdateVrslcmVersionInInventoryReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *UpdateVrslcmVersionInInventoryReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {
	case 200:
		result := NewUpdateVrslcmVersionInInventoryOK()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil
	case 400:
		result := NewUpdateVrslcmVersionInInventoryBadRequest()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 404:
		result := NewUpdateVrslcmVersionInInventoryNotFound()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 405:
		result := NewUpdateVrslcmVersionInInventoryMethodNotAllowed()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 500:
		result := NewUpdateVrslcmVersionInInventoryInternalServerError()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	default:
		return nil, runtime.NewAPIError("response status code does not match any response statuses defined for this endpoint in the swagger spec", response, response.Code())
	}
}

// NewUpdateVrslcmVersionInInventoryOK creates a UpdateVrslcmVersionInInventoryOK with default headers values
func NewUpdateVrslcmVersionInInventoryOK() *UpdateVrslcmVersionInInventoryOK {
	return &UpdateVrslcmVersionInInventoryOK{}
}

/*
UpdateVrslcmVersionInInventoryOK describes a response with status code 200, with default header values.

OK
*/
type UpdateVrslcmVersionInInventoryOK struct {
	Payload string
}

// IsSuccess returns true when this update vrslcm version in inventory o k response has a 2xx status code
func (o *UpdateVrslcmVersionInInventoryOK) IsSuccess() bool {
	return true
}

// IsRedirect returns true when this update vrslcm version in inventory o k response has a 3xx status code
func (o *UpdateVrslcmVersionInInventoryOK) IsRedirect() bool {
	return false
}

// IsClientError returns true when this update vrslcm version in inventory o k response has a 4xx status code
func (o *UpdateVrslcmVersionInInventoryOK) IsClientError() bool {
	return false
}

// IsServerError returns true when this update vrslcm version in inventory o k response has a 5xx status code
func (o *UpdateVrslcmVersionInInventoryOK) IsServerError() bool {
	return false
}

// IsCode returns true when this update vrslcm version in inventory o k response a status code equal to that given
func (o *UpdateVrslcmVersionInInventoryOK) IsCode(code int) bool {
	return code == 200
}

func (o *UpdateVrslcmVersionInInventoryOK) Error() string {
	return fmt.Sprintf("[PUT /v1/vrslcm][%d] updateVrslcmVersionInInventoryOK  %+v", 200, o.Payload)
}

func (o *UpdateVrslcmVersionInInventoryOK) String() string {
	return fmt.Sprintf("[PUT /v1/vrslcm][%d] updateVrslcmVersionInInventoryOK  %+v", 200, o.Payload)
}

func (o *UpdateVrslcmVersionInInventoryOK) GetPayload() string {
	return o.Payload
}

func (o *UpdateVrslcmVersionInInventoryOK) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// response payload
	if err := consumer.Consume(response.Body(), &o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewUpdateVrslcmVersionInInventoryBadRequest creates a UpdateVrslcmVersionInInventoryBadRequest with default headers values
func NewUpdateVrslcmVersionInInventoryBadRequest() *UpdateVrslcmVersionInInventoryBadRequest {
	return &UpdateVrslcmVersionInInventoryBadRequest{}
}

/*
UpdateVrslcmVersionInInventoryBadRequest describes a response with status code 400, with default header values.

Bad Request
*/
type UpdateVrslcmVersionInInventoryBadRequest struct {
	Payload *models.Error
}

// IsSuccess returns true when this update vrslcm version in inventory bad request response has a 2xx status code
func (o *UpdateVrslcmVersionInInventoryBadRequest) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this update vrslcm version in inventory bad request response has a 3xx status code
func (o *UpdateVrslcmVersionInInventoryBadRequest) IsRedirect() bool {
	return false
}

// IsClientError returns true when this update vrslcm version in inventory bad request response has a 4xx status code
func (o *UpdateVrslcmVersionInInventoryBadRequest) IsClientError() bool {
	return true
}

// IsServerError returns true when this update vrslcm version in inventory bad request response has a 5xx status code
func (o *UpdateVrslcmVersionInInventoryBadRequest) IsServerError() bool {
	return false
}

// IsCode returns true when this update vrslcm version in inventory bad request response a status code equal to that given
func (o *UpdateVrslcmVersionInInventoryBadRequest) IsCode(code int) bool {
	return code == 400
}

func (o *UpdateVrslcmVersionInInventoryBadRequest) Error() string {
	return fmt.Sprintf("[PUT /v1/vrslcm][%d] updateVrslcmVersionInInventoryBadRequest  %+v", 400, o.Payload)
}

func (o *UpdateVrslcmVersionInInventoryBadRequest) String() string {
	return fmt.Sprintf("[PUT /v1/vrslcm][%d] updateVrslcmVersionInInventoryBadRequest  %+v", 400, o.Payload)
}

func (o *UpdateVrslcmVersionInInventoryBadRequest) GetPayload() *models.Error {
	return o.Payload
}

func (o *UpdateVrslcmVersionInInventoryBadRequest) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.Error)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewUpdateVrslcmVersionInInventoryNotFound creates a UpdateVrslcmVersionInInventoryNotFound with default headers values
func NewUpdateVrslcmVersionInInventoryNotFound() *UpdateVrslcmVersionInInventoryNotFound {
	return &UpdateVrslcmVersionInInventoryNotFound{}
}

/*
UpdateVrslcmVersionInInventoryNotFound describes a response with status code 404, with default header values.

Not Found
*/
type UpdateVrslcmVersionInInventoryNotFound struct {
	Payload *models.Error
}

// IsSuccess returns true when this update vrslcm version in inventory not found response has a 2xx status code
func (o *UpdateVrslcmVersionInInventoryNotFound) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this update vrslcm version in inventory not found response has a 3xx status code
func (o *UpdateVrslcmVersionInInventoryNotFound) IsRedirect() bool {
	return false
}

// IsClientError returns true when this update vrslcm version in inventory not found response has a 4xx status code
func (o *UpdateVrslcmVersionInInventoryNotFound) IsClientError() bool {
	return true
}

// IsServerError returns true when this update vrslcm version in inventory not found response has a 5xx status code
func (o *UpdateVrslcmVersionInInventoryNotFound) IsServerError() bool {
	return false
}

// IsCode returns true when this update vrslcm version in inventory not found response a status code equal to that given
func (o *UpdateVrslcmVersionInInventoryNotFound) IsCode(code int) bool {
	return code == 404
}

func (o *UpdateVrslcmVersionInInventoryNotFound) Error() string {
	return fmt.Sprintf("[PUT /v1/vrslcm][%d] updateVrslcmVersionInInventoryNotFound  %+v", 404, o.Payload)
}

func (o *UpdateVrslcmVersionInInventoryNotFound) String() string {
	return fmt.Sprintf("[PUT /v1/vrslcm][%d] updateVrslcmVersionInInventoryNotFound  %+v", 404, o.Payload)
}

func (o *UpdateVrslcmVersionInInventoryNotFound) GetPayload() *models.Error {
	return o.Payload
}

func (o *UpdateVrslcmVersionInInventoryNotFound) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.Error)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewUpdateVrslcmVersionInInventoryMethodNotAllowed creates a UpdateVrslcmVersionInInventoryMethodNotAllowed with default headers values
func NewUpdateVrslcmVersionInInventoryMethodNotAllowed() *UpdateVrslcmVersionInInventoryMethodNotAllowed {
	return &UpdateVrslcmVersionInInventoryMethodNotAllowed{}
}

/*
UpdateVrslcmVersionInInventoryMethodNotAllowed describes a response with status code 405, with default header values.

Method Not Allowed
*/
type UpdateVrslcmVersionInInventoryMethodNotAllowed struct {
	Payload *models.Error
}

// IsSuccess returns true when this update vrslcm version in inventory method not allowed response has a 2xx status code
func (o *UpdateVrslcmVersionInInventoryMethodNotAllowed) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this update vrslcm version in inventory method not allowed response has a 3xx status code
func (o *UpdateVrslcmVersionInInventoryMethodNotAllowed) IsRedirect() bool {
	return false
}

// IsClientError returns true when this update vrslcm version in inventory method not allowed response has a 4xx status code
func (o *UpdateVrslcmVersionInInventoryMethodNotAllowed) IsClientError() bool {
	return true
}

// IsServerError returns true when this update vrslcm version in inventory method not allowed response has a 5xx status code
func (o *UpdateVrslcmVersionInInventoryMethodNotAllowed) IsServerError() bool {
	return false
}

// IsCode returns true when this update vrslcm version in inventory method not allowed response a status code equal to that given
func (o *UpdateVrslcmVersionInInventoryMethodNotAllowed) IsCode(code int) bool {
	return code == 405
}

func (o *UpdateVrslcmVersionInInventoryMethodNotAllowed) Error() string {
	return fmt.Sprintf("[PUT /v1/vrslcm][%d] updateVrslcmVersionInInventoryMethodNotAllowed  %+v", 405, o.Payload)
}

func (o *UpdateVrslcmVersionInInventoryMethodNotAllowed) String() string {
	return fmt.Sprintf("[PUT /v1/vrslcm][%d] updateVrslcmVersionInInventoryMethodNotAllowed  %+v", 405, o.Payload)
}

func (o *UpdateVrslcmVersionInInventoryMethodNotAllowed) GetPayload() *models.Error {
	return o.Payload
}

func (o *UpdateVrslcmVersionInInventoryMethodNotAllowed) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.Error)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewUpdateVrslcmVersionInInventoryInternalServerError creates a UpdateVrslcmVersionInInventoryInternalServerError with default headers values
func NewUpdateVrslcmVersionInInventoryInternalServerError() *UpdateVrslcmVersionInInventoryInternalServerError {
	return &UpdateVrslcmVersionInInventoryInternalServerError{}
}

/*
UpdateVrslcmVersionInInventoryInternalServerError describes a response with status code 500, with default header values.

Internal Server Error
*/
type UpdateVrslcmVersionInInventoryInternalServerError struct {
	Payload *models.Error
}

// IsSuccess returns true when this update vrslcm version in inventory internal server error response has a 2xx status code
func (o *UpdateVrslcmVersionInInventoryInternalServerError) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this update vrslcm version in inventory internal server error response has a 3xx status code
func (o *UpdateVrslcmVersionInInventoryInternalServerError) IsRedirect() bool {
	return false
}

// IsClientError returns true when this update vrslcm version in inventory internal server error response has a 4xx status code
func (o *UpdateVrslcmVersionInInventoryInternalServerError) IsClientError() bool {
	return false
}

// IsServerError returns true when this update vrslcm version in inventory internal server error response has a 5xx status code
func (o *UpdateVrslcmVersionInInventoryInternalServerError) IsServerError() bool {
	return true
}

// IsCode returns true when this update vrslcm version in inventory internal server error response a status code equal to that given
func (o *UpdateVrslcmVersionInInventoryInternalServerError) IsCode(code int) bool {
	return code == 500
}

func (o *UpdateVrslcmVersionInInventoryInternalServerError) Error() string {
	return fmt.Sprintf("[PUT /v1/vrslcm][%d] updateVrslcmVersionInInventoryInternalServerError  %+v", 500, o.Payload)
}

func (o *UpdateVrslcmVersionInInventoryInternalServerError) String() string {
	return fmt.Sprintf("[PUT /v1/vrslcm][%d] updateVrslcmVersionInInventoryInternalServerError  %+v", 500, o.Payload)
}

func (o *UpdateVrslcmVersionInInventoryInternalServerError) GetPayload() *models.Error {
	return o.Payload
}

func (o *UpdateVrslcmVersionInInventoryInternalServerError) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.Error)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}
