// Code generated by go-swagger; DO NOT EDIT.

package v_r_s_l_c_m

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"

	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"
)

// New creates a new v r s l c m API client.
func New(transport runtime.ClientTransport, formats strfmt.Registry) ClientService {
	return &Client{transport: transport, formats: formats}
}

/*
Client for v r s l c m API
*/
type Client struct {
	transport runtime.ClientTransport
	formats   strfmt.Registry
}

// ClientOption is the option for Client methods
type ClientOption func(*runtime.ClientOperation)

// ClientService is the interface for Client methods
type ClientService interface {
	DeployVrslcm(params *DeployVrslcmParams, opts ...ClientOption) (*DeployVrslcmAccepted, error)

	GetVrslcm(params *GetVrslcmParams, opts ...ClientOption) (*GetVrslcmOK, error)

	GetVrslcmValidation(params *GetVrslcmValidationParams, opts ...ClientOption) (*GetVrslcmValidationOK, error)

	GetVrslcms(params *GetVrslcmsParams, opts ...ClientOption) (*GetVrslcmsOK, error)

	RollbackVrslcm(params *RollbackVrslcmParams, opts ...ClientOption) (*RollbackVrslcmAccepted, error)

	UpdateVrslcmVersionByIDInInventory(params *UpdateVrslcmVersionByIDInInventoryParams, opts ...ClientOption) (*UpdateVrslcmVersionByIDInInventoryOK, error)

	UpdateVrslcmVersionInInventory(params *UpdateVrslcmVersionInInventoryParams, opts ...ClientOption) (*UpdateVrslcmVersionInInventoryOK, error)

	ValidateVrslcm(params *ValidateVrslcmParams, opts ...ClientOption) (*ValidateVrslcmAccepted, error)

	SetTransport(transport runtime.ClientTransport)
}

/*
DeployVrslcm deploys v realize suite lifecycle manager

Triggers the vRealize Suite Lifecycle Manager deployment operation and returns an URL in the headers to track the operation status.
*/
func (a *Client) DeployVrslcm(params *DeployVrslcmParams, opts ...ClientOption) (*DeployVrslcmAccepted, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewDeployVrslcmParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "deployVrslcm",
		Method:             "POST",
		PathPattern:        "/v1/vrslcms",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &DeployVrslcmReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*DeployVrslcmAccepted)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for deployVrslcm: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
GetVrslcm gets the existing v realize suite lifecycle manager

Gets the complete information about the existing vRealize Suite Lifecycle Manager instance.
*/
func (a *Client) GetVrslcm(params *GetVrslcmParams, opts ...ClientOption) (*GetVrslcmOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetVrslcmParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "getVrslcm",
		Method:             "GET",
		PathPattern:        "/v1/vrslcm",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GetVrslcmReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetVrslcmOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for getVrslcm: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
GetVrslcmValidation gets the status of the validations for v realize lifecycle manager deployment

Gets the status of given vRealize Suite Lifecycle Manager validation workflow by given validation id
*/
func (a *Client) GetVrslcmValidation(params *GetVrslcmValidationParams, opts ...ClientOption) (*GetVrslcmValidationOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetVrslcmValidationParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "getVrslcmValidation",
		Method:             "GET",
		PathPattern:        "/v1/vrslcms/validations/{id}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GetVrslcmValidationReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetVrslcmValidationOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for getVrslcmValidation: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
GetVrslcms gets all existing v realize suite lifecycle manager instances
*/
func (a *Client) GetVrslcms(params *GetVrslcmsParams, opts ...ClientOption) (*GetVrslcmsOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetVrslcmsParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "getVrslcms",
		Method:             "GET",
		PathPattern:        "/v1/vrslcms",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GetVrslcmsReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetVrslcmsOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for getVrslcms: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
RollbackVrslcm rollbacks v realize suite lifecycle manager after unsuccessful deployment

Triggers the vRealize Suite Lifecycle Manager rollback operation and returns an URL in the headers to track the operation status.
*/
func (a *Client) RollbackVrslcm(params *RollbackVrslcmParams, opts ...ClientOption) (*RollbackVrslcmAccepted, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewRollbackVrslcmParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "rollbackVrslcm",
		Method:             "DELETE",
		PathPattern:        "/v1/vrslcm",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &RollbackVrslcmReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*RollbackVrslcmAccepted)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for rollbackVrslcm: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
UpdateVrslcmVersionByIDInInventory updates v r s l c m version by ID in s d d c manager inventory

Updates Vrealize Suite Lifecycle Manager version
*/
func (a *Client) UpdateVrslcmVersionByIDInInventory(params *UpdateVrslcmVersionByIDInInventoryParams, opts ...ClientOption) (*UpdateVrslcmVersionByIDInInventoryOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewUpdateVrslcmVersionByIDInInventoryParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "updateVrslcmVersionByIdInInventory",
		Method:             "PUT",
		PathPattern:        "/v1/vrslcms/{id}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &UpdateVrslcmVersionByIDInInventoryReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*UpdateVrslcmVersionByIDInInventoryOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for updateVrslcmVersionByIdInInventory: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
UpdateVrslcmVersionInInventory updates the version of v r s l c m in s d d c manager inventory

Updates vRealize Suite Lifecycle Manager version in VCF inventory
*/
func (a *Client) UpdateVrslcmVersionInInventory(params *UpdateVrslcmVersionInInventoryParams, opts ...ClientOption) (*UpdateVrslcmVersionInInventoryOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewUpdateVrslcmVersionInInventoryParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "updateVrslcmVersionInInventory",
		Method:             "PUT",
		PathPattern:        "/v1/vrslcm",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &UpdateVrslcmVersionInInventoryReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*UpdateVrslcmVersionInInventoryOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for updateVrslcmVersionInInventory: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
ValidateVrslcm validates the input specification for v realize suite lifecycle manager deployment

Triggers vRealize Suite Lifecycle Manager deployment specification validation workflow
*/
func (a *Client) ValidateVrslcm(params *ValidateVrslcmParams, opts ...ClientOption) (*ValidateVrslcmAccepted, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewValidateVrslcmParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "validateVrslcm",
		Method:             "POST",
		PathPattern:        "/v1/vrslcms/validations",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &ValidateVrslcmReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*ValidateVrslcmAccepted)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for validateVrslcm: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

// SetTransport changes the transport on the client
func (a *Client) SetTransport(transport runtime.ClientTransport) {
	a.transport = transport
}
