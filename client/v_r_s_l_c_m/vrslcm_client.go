// Code generated by go-swagger; DO NOT EDIT.

// Copyright Â© 2023 VMware, Inc. All Rights Reserved.
// Code licenced under: BSD-2

package v_r_s_l_c_m

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"

	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"
)

// New creates a new v r s l c m API client.
func New(transport runtime.ClientTransport, formats strfmt.Registry) ClientService {
	return &Client{transport: transport, formats: formats}
}

/*
Client for v r s l c m API
*/
type Client struct {
	transport runtime.ClientTransport
	formats   strfmt.Registry
}

// ClientOption is the option for Client methods
type ClientOption func(*runtime.ClientOperation)

// ClientService is the interface for Client methods
type ClientService interface {
	DeployVRSLCM(params *DeployVRSLCMParams, opts ...ClientOption) (*DeployVRSLCMAccepted, error)

	GETVRSLCM(params *GETVRSLCMParams, opts ...ClientOption) (*GETVRSLCMOK, error)

	GETVRSLCMValidation(params *GETVRSLCMValidationParams, opts ...ClientOption) (*GETVRSLCMValidationOK, error)

	GETVrslcms(params *GETVrslcmsParams, opts ...ClientOption) (*GETVrslcmsOK, error)

	RollbackVRSLCM(params *RollbackVRSLCMParams, opts ...ClientOption) (*RollbackVRSLCMAccepted, error)

	UpdateVRSLCMVersionByIDInInventory(params *UpdateVRSLCMVersionByIDInInventoryParams, opts ...ClientOption) (*UpdateVRSLCMVersionByIDInInventoryOK, error)

	UpdateVRSLCMVersionInInventory(params *UpdateVRSLCMVersionInInventoryParams, opts ...ClientOption) (*UpdateVRSLCMVersionInInventoryOK, error)

	ValidateVRSLCM(params *ValidateVRSLCMParams, opts ...ClientOption) (*ValidateVRSLCMAccepted, error)

	SetTransport(transport runtime.ClientTransport)
}

/*
DeployVRSLCM deploys v realize suite lifecycle manager

Triggers the vRealize Suite Lifecycle Manager deployment operation and returns an URL in the headers to track the operation status.
*/
func (a *Client) DeployVRSLCM(params *DeployVRSLCMParams, opts ...ClientOption) (*DeployVRSLCMAccepted, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewDeployVRSLCMParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "deployVrslcm",
		Method:             "POST",
		PathPattern:        "/v1/vrslcms",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &DeployVRSLCMReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*DeployVRSLCMAccepted)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for deployVrslcm: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
GETVRSLCM Gets the existing v realize suite lifecycle manager

Gets the complete information about the existing vRealize Suite Lifecycle Manager instance.
*/
func (a *Client) GETVRSLCM(params *GETVRSLCMParams, opts ...ClientOption) (*GETVRSLCMOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGETVRSLCMParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "getVrslcm",
		Method:             "GET",
		PathPattern:        "/v1/vrslcm",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GETVRSLCMReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GETVRSLCMOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for getVrslcm: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
GETVRSLCMValidation Gets the status of the validations for v realize lifecycle manager deployment

Gets the status of given vRealize Suite Lifecycle Manager validation workflow by given validation id
*/
func (a *Client) GETVRSLCMValidation(params *GETVRSLCMValidationParams, opts ...ClientOption) (*GETVRSLCMValidationOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGETVRSLCMValidationParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "getVrslcmValidation",
		Method:             "GET",
		PathPattern:        "/v1/vrslcms/validations/{id}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GETVRSLCMValidationReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GETVRSLCMValidationOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for getVrslcmValidation: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
GETVrslcms Gets all existing v realize suite lifecycle manager instances
*/
func (a *Client) GETVrslcms(params *GETVrslcmsParams, opts ...ClientOption) (*GETVrslcmsOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGETVrslcmsParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "getVrslcms",
		Method:             "GET",
		PathPattern:        "/v1/vrslcms",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GETVrslcmsReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GETVrslcmsOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for getVrslcms: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
RollbackVRSLCM rollbacks v realize suite lifecycle manager after unsuccessful deployment

Triggers the vRealize Suite Lifecycle Manager rollback operation and returns an URL in the headers to track the operation status.
*/
func (a *Client) RollbackVRSLCM(params *RollbackVRSLCMParams, opts ...ClientOption) (*RollbackVRSLCMAccepted, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewRollbackVRSLCMParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "rollbackVrslcm",
		Method:             "DELETE",
		PathPattern:        "/v1/vrslcm",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &RollbackVRSLCMReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*RollbackVRSLCMAccepted)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for rollbackVrslcm: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
UpdateVRSLCMVersionByIDInInventory updates v r s l c m version by ID in SDDC manager inventory

Updates Vrealize Suite Lifecycle Manager version
*/
func (a *Client) UpdateVRSLCMVersionByIDInInventory(params *UpdateVRSLCMVersionByIDInInventoryParams, opts ...ClientOption) (*UpdateVRSLCMVersionByIDInInventoryOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewUpdateVRSLCMVersionByIDInInventoryParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "updateVrslcmVersionByIdInInventory",
		Method:             "PUT",
		PathPattern:        "/v1/vrslcms/{id}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &UpdateVRSLCMVersionByIDInInventoryReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*UpdateVRSLCMVersionByIDInInventoryOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for updateVrslcmVersionByIdInInventory: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
UpdateVRSLCMVersionInInventory updates the version of VRSLCM in SDDC manager inventory

Updates vRealize Suite Lifecycle Manager version in VCF inventory
*/
func (a *Client) UpdateVRSLCMVersionInInventory(params *UpdateVRSLCMVersionInInventoryParams, opts ...ClientOption) (*UpdateVRSLCMVersionInInventoryOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewUpdateVRSLCMVersionInInventoryParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "updateVrslcmVersionInInventory",
		Method:             "PUT",
		PathPattern:        "/v1/vrslcm",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &UpdateVRSLCMVersionInInventoryReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*UpdateVRSLCMVersionInInventoryOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for updateVrslcmVersionInInventory: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
ValidateVRSLCM validates the input specification for v realize suite lifecycle manager deployment

Triggers vRealize Suite Lifecycle Manager deployment specification validation workflow
*/
func (a *Client) ValidateVRSLCM(params *ValidateVRSLCMParams, opts ...ClientOption) (*ValidateVRSLCMAccepted, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewValidateVRSLCMParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "validateVrslcm",
		Method:             "POST",
		PathPattern:        "/v1/vrslcms/validations",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &ValidateVRSLCMReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*ValidateVRSLCMAccepted)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for validateVrslcm: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

// SetTransport changes the transport on the client
func (a *Client) SetTransport(transport runtime.ClientTransport) {
	a.transport = transport
}
