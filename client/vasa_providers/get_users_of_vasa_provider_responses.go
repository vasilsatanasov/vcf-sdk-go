// Code generated by go-swagger; DO NOT EDIT.

// Copyright 2023 VMware, Inc.
// SPDX-License-Identifier: BSD-2-Clause

package vasa_providers

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"
	"io"

	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"

	"github.com/vmware/vcf-sdk-go/models"
)

// GETUsersOfVasaProviderReader is a Reader for the GETUsersOfVasaProvider structure.
type GETUsersOfVasaProviderReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *GETUsersOfVasaProviderReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {
	case 200:
		result := NewGETUsersOfVasaProviderOK()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil
	case 400:
		result := NewGETUsersOfVasaProviderBadRequest()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 404:
		result := NewGETUsersOfVasaProviderNotFound()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 500:
		result := NewGETUsersOfVasaProviderInternalServerError()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	default:
		return nil, runtime.NewAPIError("response status code does not match any response statuses defined for this endpoint in the swagger spec", response, response.Code())
	}
}

// NewGETUsersOfVasaProviderOK creates a GETUsersOfVasaProviderOK with default headers values
func NewGETUsersOfVasaProviderOK() *GETUsersOfVasaProviderOK {
	return &GETUsersOfVasaProviderOK{}
}

/*
GETUsersOfVasaProviderOK describes a response with status code 200, with default header values.

Ok
*/
type GETUsersOfVasaProviderOK struct {
	Payload []*models.VasaUser
}

// IsSuccess returns true when this get users of vasa provider o k response has a 2xx status code
func (o *GETUsersOfVasaProviderOK) IsSuccess() bool {
	return true
}

// IsRedirect returns true when this get users of vasa provider o k response has a 3xx status code
func (o *GETUsersOfVasaProviderOK) IsRedirect() bool {
	return false
}

// IsClientError returns true when this get users of vasa provider o k response has a 4xx status code
func (o *GETUsersOfVasaProviderOK) IsClientError() bool {
	return false
}

// IsServerError returns true when this get users of vasa provider o k response has a 5xx status code
func (o *GETUsersOfVasaProviderOK) IsServerError() bool {
	return false
}

// IsCode returns true when this get users of vasa provider o k response a status code equal to that given
func (o *GETUsersOfVasaProviderOK) IsCode(code int) bool {
	return code == 200
}

func (o *GETUsersOfVasaProviderOK) Error() string {
	return fmt.Sprintf("[GET /v1/vasa-providers/{id}/users][%d] getUsersOfVasaProviderOK  %+v", 200, o.Payload)
}

func (o *GETUsersOfVasaProviderOK) String() string {
	return fmt.Sprintf("[GET /v1/vasa-providers/{id}/users][%d] getUsersOfVasaProviderOK  %+v", 200, o.Payload)
}

func (o *GETUsersOfVasaProviderOK) GetPayload() []*models.VasaUser {
	return o.Payload
}

func (o *GETUsersOfVasaProviderOK) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// response payload
	if err := consumer.Consume(response.Body(), &o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewGETUsersOfVasaProviderBadRequest creates a GETUsersOfVasaProviderBadRequest with default headers values
func NewGETUsersOfVasaProviderBadRequest() *GETUsersOfVasaProviderBadRequest {
	return &GETUsersOfVasaProviderBadRequest{}
}

/*
GETUsersOfVasaProviderBadRequest describes a response with status code 400, with default header values.

Bad Request
*/
type GETUsersOfVasaProviderBadRequest struct {
	Payload *models.Error
}

// IsSuccess returns true when this get users of vasa provider bad request response has a 2xx status code
func (o *GETUsersOfVasaProviderBadRequest) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this get users of vasa provider bad request response has a 3xx status code
func (o *GETUsersOfVasaProviderBadRequest) IsRedirect() bool {
	return false
}

// IsClientError returns true when this get users of vasa provider bad request response has a 4xx status code
func (o *GETUsersOfVasaProviderBadRequest) IsClientError() bool {
	return true
}

// IsServerError returns true when this get users of vasa provider bad request response has a 5xx status code
func (o *GETUsersOfVasaProviderBadRequest) IsServerError() bool {
	return false
}

// IsCode returns true when this get users of vasa provider bad request response a status code equal to that given
func (o *GETUsersOfVasaProviderBadRequest) IsCode(code int) bool {
	return code == 400
}

func (o *GETUsersOfVasaProviderBadRequest) Error() string {
	return fmt.Sprintf("[GET /v1/vasa-providers/{id}/users][%d] getUsersOfVasaProviderBadRequest  %+v", 400, o.Payload)
}

func (o *GETUsersOfVasaProviderBadRequest) String() string {
	return fmt.Sprintf("[GET /v1/vasa-providers/{id}/users][%d] getUsersOfVasaProviderBadRequest  %+v", 400, o.Payload)
}

func (o *GETUsersOfVasaProviderBadRequest) GetPayload() *models.Error {
	return o.Payload
}

func (o *GETUsersOfVasaProviderBadRequest) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.Error)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewGETUsersOfVasaProviderNotFound creates a GETUsersOfVasaProviderNotFound with default headers values
func NewGETUsersOfVasaProviderNotFound() *GETUsersOfVasaProviderNotFound {
	return &GETUsersOfVasaProviderNotFound{}
}

/*
GETUsersOfVasaProviderNotFound describes a response with status code 404, with default header values.

VASA Provider not found
*/
type GETUsersOfVasaProviderNotFound struct {
	Payload *models.Error
}

// IsSuccess returns true when this get users of vasa provider not found response has a 2xx status code
func (o *GETUsersOfVasaProviderNotFound) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this get users of vasa provider not found response has a 3xx status code
func (o *GETUsersOfVasaProviderNotFound) IsRedirect() bool {
	return false
}

// IsClientError returns true when this get users of vasa provider not found response has a 4xx status code
func (o *GETUsersOfVasaProviderNotFound) IsClientError() bool {
	return true
}

// IsServerError returns true when this get users of vasa provider not found response has a 5xx status code
func (o *GETUsersOfVasaProviderNotFound) IsServerError() bool {
	return false
}

// IsCode returns true when this get users of vasa provider not found response a status code equal to that given
func (o *GETUsersOfVasaProviderNotFound) IsCode(code int) bool {
	return code == 404
}

func (o *GETUsersOfVasaProviderNotFound) Error() string {
	return fmt.Sprintf("[GET /v1/vasa-providers/{id}/users][%d] getUsersOfVasaProviderNotFound  %+v", 404, o.Payload)
}

func (o *GETUsersOfVasaProviderNotFound) String() string {
	return fmt.Sprintf("[GET /v1/vasa-providers/{id}/users][%d] getUsersOfVasaProviderNotFound  %+v", 404, o.Payload)
}

func (o *GETUsersOfVasaProviderNotFound) GetPayload() *models.Error {
	return o.Payload
}

func (o *GETUsersOfVasaProviderNotFound) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.Error)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewGETUsersOfVasaProviderInternalServerError creates a GETUsersOfVasaProviderInternalServerError with default headers values
func NewGETUsersOfVasaProviderInternalServerError() *GETUsersOfVasaProviderInternalServerError {
	return &GETUsersOfVasaProviderInternalServerError{}
}

/*
GETUsersOfVasaProviderInternalServerError describes a response with status code 500, with default header values.

InternalServerError
*/
type GETUsersOfVasaProviderInternalServerError struct {
	Payload *models.Error
}

// IsSuccess returns true when this get users of vasa provider internal server error response has a 2xx status code
func (o *GETUsersOfVasaProviderInternalServerError) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this get users of vasa provider internal server error response has a 3xx status code
func (o *GETUsersOfVasaProviderInternalServerError) IsRedirect() bool {
	return false
}

// IsClientError returns true when this get users of vasa provider internal server error response has a 4xx status code
func (o *GETUsersOfVasaProviderInternalServerError) IsClientError() bool {
	return false
}

// IsServerError returns true when this get users of vasa provider internal server error response has a 5xx status code
func (o *GETUsersOfVasaProviderInternalServerError) IsServerError() bool {
	return true
}

// IsCode returns true when this get users of vasa provider internal server error response a status code equal to that given
func (o *GETUsersOfVasaProviderInternalServerError) IsCode(code int) bool {
	return code == 500
}

func (o *GETUsersOfVasaProviderInternalServerError) Error() string {
	return fmt.Sprintf("[GET /v1/vasa-providers/{id}/users][%d] getUsersOfVasaProviderInternalServerError  %+v", 500, o.Payload)
}

func (o *GETUsersOfVasaProviderInternalServerError) String() string {
	return fmt.Sprintf("[GET /v1/vasa-providers/{id}/users][%d] getUsersOfVasaProviderInternalServerError  %+v", 500, o.Payload)
}

func (o *GETUsersOfVasaProviderInternalServerError) GetPayload() *models.Error {
	return o.Payload
}

func (o *GETUsersOfVasaProviderInternalServerError) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.Error)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}
