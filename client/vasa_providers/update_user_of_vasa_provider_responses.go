// Code generated by go-swagger; DO NOT EDIT.

package vasa_providers

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"
	"io"

	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"

	"vcf-sdk-go/models"
)

// UpdateUserOfVasaProviderReader is a Reader for the UpdateUserOfVasaProvider structure.
type UpdateUserOfVasaProviderReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *UpdateUserOfVasaProviderReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {
	case 200:
		result := NewUpdateUserOfVasaProviderOK()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil
	case 400:
		result := NewUpdateUserOfVasaProviderBadRequest()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 404:
		result := NewUpdateUserOfVasaProviderNotFound()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 500:
		result := NewUpdateUserOfVasaProviderInternalServerError()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	default:
		return nil, runtime.NewAPIError("response status code does not match any response statuses defined for this endpoint in the swagger spec", response, response.Code())
	}
}

// NewUpdateUserOfVasaProviderOK creates a UpdateUserOfVasaProviderOK with default headers values
func NewUpdateUserOfVasaProviderOK() *UpdateUserOfVasaProviderOK {
	return &UpdateUserOfVasaProviderOK{}
}

/*
UpdateUserOfVasaProviderOK describes a response with status code 200, with default header values.

Ok
*/
type UpdateUserOfVasaProviderOK struct {
	Payload *models.VasaProvider
}

// IsSuccess returns true when this update user of vasa provider o k response has a 2xx status code
func (o *UpdateUserOfVasaProviderOK) IsSuccess() bool {
	return true
}

// IsRedirect returns true when this update user of vasa provider o k response has a 3xx status code
func (o *UpdateUserOfVasaProviderOK) IsRedirect() bool {
	return false
}

// IsClientError returns true when this update user of vasa provider o k response has a 4xx status code
func (o *UpdateUserOfVasaProviderOK) IsClientError() bool {
	return false
}

// IsServerError returns true when this update user of vasa provider o k response has a 5xx status code
func (o *UpdateUserOfVasaProviderOK) IsServerError() bool {
	return false
}

// IsCode returns true when this update user of vasa provider o k response a status code equal to that given
func (o *UpdateUserOfVasaProviderOK) IsCode(code int) bool {
	return code == 200
}

func (o *UpdateUserOfVasaProviderOK) Error() string {
	return fmt.Sprintf("[PATCH /v1/vasa-providers/{id}/users/{userId}][%d] updateUserOfVasaProviderOK  %+v", 200, o.Payload)
}

func (o *UpdateUserOfVasaProviderOK) String() string {
	return fmt.Sprintf("[PATCH /v1/vasa-providers/{id}/users/{userId}][%d] updateUserOfVasaProviderOK  %+v", 200, o.Payload)
}

func (o *UpdateUserOfVasaProviderOK) GetPayload() *models.VasaProvider {
	return o.Payload
}

func (o *UpdateUserOfVasaProviderOK) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.VasaProvider)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewUpdateUserOfVasaProviderBadRequest creates a UpdateUserOfVasaProviderBadRequest with default headers values
func NewUpdateUserOfVasaProviderBadRequest() *UpdateUserOfVasaProviderBadRequest {
	return &UpdateUserOfVasaProviderBadRequest{}
}

/*
UpdateUserOfVasaProviderBadRequest describes a response with status code 400, with default header values.

Bad Request
*/
type UpdateUserOfVasaProviderBadRequest struct {
	Payload *models.Error
}

// IsSuccess returns true when this update user of vasa provider bad request response has a 2xx status code
func (o *UpdateUserOfVasaProviderBadRequest) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this update user of vasa provider bad request response has a 3xx status code
func (o *UpdateUserOfVasaProviderBadRequest) IsRedirect() bool {
	return false
}

// IsClientError returns true when this update user of vasa provider bad request response has a 4xx status code
func (o *UpdateUserOfVasaProviderBadRequest) IsClientError() bool {
	return true
}

// IsServerError returns true when this update user of vasa provider bad request response has a 5xx status code
func (o *UpdateUserOfVasaProviderBadRequest) IsServerError() bool {
	return false
}

// IsCode returns true when this update user of vasa provider bad request response a status code equal to that given
func (o *UpdateUserOfVasaProviderBadRequest) IsCode(code int) bool {
	return code == 400
}

func (o *UpdateUserOfVasaProviderBadRequest) Error() string {
	return fmt.Sprintf("[PATCH /v1/vasa-providers/{id}/users/{userId}][%d] updateUserOfVasaProviderBadRequest  %+v", 400, o.Payload)
}

func (o *UpdateUserOfVasaProviderBadRequest) String() string {
	return fmt.Sprintf("[PATCH /v1/vasa-providers/{id}/users/{userId}][%d] updateUserOfVasaProviderBadRequest  %+v", 400, o.Payload)
}

func (o *UpdateUserOfVasaProviderBadRequest) GetPayload() *models.Error {
	return o.Payload
}

func (o *UpdateUserOfVasaProviderBadRequest) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.Error)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewUpdateUserOfVasaProviderNotFound creates a UpdateUserOfVasaProviderNotFound with default headers values
func NewUpdateUserOfVasaProviderNotFound() *UpdateUserOfVasaProviderNotFound {
	return &UpdateUserOfVasaProviderNotFound{}
}

/*
UpdateUserOfVasaProviderNotFound describes a response with status code 404, with default header values.

User not found
*/
type UpdateUserOfVasaProviderNotFound struct {
	Payload *models.Error
}

// IsSuccess returns true when this update user of vasa provider not found response has a 2xx status code
func (o *UpdateUserOfVasaProviderNotFound) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this update user of vasa provider not found response has a 3xx status code
func (o *UpdateUserOfVasaProviderNotFound) IsRedirect() bool {
	return false
}

// IsClientError returns true when this update user of vasa provider not found response has a 4xx status code
func (o *UpdateUserOfVasaProviderNotFound) IsClientError() bool {
	return true
}

// IsServerError returns true when this update user of vasa provider not found response has a 5xx status code
func (o *UpdateUserOfVasaProviderNotFound) IsServerError() bool {
	return false
}

// IsCode returns true when this update user of vasa provider not found response a status code equal to that given
func (o *UpdateUserOfVasaProviderNotFound) IsCode(code int) bool {
	return code == 404
}

func (o *UpdateUserOfVasaProviderNotFound) Error() string {
	return fmt.Sprintf("[PATCH /v1/vasa-providers/{id}/users/{userId}][%d] updateUserOfVasaProviderNotFound  %+v", 404, o.Payload)
}

func (o *UpdateUserOfVasaProviderNotFound) String() string {
	return fmt.Sprintf("[PATCH /v1/vasa-providers/{id}/users/{userId}][%d] updateUserOfVasaProviderNotFound  %+v", 404, o.Payload)
}

func (o *UpdateUserOfVasaProviderNotFound) GetPayload() *models.Error {
	return o.Payload
}

func (o *UpdateUserOfVasaProviderNotFound) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.Error)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewUpdateUserOfVasaProviderInternalServerError creates a UpdateUserOfVasaProviderInternalServerError with default headers values
func NewUpdateUserOfVasaProviderInternalServerError() *UpdateUserOfVasaProviderInternalServerError {
	return &UpdateUserOfVasaProviderInternalServerError{}
}

/*
UpdateUserOfVasaProviderInternalServerError describes a response with status code 500, with default header values.

InternalServerError
*/
type UpdateUserOfVasaProviderInternalServerError struct {
	Payload *models.Error
}

// IsSuccess returns true when this update user of vasa provider internal server error response has a 2xx status code
func (o *UpdateUserOfVasaProviderInternalServerError) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this update user of vasa provider internal server error response has a 3xx status code
func (o *UpdateUserOfVasaProviderInternalServerError) IsRedirect() bool {
	return false
}

// IsClientError returns true when this update user of vasa provider internal server error response has a 4xx status code
func (o *UpdateUserOfVasaProviderInternalServerError) IsClientError() bool {
	return false
}

// IsServerError returns true when this update user of vasa provider internal server error response has a 5xx status code
func (o *UpdateUserOfVasaProviderInternalServerError) IsServerError() bool {
	return true
}

// IsCode returns true when this update user of vasa provider internal server error response a status code equal to that given
func (o *UpdateUserOfVasaProviderInternalServerError) IsCode(code int) bool {
	return code == 500
}

func (o *UpdateUserOfVasaProviderInternalServerError) Error() string {
	return fmt.Sprintf("[PATCH /v1/vasa-providers/{id}/users/{userId}][%d] updateUserOfVasaProviderInternalServerError  %+v", 500, o.Payload)
}

func (o *UpdateUserOfVasaProviderInternalServerError) String() string {
	return fmt.Sprintf("[PATCH /v1/vasa-providers/{id}/users/{userId}][%d] updateUserOfVasaProviderInternalServerError  %+v", 500, o.Payload)
}

func (o *UpdateUserOfVasaProviderInternalServerError) GetPayload() *models.Error {
	return o.Payload
}

func (o *UpdateUserOfVasaProviderInternalServerError) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.Error)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}
