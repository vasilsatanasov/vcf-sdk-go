// Code generated by go-swagger; DO NOT EDIT.

// Copyright Â© 2023 VMware, Inc. All Rights Reserved.
// Code licenced under: BSD-2

package vasa_providers

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"
	"io"

	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"

	"vcf-sdk-go/models"
)

// ValidateVasaProviderReader is a Reader for the ValidateVasaProvider structure.
type ValidateVasaProviderReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *ValidateVasaProviderReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {
	case 200:
		result := NewValidateVasaProviderOK()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil
	case 202:
		result := NewValidateVasaProviderAccepted()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil
	case 400:
		result := NewValidateVasaProviderBadRequest()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 500:
		result := NewValidateVasaProviderInternalServerError()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	default:
		return nil, runtime.NewAPIError("response status code does not match any response statuses defined for this endpoint in the swagger spec", response, response.Code())
	}
}

// NewValidateVasaProviderOK creates a ValidateVasaProviderOK with default headers values
func NewValidateVasaProviderOK() *ValidateVasaProviderOK {
	return &ValidateVasaProviderOK{}
}

/*
ValidateVasaProviderOK describes a response with status code 200, with default header values.

OK
*/
type ValidateVasaProviderOK struct {
	Payload *models.Validation
}

// IsSuccess returns true when this validate vasa provider o k response has a 2xx status code
func (o *ValidateVasaProviderOK) IsSuccess() bool {
	return true
}

// IsRedirect returns true when this validate vasa provider o k response has a 3xx status code
func (o *ValidateVasaProviderOK) IsRedirect() bool {
	return false
}

// IsClientError returns true when this validate vasa provider o k response has a 4xx status code
func (o *ValidateVasaProviderOK) IsClientError() bool {
	return false
}

// IsServerError returns true when this validate vasa provider o k response has a 5xx status code
func (o *ValidateVasaProviderOK) IsServerError() bool {
	return false
}

// IsCode returns true when this validate vasa provider o k response a status code equal to that given
func (o *ValidateVasaProviderOK) IsCode(code int) bool {
	return code == 200
}

func (o *ValidateVasaProviderOK) Error() string {
	return fmt.Sprintf("[POST /v1/vasa-providers/validations][%d] validateVasaProviderOK  %+v", 200, o.Payload)
}

func (o *ValidateVasaProviderOK) String() string {
	return fmt.Sprintf("[POST /v1/vasa-providers/validations][%d] validateVasaProviderOK  %+v", 200, o.Payload)
}

func (o *ValidateVasaProviderOK) GetPayload() *models.Validation {
	return o.Payload
}

func (o *ValidateVasaProviderOK) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.Validation)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewValidateVasaProviderAccepted creates a ValidateVasaProviderAccepted with default headers values
func NewValidateVasaProviderAccepted() *ValidateVasaProviderAccepted {
	return &ValidateVasaProviderAccepted{}
}

/*
ValidateVasaProviderAccepted describes a response with status code 202, with default header values.

Accepted
*/
type ValidateVasaProviderAccepted struct {
	Payload *models.Validation
}

// IsSuccess returns true when this validate vasa provider accepted response has a 2xx status code
func (o *ValidateVasaProviderAccepted) IsSuccess() bool {
	return true
}

// IsRedirect returns true when this validate vasa provider accepted response has a 3xx status code
func (o *ValidateVasaProviderAccepted) IsRedirect() bool {
	return false
}

// IsClientError returns true when this validate vasa provider accepted response has a 4xx status code
func (o *ValidateVasaProviderAccepted) IsClientError() bool {
	return false
}

// IsServerError returns true when this validate vasa provider accepted response has a 5xx status code
func (o *ValidateVasaProviderAccepted) IsServerError() bool {
	return false
}

// IsCode returns true when this validate vasa provider accepted response a status code equal to that given
func (o *ValidateVasaProviderAccepted) IsCode(code int) bool {
	return code == 202
}

func (o *ValidateVasaProviderAccepted) Error() string {
	return fmt.Sprintf("[POST /v1/vasa-providers/validations][%d] validateVasaProviderAccepted  %+v", 202, o.Payload)
}

func (o *ValidateVasaProviderAccepted) String() string {
	return fmt.Sprintf("[POST /v1/vasa-providers/validations][%d] validateVasaProviderAccepted  %+v", 202, o.Payload)
}

func (o *ValidateVasaProviderAccepted) GetPayload() *models.Validation {
	return o.Payload
}

func (o *ValidateVasaProviderAccepted) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.Validation)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewValidateVasaProviderBadRequest creates a ValidateVasaProviderBadRequest with default headers values
func NewValidateVasaProviderBadRequest() *ValidateVasaProviderBadRequest {
	return &ValidateVasaProviderBadRequest{}
}

/*
ValidateVasaProviderBadRequest describes a response with status code 400, with default header values.

Bad Request
*/
type ValidateVasaProviderBadRequest struct {
	Payload *models.Error
}

// IsSuccess returns true when this validate vasa provider bad request response has a 2xx status code
func (o *ValidateVasaProviderBadRequest) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this validate vasa provider bad request response has a 3xx status code
func (o *ValidateVasaProviderBadRequest) IsRedirect() bool {
	return false
}

// IsClientError returns true when this validate vasa provider bad request response has a 4xx status code
func (o *ValidateVasaProviderBadRequest) IsClientError() bool {
	return true
}

// IsServerError returns true when this validate vasa provider bad request response has a 5xx status code
func (o *ValidateVasaProviderBadRequest) IsServerError() bool {
	return false
}

// IsCode returns true when this validate vasa provider bad request response a status code equal to that given
func (o *ValidateVasaProviderBadRequest) IsCode(code int) bool {
	return code == 400
}

func (o *ValidateVasaProviderBadRequest) Error() string {
	return fmt.Sprintf("[POST /v1/vasa-providers/validations][%d] validateVasaProviderBadRequest  %+v", 400, o.Payload)
}

func (o *ValidateVasaProviderBadRequest) String() string {
	return fmt.Sprintf("[POST /v1/vasa-providers/validations][%d] validateVasaProviderBadRequest  %+v", 400, o.Payload)
}

func (o *ValidateVasaProviderBadRequest) GetPayload() *models.Error {
	return o.Payload
}

func (o *ValidateVasaProviderBadRequest) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.Error)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewValidateVasaProviderInternalServerError creates a ValidateVasaProviderInternalServerError with default headers values
func NewValidateVasaProviderInternalServerError() *ValidateVasaProviderInternalServerError {
	return &ValidateVasaProviderInternalServerError{}
}

/*
ValidateVasaProviderInternalServerError describes a response with status code 500, with default header values.

Internal Server Error
*/
type ValidateVasaProviderInternalServerError struct {
}

// IsSuccess returns true when this validate vasa provider internal server error response has a 2xx status code
func (o *ValidateVasaProviderInternalServerError) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this validate vasa provider internal server error response has a 3xx status code
func (o *ValidateVasaProviderInternalServerError) IsRedirect() bool {
	return false
}

// IsClientError returns true when this validate vasa provider internal server error response has a 4xx status code
func (o *ValidateVasaProviderInternalServerError) IsClientError() bool {
	return false
}

// IsServerError returns true when this validate vasa provider internal server error response has a 5xx status code
func (o *ValidateVasaProviderInternalServerError) IsServerError() bool {
	return true
}

// IsCode returns true when this validate vasa provider internal server error response a status code equal to that given
func (o *ValidateVasaProviderInternalServerError) IsCode(code int) bool {
	return code == 500
}

func (o *ValidateVasaProviderInternalServerError) Error() string {
	return fmt.Sprintf("[POST /v1/vasa-providers/validations][%d] validateVasaProviderInternalServerError ", 500)
}

func (o *ValidateVasaProviderInternalServerError) String() string {
	return fmt.Sprintf("[POST /v1/vasa-providers/validations][%d] validateVasaProviderInternalServerError ", 500)
}

func (o *ValidateVasaProviderInternalServerError) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}
