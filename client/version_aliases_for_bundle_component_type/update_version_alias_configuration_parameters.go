// Code generated by go-swagger; DO NOT EDIT.

// Copyright Â© 2023 VMware, Inc. All Rights Reserved.
// Code licenced under: BSD-2

package version_aliases_for_bundle_component_type

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"net/http"
	"time"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/runtime"
	cr "github.com/go-openapi/runtime/client"
	"github.com/go-openapi/strfmt"

	"vcf-sdk-go/models"
)

// NewUpdateVersionAliasConfigurationParams creates a new UpdateVersionAliasConfigurationParams object,
// with the default timeout for this client.
//
// Default values are not hydrated, since defaults are normally applied by the API server side.
//
// To enforce default values in parameter, use SetDefaults or WithDefaults.
func NewUpdateVersionAliasConfigurationParams() *UpdateVersionAliasConfigurationParams {
	return &UpdateVersionAliasConfigurationParams{
		timeout: cr.DefaultTimeout,
	}
}

// NewUpdateVersionAliasConfigurationParamsWithTimeout creates a new UpdateVersionAliasConfigurationParams object
// with the ability to set a timeout on a request.
func NewUpdateVersionAliasConfigurationParamsWithTimeout(timeout time.Duration) *UpdateVersionAliasConfigurationParams {
	return &UpdateVersionAliasConfigurationParams{
		timeout: timeout,
	}
}

// NewUpdateVersionAliasConfigurationParamsWithContext creates a new UpdateVersionAliasConfigurationParams object
// with the ability to set a context for a request.
func NewUpdateVersionAliasConfigurationParamsWithContext(ctx context.Context) *UpdateVersionAliasConfigurationParams {
	return &UpdateVersionAliasConfigurationParams{
		Context: ctx,
	}
}

// NewUpdateVersionAliasConfigurationParamsWithHTTPClient creates a new UpdateVersionAliasConfigurationParams object
// with the ability to set a custom HTTPClient for a request.
func NewUpdateVersionAliasConfigurationParamsWithHTTPClient(client *http.Client) *UpdateVersionAliasConfigurationParams {
	return &UpdateVersionAliasConfigurationParams{
		HTTPClient: client,
	}
}

/*
UpdateVersionAliasConfigurationParams contains all the parameters to send to the API endpoint

	for the update version alias configuration operation.

	Typically these are written to a http.Request.
*/
type UpdateVersionAliasConfigurationParams struct {

	/* AliasSpec.

	   Alias Specification
	*/
	AliasSpec *models.AliasSpec

	/* BundleComponentType.

	   Bundle Component Type
	*/
	BundleComponentType string

	/* Version.

	   Version
	*/
	Version string

	timeout    time.Duration
	Context    context.Context
	HTTPClient *http.Client
}

// WithDefaults hydrates default values in the update version alias configuration params (not the query body).
//
// All values with no default are reset to their zero value.
func (o *UpdateVersionAliasConfigurationParams) WithDefaults() *UpdateVersionAliasConfigurationParams {
	o.SetDefaults()
	return o
}

// SetDefaults hydrates default values in the update version alias configuration params (not the query body).
//
// All values with no default are reset to their zero value.
func (o *UpdateVersionAliasConfigurationParams) SetDefaults() {
	// no default values defined for this parameter
}

// WithTimeout adds the timeout to the update version alias configuration params
func (o *UpdateVersionAliasConfigurationParams) WithTimeout(timeout time.Duration) *UpdateVersionAliasConfigurationParams {
	o.SetTimeout(timeout)
	return o
}

// SetTimeout adds the timeout to the update version alias configuration params
func (o *UpdateVersionAliasConfigurationParams) SetTimeout(timeout time.Duration) {
	o.timeout = timeout
}

// WithContext adds the context to the update version alias configuration params
func (o *UpdateVersionAliasConfigurationParams) WithContext(ctx context.Context) *UpdateVersionAliasConfigurationParams {
	o.SetContext(ctx)
	return o
}

// SetContext adds the context to the update version alias configuration params
func (o *UpdateVersionAliasConfigurationParams) SetContext(ctx context.Context) {
	o.Context = ctx
}

// WithHTTPClient adds the HTTPClient to the update version alias configuration params
func (o *UpdateVersionAliasConfigurationParams) WithHTTPClient(client *http.Client) *UpdateVersionAliasConfigurationParams {
	o.SetHTTPClient(client)
	return o
}

// SetHTTPClient adds the HTTPClient to the update version alias configuration params
func (o *UpdateVersionAliasConfigurationParams) SetHTTPClient(client *http.Client) {
	o.HTTPClient = client
}

// WithAliasSpec adds the aliasSpec to the update version alias configuration params
func (o *UpdateVersionAliasConfigurationParams) WithAliasSpec(aliasSpec *models.AliasSpec) *UpdateVersionAliasConfigurationParams {
	o.SetAliasSpec(aliasSpec)
	return o
}

// SetAliasSpec adds the aliasSpec to the update version alias configuration params
func (o *UpdateVersionAliasConfigurationParams) SetAliasSpec(aliasSpec *models.AliasSpec) {
	o.AliasSpec = aliasSpec
}

// WithBundleComponentType adds the bundleComponentType to the update version alias configuration params
func (o *UpdateVersionAliasConfigurationParams) WithBundleComponentType(bundleComponentType string) *UpdateVersionAliasConfigurationParams {
	o.SetBundleComponentType(bundleComponentType)
	return o
}

// SetBundleComponentType adds the bundleComponentType to the update version alias configuration params
func (o *UpdateVersionAliasConfigurationParams) SetBundleComponentType(bundleComponentType string) {
	o.BundleComponentType = bundleComponentType
}

// WithVersion adds the version to the update version alias configuration params
func (o *UpdateVersionAliasConfigurationParams) WithVersion(version string) *UpdateVersionAliasConfigurationParams {
	o.SetVersion(version)
	return o
}

// SetVersion adds the version to the update version alias configuration params
func (o *UpdateVersionAliasConfigurationParams) SetVersion(version string) {
	o.Version = version
}

// WriteToRequest writes these params to a swagger request
func (o *UpdateVersionAliasConfigurationParams) WriteToRequest(r runtime.ClientRequest, reg strfmt.Registry) error {

	if err := r.SetTimeout(o.timeout); err != nil {
		return err
	}
	var res []error
	if o.AliasSpec != nil {
		if err := r.SetBodyParam(o.AliasSpec); err != nil {
			return err
		}
	}

	// path param bundleComponentType
	if err := r.SetPathParam("bundleComponentType", o.BundleComponentType); err != nil {
		return err
	}

	// path param version
	if err := r.SetPathParam("version", o.Version); err != nil {
		return err
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}
