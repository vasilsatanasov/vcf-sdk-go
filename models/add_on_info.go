// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// AddOnInfo AddOn contains bits to install/update the appropriate Cloud Foundation software components in your management domain or workload domain.
//
// swagger:model AddOnInfo
type AddOnInfo struct {

	// Add On display name
	DisplayName string `json:"displayName,omitempty"`

	// Add On display version
	DisplayVersion string `json:"displayVersion,omitempty"`

	// Component name
	// Example: DELL-sample-Addon
	// Required: true
	Name *string `json:"name"`

	// vendor
	// Example: Dell
	// Required: true
	Vendor *string `json:"vendor"`

	// Add on software version
	// Example: 2.0-1
	// Required: true
	Version *string `json:"version"`
}

// Validate validates this add on info
func (m *AddOnInfo) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateName(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateVendor(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateVersion(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *AddOnInfo) validateName(formats strfmt.Registry) error {

	if err := validate.Required("name", "body", m.Name); err != nil {
		return err
	}

	return nil
}

func (m *AddOnInfo) validateVendor(formats strfmt.Registry) error {

	if err := validate.Required("vendor", "body", m.Vendor); err != nil {
		return err
	}

	return nil
}

func (m *AddOnInfo) validateVersion(formats strfmt.Registry) error {

	if err := validate.Required("version", "body", m.Version); err != nil {
		return err
	}

	return nil
}

// ContextValidate validates this add on info based on context it is used
func (m *AddOnInfo) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (m *AddOnInfo) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *AddOnInfo) UnmarshalBinary(b []byte) error {
	var res AddOnInfo
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
