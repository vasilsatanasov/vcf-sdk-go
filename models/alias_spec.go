// Code generated by go-swagger; DO NOT EDIT.

// Copyright Â© 2023 VMware, Inc. All Rights Reserved.
// Code licenced under: BSD-2

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// AliasSpec Version Alias update Specification. This specification gets used in the Version Alias Update API.
//
// swagger:model AliasSpec
type AliasSpec struct {

	// Aliases for bundle component type and version.
	// Required: true
	Aliases []string `json:"aliases"`

	// Flag for force update version alias configuration.
	ForceUpdate bool `json:"forceUpdate,omitempty"`
}

// Validate validates this alias spec
func (m *AliasSpec) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateAliases(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *AliasSpec) validateAliases(formats strfmt.Registry) error {

	if err := validate.Required("aliases", "body", m.Aliases); err != nil {
		return err
	}

	return nil
}

// ContextValidate validates this alias spec based on context it is used
func (m *AliasSpec) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (m *AliasSpec) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *AliasSpec) UnmarshalBinary(b []byte) error {
	var res AliasSpec
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
