// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// Avn Defines an Application virtual Network (AVN) and its attributes
//
// swagger:model Avn
type Avn struct {

	// AVN search domain
	// Example: rainpole.io
	DomainName string `json:"domainName,omitempty"`

	// Gateway of the AVN subnet
	// Example: 192.168.31.1
	// Required: true
	Gateway *string `json:"gateway"`

	// The UUID of the AVN
	// Example: 3f39d4a1-78d2-11e8-af85-f1cf26258cdc
	ID string `json:"id,omitempty"`

	// MTU for the AVN
	// Example: 1600
	// Required: true
	Mtu *int32 `json:"mtu"`

	// User provided name of the AVN
	// Example: vRealize-AVN
	// Required: true
	Name *string `json:"name"`

	// Port group name identifying the AVN on the distributed switch
	// Example: sfo-m01-seg01-pg
	PortGroupName string `json:"portGroupName,omitempty"`

	// The region type of AVN; X_REGION or REGION_A
	// Example: REGION_A
	// Required: true
	RegionType *string `json:"regionType"`

	// Name of Tier-1 Gateway AVN is connected to
	// Example: sfo-m01-ec01-t1-gw01
	RouterName string `json:"routerName,omitempty"`

	// Subnet assigned to the AVN
	// Example: 192.168.31.0
	// Required: true
	Subnet *string `json:"subnet"`

	// Subnet mask for the network assigned to the AVN
	// Example: 255.255.255.0
	// Required: true
	SubnetMask *string `json:"subnetMask"`

	// VLAN ID for the VLAN backed AVN
	// Example: 30
	VlanID int32 `json:"vlanId,omitempty"`
}

// Validate validates this avn
func (m *Avn) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateGateway(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateMtu(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateName(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateRegionType(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateSubnet(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateSubnetMask(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *Avn) validateGateway(formats strfmt.Registry) error {

	if err := validate.Required("gateway", "body", m.Gateway); err != nil {
		return err
	}

	return nil
}

func (m *Avn) validateMtu(formats strfmt.Registry) error {

	if err := validate.Required("mtu", "body", m.Mtu); err != nil {
		return err
	}

	return nil
}

func (m *Avn) validateName(formats strfmt.Registry) error {

	if err := validate.Required("name", "body", m.Name); err != nil {
		return err
	}

	return nil
}

func (m *Avn) validateRegionType(formats strfmt.Registry) error {

	if err := validate.Required("regionType", "body", m.RegionType); err != nil {
		return err
	}

	return nil
}

func (m *Avn) validateSubnet(formats strfmt.Registry) error {

	if err := validate.Required("subnet", "body", m.Subnet); err != nil {
		return err
	}

	return nil
}

func (m *Avn) validateSubnetMask(formats strfmt.Registry) error {

	if err := validate.Required("subnetMask", "body", m.SubnetMask); err != nil {
		return err
	}

	return nil
}

// ContextValidate validates this avn based on context it is used
func (m *Avn) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (m *Avn) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *Avn) UnmarshalBinary(b []byte) error {
	var res Avn
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
