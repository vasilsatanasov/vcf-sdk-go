// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// BackupLocation Backup location to backup VCF resources
//
// swagger:model BackupLocation
type BackupLocation struct {

	// Full directory path to save the backup files
	DirectoryPath string `json:"directoryPath,omitempty"`

	// Backup server password
	// Required: true
	Password *string `json:"password"`

	// Port number for the backup server to connect
	Port int32 `json:"port,omitempty"`

	// Protocol to be used for transferring files
	// Example: SFTP
	// Required: true
	Protocol *string `json:"protocol"`

	// IP address or FQDN  of the backup server
	Server string `json:"server,omitempty"`

	// SSH fingerprint of the backup server
	SSHFingerprint string `json:"sshFingerprint,omitempty"`

	// Password for backup server username
	Username string `json:"username,omitempty"`
}

// Validate validates this backup location
func (m *BackupLocation) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validatePassword(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateProtocol(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *BackupLocation) validatePassword(formats strfmt.Registry) error {

	if err := validate.Required("password", "body", m.Password); err != nil {
		return err
	}

	return nil
}

func (m *BackupLocation) validateProtocol(formats strfmt.Registry) error {

	if err := validate.Required("protocol", "body", m.Protocol); err != nil {
		return err
	}

	return nil
}

// ContextValidate validates this backup location based on context it is used
func (m *BackupLocation) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (m *BackupLocation) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *BackupLocation) UnmarshalBinary(b []byte) error {
	var res BackupLocation
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
