// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// BgpPeerSpec This specification contains configuration inputs required for BGP configuration for an uplink
//
// swagger:model BgpPeerSpec
type BgpPeerSpec struct {

	// ASN of Peer
	// Required: true
	Asn *int64 `json:"asn"`

	// BGP Peer IP
	// Required: true
	IP *string `json:"ip"`

	// BGP Peer Password
	// Required: true
	Password *string `json:"password"`
}

// Validate validates this bgp peer spec
func (m *BgpPeerSpec) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateAsn(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateIP(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validatePassword(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *BgpPeerSpec) validateAsn(formats strfmt.Registry) error {

	if err := validate.Required("asn", "body", m.Asn); err != nil {
		return err
	}

	return nil
}

func (m *BgpPeerSpec) validateIP(formats strfmt.Registry) error {

	if err := validate.Required("ip", "body", m.IP); err != nil {
		return err
	}

	return nil
}

func (m *BgpPeerSpec) validatePassword(formats strfmt.Registry) error {

	if err := validate.Required("password", "body", m.Password); err != nil {
		return err
	}

	return nil
}

// ContextValidate validates this bgp peer spec based on context it is used
func (m *BgpPeerSpec) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (m *BgpPeerSpec) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *BgpPeerSpec) UnmarshalBinary(b []byte) error {
	var res BgpPeerSpec
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
