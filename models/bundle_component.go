// Code generated by go-swagger; DO NOT EDIT.

// Copyright 2023 VMware, Inc.
// SPDX-License-Identifier: BSD-2-Clause

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// BundleComponent Bundle Software Component
//
// swagger:model BundleComponent
type BundleComponent struct {

	// Bundle Component Description
	Description string `json:"description,omitempty"`

	// Bundle Component's from/source version before Upgrade
	FromVersion string `json:"fromVersion,omitempty"`

	// ID of Resource/Software Component
	ID string `json:"id,omitempty"`

	// Bundle Component Image Type
	// Example: One among: PATCH, INSTALL
	// Required: true
	ImageType *string `json:"imageType"`

	// Bundle Component Release Date
	ReleasedDate string `json:"releasedDate,omitempty"`

	// Bundle Component's to/target version after Upgrade
	ToVersion string `json:"toVersion,omitempty"`

	// Type of Resource/Software Component
	Type string `json:"type,omitempty"`

	// Bundle Component Vendor
	Vendor string `json:"vendor,omitempty"`
}

// Validate validates this bundle component
func (m *BundleComponent) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateImageType(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *BundleComponent) validateImageType(formats strfmt.Registry) error {

	if err := validate.Required("imageType", "body", m.ImageType); err != nil {
		return err
	}

	return nil
}

// ContextValidate validates this bundle component based on context it is used
func (m *BundleComponent) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (m *BundleComponent) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *BundleComponent) UnmarshalBinary(b []byte) error {
	var res BundleComponent
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
