// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// BundleRecall Bundle Recall model for collection of bundles that are recalled with their replacements if applicable.
//
// swagger:model BundleRecall
type BundleRecall struct {

	// List of Bundle IDs that are recalled
	// Required: true
	RecalledBundleIds []string `json:"recalledBundleIds"`

	// List of Bundle IDs that act as replacement
	ReplacementBundleIds []string `json:"replacementBundleIds"`

	// Status of bundle replacement.
	// Example: One among: NONE, PENDING, READY
	// Required: true
	ReplacementBundleStatus *string `json:"replacementBundleStatus"`
}

// Validate validates this bundle recall
func (m *BundleRecall) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateRecalledBundleIds(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateReplacementBundleStatus(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *BundleRecall) validateRecalledBundleIds(formats strfmt.Registry) error {

	if err := validate.Required("recalledBundleIds", "body", m.RecalledBundleIds); err != nil {
		return err
	}

	return nil
}

func (m *BundleRecall) validateReplacementBundleStatus(formats strfmt.Registry) error {

	if err := validate.Required("replacementBundleStatus", "body", m.ReplacementBundleStatus); err != nil {
		return err
	}

	return nil
}

// ContextValidate validates this bundle recall based on context it is used
func (m *BundleRecall) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (m *BundleRecall) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *BundleRecall) UnmarshalBinary(b []byte) error {
	var res BundleRecall
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
