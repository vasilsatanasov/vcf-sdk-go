// Code generated by go-swagger; DO NOT EDIT.

// Copyright 2023 VMware, Inc.
// SPDX-License-Identifier: BSD-2-Clause

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// CertificateAuthority The Certificate Authority (CA) details
//
// swagger:model CertificateAuthority
type CertificateAuthority struct {

	// OpenSSL CA domain name
	// Example: OpenSSL CA
	CommonName string `json:"commonName,omitempty"`

	// ISO 3166 country code where company is legally registered
	// Example: IN
	Country string `json:"country,omitempty"`

	// CA type. Only supports Microsoft and OpenSSL CAs
	// Example: One among: OpenSSL, Microsoft
	// Required: true
	ID *string `json:"id"`

	// The city or locality where company is legally registered
	// Example: Bengaluru
	Locality string `json:"locality,omitempty"`

	// The name under which company is legally registered
	// Example: VMware Inc.
	Organization string `json:"organization,omitempty"`

	// Organization with which the certificate is associated
	// Example: VCF
	OrganizationUnit string `json:"organizationUnit,omitempty"`

	// Microsoft CA server url
	// Example: https://sfo-ad.rainpole.io/certsrv
	ServerURL string `json:"serverUrl,omitempty"`

	// The full name of the state where company is legally registered
	// Example: Karnataka
	State string `json:"state,omitempty"`

	// Microsoft CA server template name
	// Example: WebServer
	TemplateName string `json:"templateName,omitempty"`

	// Microsoft CA server username
	// Example: Administrator
	Username string `json:"username,omitempty"`
}

// Validate validates this certificate authority
func (m *CertificateAuthority) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateID(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *CertificateAuthority) validateID(formats strfmt.Registry) error {

	if err := validate.Required("id", "body", m.ID); err != nil {
		return err
	}

	return nil
}

// ContextValidate validates this certificate authority based on context it is used
func (m *CertificateAuthority) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (m *CertificateAuthority) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *CertificateAuthority) UnmarshalBinary(b []byte) error {
	var res CertificateAuthority
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
