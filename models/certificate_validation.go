// Code generated by go-swagger; DO NOT EDIT.

// Copyright 2023 VMware, Inc.
// SPDX-License-Identifier: BSD-2-Clause

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// CertificateValidation The Certificate Validation details.
//
// swagger:model CertificateValidation
type CertificateValidation struct {

	// End Timestamp
	// Example: 2021-02-02T00:00:00.000Z
	EndTimestamp string `json:"endTimestamp,omitempty"`

	// Resource FQDN
	// Example: sfo-vc01.rainpole.io
	// Required: true
	ResourceFqdn *string `json:"resourceFqdn"`

	// Resource ID
	// Example: BE8A5E04-92A0-43F6-A166-AA041F4327CC
	// Required: true
	ResourceID *string `json:"resourceId"`

	// Start Timestamp
	// Example: 2020-01-01T00:00:00.000Z
	// Required: true
	StartTimestamp *string `json:"startTimestamp"`

	// Validation Message
	// Example: Certificate Expired
	ValidationMessage string `json:"validationMessage,omitempty"`

	// Validation Status
	// Example: One among: INPROGRESS, SUCCESSFUL, FAILED
	// Required: true
	ValidationStatus *string `json:"validationStatus"`
}

// Validate validates this certificate validation
func (m *CertificateValidation) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateResourceFqdn(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateResourceID(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateStartTimestamp(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateValidationStatus(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *CertificateValidation) validateResourceFqdn(formats strfmt.Registry) error {

	if err := validate.Required("resourceFqdn", "body", m.ResourceFqdn); err != nil {
		return err
	}

	return nil
}

func (m *CertificateValidation) validateResourceID(formats strfmt.Registry) error {

	if err := validate.Required("resourceId", "body", m.ResourceID); err != nil {
		return err
	}

	return nil
}

func (m *CertificateValidation) validateStartTimestamp(formats strfmt.Registry) error {

	if err := validate.Required("startTimestamp", "body", m.StartTimestamp); err != nil {
		return err
	}

	return nil
}

func (m *CertificateValidation) validateValidationStatus(formats strfmt.Registry) error {

	if err := validate.Required("validationStatus", "body", m.ValidationStatus); err != nil {
		return err
	}

	return nil
}

// ContextValidate validates this certificate validation based on context it is used
func (m *CertificateValidation) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (m *CertificateValidation) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *CertificateValidation) UnmarshalBinary(b []byte) error {
	var res CertificateValidation
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
