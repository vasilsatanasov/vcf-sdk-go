// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"strconv"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// ClusterStretchSpec This spec contains the parameters required to convert a Standard vSAN cluster to a Stretched cluster
//
// swagger:model ClusterStretchSpec
type ClusterStretchSpec struct {

	// List of vSphere host information from the free pool to consume in the workload domain
	// Required: true
	HostSpecs []*HostSpec `json:"hostSpecs"`

	// Edge cluster configured for multi AZ
	IsEdgeClusterConfiguredForMultiAZ bool `json:"isEdgeClusterConfiguredForMultiAZ,omitempty"`

	// Secondary AZ Overlay Vlan Id
	// Required: true
	SecondaryAzOverlayVlanID *int32 `json:"secondaryAzOverlayVlanId"`

	// vSAN Network Pool Specs
	VsanNetworkSpecs []*VSANNetworkSpec `json:"vsanNetworkSpecs"`

	// Witness host information
	// Required: true
	WitnessSpec *WitnessSpec `json:"witnessSpec"`

	// Witness traffic to be shared with vSAN traffic
	WitnessTrafficSharedWithVsanTraffic bool `json:"witnessTrafficSharedWithVsanTraffic,omitempty"`
}

// Validate validates this cluster stretch spec
func (m *ClusterStretchSpec) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateHostSpecs(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateSecondaryAzOverlayVlanID(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateVsanNetworkSpecs(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateWitnessSpec(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *ClusterStretchSpec) validateHostSpecs(formats strfmt.Registry) error {

	if err := validate.Required("hostSpecs", "body", m.HostSpecs); err != nil {
		return err
	}

	for i := 0; i < len(m.HostSpecs); i++ {
		if swag.IsZero(m.HostSpecs[i]) { // not required
			continue
		}

		if m.HostSpecs[i] != nil {
			if err := m.HostSpecs[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("hostSpecs" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("hostSpecs" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *ClusterStretchSpec) validateSecondaryAzOverlayVlanID(formats strfmt.Registry) error {

	if err := validate.Required("secondaryAzOverlayVlanId", "body", m.SecondaryAzOverlayVlanID); err != nil {
		return err
	}

	return nil
}

func (m *ClusterStretchSpec) validateVsanNetworkSpecs(formats strfmt.Registry) error {
	if swag.IsZero(m.VsanNetworkSpecs) { // not required
		return nil
	}

	for i := 0; i < len(m.VsanNetworkSpecs); i++ {
		if swag.IsZero(m.VsanNetworkSpecs[i]) { // not required
			continue
		}

		if m.VsanNetworkSpecs[i] != nil {
			if err := m.VsanNetworkSpecs[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("vsanNetworkSpecs" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("vsanNetworkSpecs" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *ClusterStretchSpec) validateWitnessSpec(formats strfmt.Registry) error {

	if err := validate.Required("witnessSpec", "body", m.WitnessSpec); err != nil {
		return err
	}

	if m.WitnessSpec != nil {
		if err := m.WitnessSpec.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("witnessSpec")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("witnessSpec")
			}
			return err
		}
	}

	return nil
}

// ContextValidate validate this cluster stretch spec based on the context it is used
func (m *ClusterStretchSpec) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := m.contextValidateHostSpecs(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateVsanNetworkSpecs(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateWitnessSpec(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *ClusterStretchSpec) contextValidateHostSpecs(ctx context.Context, formats strfmt.Registry) error {

	for i := 0; i < len(m.HostSpecs); i++ {

		if m.HostSpecs[i] != nil {
			if err := m.HostSpecs[i].ContextValidate(ctx, formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("hostSpecs" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("hostSpecs" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *ClusterStretchSpec) contextValidateVsanNetworkSpecs(ctx context.Context, formats strfmt.Registry) error {

	for i := 0; i < len(m.VsanNetworkSpecs); i++ {

		if m.VsanNetworkSpecs[i] != nil {
			if err := m.VsanNetworkSpecs[i].ContextValidate(ctx, formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("vsanNetworkSpecs" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("vsanNetworkSpecs" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *ClusterStretchSpec) contextValidateWitnessSpec(ctx context.Context, formats strfmt.Registry) error {

	if m.WitnessSpec != nil {
		if err := m.WitnessSpec.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("witnessSpec")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("witnessSpec")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (m *ClusterStretchSpec) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *ClusterStretchSpec) UnmarshalBinary(b []byte) error {
	var res ClusterStretchSpec
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
