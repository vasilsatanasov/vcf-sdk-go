// Code generated by go-swagger; DO NOT EDIT.

// Copyright 2023 VMware, Inc.
// SPDX-License-Identifier: BSD-2-Clause

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"encoding/json"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// DataMetric Represents a single metric representing digital data
//
// swagger:model DataMetric
type DataMetric struct {

	// Unit of the metric
	// Enum: [B KB MB GB TB PB]
	Unit string `json:"unit,omitempty"`

	// Value of the metric
	Value float64 `json:"value,omitempty"`
}

// Validate validates this data metric
func (m *DataMetric) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateUnit(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

var dataMetricTypeUnitPropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["B","KB","MB","GB","TB","PB"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		dataMetricTypeUnitPropEnum = append(dataMetricTypeUnitPropEnum, v)
	}
}

const (

	// DataMetricUnitB captures enum value "B"
	DataMetricUnitB string = "B"

	// DataMetricUnitKB captures enum value "KB"
	DataMetricUnitKB string = "KB"

	// DataMetricUnitMB captures enum value "MB"
	DataMetricUnitMB string = "MB"

	// DataMetricUnitGB captures enum value "GB"
	DataMetricUnitGB string = "GB"

	// DataMetricUnitTB captures enum value "TB"
	DataMetricUnitTB string = "TB"

	// DataMetricUnitPB captures enum value "PB"
	DataMetricUnitPB string = "PB"
)

// prop value enum
func (m *DataMetric) validateUnitEnum(path, location string, value string) error {
	if err := validate.EnumCase(path, location, value, dataMetricTypeUnitPropEnum, true); err != nil {
		return err
	}
	return nil
}

func (m *DataMetric) validateUnit(formats strfmt.Registry) error {
	if swag.IsZero(m.Unit) { // not required
		return nil
	}

	// value enum
	if err := m.validateUnitEnum("unit", "body", m.Unit); err != nil {
		return err
	}

	return nil
}

// ContextValidate validates this data metric based on context it is used
func (m *DataMetric) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (m *DataMetric) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *DataMetric) UnmarshalBinary(b []byte) error {
	var res DataMetric
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
