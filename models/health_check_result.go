// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// HealthCheckResult HealthCheckResult
//
// swagger:model HealthCheckResult
type HealthCheckResult struct {

	// Health check description
	// Required: true
	Description *string `json:"description"`

	// Health Check id
	// Required: true
	ID *string `json:"id"`

	// Health Check name
	// Required: true
	Name *string `json:"name"`

	// ID of the resource, if the ResourceType is CLUSTER, then the resourceId == ClusterId
	ResourceID string `json:"resourceId,omitempty"`

	// Name of  resource, if the ResourceType is CLUSTER, then the resourceName == ClusterName
	ResourceName string `json:"resourceName,omitempty"`

	// Type of the health status.
	// Example: One among: CLUSTER
	ResourceType string `json:"resourceType,omitempty"`

	// Type of the health status.
	// Example: One among: ENABLED, DISABLED
	Status string `json:"status,omitempty"`

	// Type of the health check.
	// Example: One among: VSAN
	Type string `json:"type,omitempty"`
}

// Validate validates this health check result
func (m *HealthCheckResult) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateDescription(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateID(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateName(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *HealthCheckResult) validateDescription(formats strfmt.Registry) error {

	if err := validate.Required("description", "body", m.Description); err != nil {
		return err
	}

	return nil
}

func (m *HealthCheckResult) validateID(formats strfmt.Registry) error {

	if err := validate.Required("id", "body", m.ID); err != nil {
		return err
	}

	return nil
}

func (m *HealthCheckResult) validateName(formats strfmt.Registry) error {

	if err := validate.Required("name", "body", m.Name); err != nil {
		return err
	}

	return nil
}

// ContextValidate validates this health check result based on context it is used
func (m *HealthCheckResult) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (m *HealthCheckResult) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *HealthCheckResult) UnmarshalBinary(b []byte) error {
	var res HealthCheckResult
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
