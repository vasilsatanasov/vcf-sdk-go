// Code generated by go-swagger; DO NOT EDIT.

// Copyright 2023 VMware, Inc.
// SPDX-License-Identifier: BSD-2-Clause

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"

	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
)

// HealthChecks health checks
//
// swagger:model HealthChecks
type HealthChecks struct {

	// Performs Certificate health checks.
	CertificateHealth bool `json:"certificateHealth,omitempty"`

	// Performs Composability Health checks.
	ComposabilityHealth bool `json:"composabilityHealth,omitempty"`

	// Performs Compute Health checks.
	ComputeHealth bool `json:"computeHealth,omitempty"`

	// Performs Connectivity health checks.
	ConnectivityHealth bool `json:"connectivityHealth,omitempty"`

	// Performs DNS Health checks.
	DNSHealth bool `json:"dnsHealth,omitempty"`

	// Performs some generic health checks.
	GeneralHealth bool `json:"generalHealth,omitempty"`

	// Performs HardwareCompatibilityHealth Health checks.
	HardwareCompatibilityHealth bool `json:"hardwareCompatibilityHealth,omitempty"`

	// Performs NTP checks for components.
	NtpHealth bool `json:"ntpHealth,omitempty"`

	// Performs Password Expiry checks.
	PasswordHealth bool `json:"passwordHealth,omitempty"`

	// Performs checks on Services health.
	ServicesHealth bool `json:"servicesHealth,omitempty"`

	// Performs Storage Health checks.
	StorageHealth bool `json:"storageHealth,omitempty"`

	// Perform version checks for VCF components.
	VersionHealth bool `json:"versionHealth,omitempty"`
}

// Validate validates this health checks
func (m *HealthChecks) Validate(formats strfmt.Registry) error {
	return nil
}

// ContextValidate validates this health checks based on context it is used
func (m *HealthChecks) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (m *HealthChecks) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *HealthChecks) UnmarshalBinary(b []byte) error {
	var res HealthChecks
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
