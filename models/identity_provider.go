// Code generated by go-swagger; DO NOT EDIT.

// Copyright Â© 2023 VMware, Inc. All Rights Reserved.
// Code licenced under: BSD-2

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"strconv"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
)

// IdentityProvider Represents Identity Provider and its attributes
//
// swagger:model IdentityProvider
type IdentityProvider struct {

	// The Domains of the Identity Provider
	DomainNames []string `json:"domainNames"`

	// ID of the Identity Provider
	ID string `json:"id,omitempty"`

	// The Identity Sources of the Identity Provider
	IdentitySources []*VcIdentitySources `json:"identitySources"`

	// The LDAP configuration of the Identity Provider
	Ldap *LdapInfo `json:"ldap,omitempty"`

	// The user-friendly name for the Identity Provider
	Name string `json:"name,omitempty"`

	// Identity management configuration when the Identity Provider is based on OIDC
	Oidc *OidcInfo `json:"oidc,omitempty"`

	// The status of the Identity Provider (set as ACTIVE for currently enabled Identity Provider)
	// Example: One among: ACTIVE, INACTIVE
	Status string `json:"status,omitempty"`

	// The type of the Identity Provider
	Type string `json:"type,omitempty"`
}

// Validate validates this identity provider
func (m *IdentityProvider) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateIdentitySources(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateLdap(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateOidc(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *IdentityProvider) validateIdentitySources(formats strfmt.Registry) error {
	if swag.IsZero(m.IdentitySources) { // not required
		return nil
	}

	for i := 0; i < len(m.IdentitySources); i++ {
		if swag.IsZero(m.IdentitySources[i]) { // not required
			continue
		}

		if m.IdentitySources[i] != nil {
			if err := m.IdentitySources[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("identitySources" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("identitySources" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *IdentityProvider) validateLdap(formats strfmt.Registry) error {
	if swag.IsZero(m.Ldap) { // not required
		return nil
	}

	if m.Ldap != nil {
		if err := m.Ldap.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("ldap")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("ldap")
			}
			return err
		}
	}

	return nil
}

func (m *IdentityProvider) validateOidc(formats strfmt.Registry) error {
	if swag.IsZero(m.Oidc) { // not required
		return nil
	}

	if m.Oidc != nil {
		if err := m.Oidc.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("oidc")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("oidc")
			}
			return err
		}
	}

	return nil
}

// ContextValidate validate this identity provider based on the context it is used
func (m *IdentityProvider) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := m.contextValidateIdentitySources(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateLdap(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateOidc(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *IdentityProvider) contextValidateIdentitySources(ctx context.Context, formats strfmt.Registry) error {

	for i := 0; i < len(m.IdentitySources); i++ {

		if m.IdentitySources[i] != nil {
			if err := m.IdentitySources[i].ContextValidate(ctx, formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("identitySources" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("identitySources" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *IdentityProvider) contextValidateLdap(ctx context.Context, formats strfmt.Registry) error {

	if m.Ldap != nil {
		if err := m.Ldap.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("ldap")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("ldap")
			}
			return err
		}
	}

	return nil
}

func (m *IdentityProvider) contextValidateOidc(ctx context.Context, formats strfmt.Registry) error {

	if m.Oidc != nil {
		if err := m.Oidc.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("oidc")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("oidc")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (m *IdentityProvider) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *IdentityProvider) UnmarshalBinary(b []byte) error {
	var res IdentityProvider
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
