// Code generated by go-swagger; DO NOT EDIT.

// Copyright Â© 2023 VMware, Inc. All Rights Reserved.
// Code licenced under: BSD-2

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// IPAllocation Defines an IP address with gateway and subnet
//
// swagger:model IpAllocation
type IPAllocation struct {

	// Classless Inter-Domain Routing (CIDR)
	// Example: 172.0.0.0/24
	// Max Length: 18
	// Min Length: 10
	Cidr string `json:"cidr,omitempty"`

	// Gateway
	// Example: 192.168.0.1
	// Max Length: 15
	// Min Length: 7
	Gateway string `json:"gateway,omitempty"`

	// IP Address
	// Example: 192.168.0.123
	// Required: true
	// Max Length: 15
	// Min Length: 7
	IPAddress *string `json:"ipAddress"`

	// Subnet
	// Example: 255.255.255.252
	// Max Length: 15
	// Min Length: 7
	Subnet string `json:"subnet,omitempty"`
}

// Validate validates this Ip allocation
func (m *IPAllocation) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateCidr(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateGateway(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateIPAddress(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateSubnet(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *IPAllocation) validateCidr(formats strfmt.Registry) error {
	if swag.IsZero(m.Cidr) { // not required
		return nil
	}

	if err := validate.MinLength("cidr", "body", m.Cidr, 10); err != nil {
		return err
	}

	if err := validate.MaxLength("cidr", "body", m.Cidr, 18); err != nil {
		return err
	}

	return nil
}

func (m *IPAllocation) validateGateway(formats strfmt.Registry) error {
	if swag.IsZero(m.Gateway) { // not required
		return nil
	}

	if err := validate.MinLength("gateway", "body", m.Gateway, 7); err != nil {
		return err
	}

	if err := validate.MaxLength("gateway", "body", m.Gateway, 15); err != nil {
		return err
	}

	return nil
}

func (m *IPAllocation) validateIPAddress(formats strfmt.Registry) error {

	if err := validate.Required("ipAddress", "body", m.IPAddress); err != nil {
		return err
	}

	if err := validate.MinLength("ipAddress", "body", *m.IPAddress, 7); err != nil {
		return err
	}

	if err := validate.MaxLength("ipAddress", "body", *m.IPAddress, 15); err != nil {
		return err
	}

	return nil
}

func (m *IPAllocation) validateSubnet(formats strfmt.Registry) error {
	if swag.IsZero(m.Subnet) { // not required
		return nil
	}

	if err := validate.MinLength("subnet", "body", m.Subnet, 7); err != nil {
		return err
	}

	if err := validate.MaxLength("subnet", "body", m.Subnet, 15); err != nil {
		return err
	}

	return nil
}

// ContextValidate validates this Ip allocation based on context it is used
func (m *IPAllocation) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (m *IPAllocation) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *IPAllocation) UnmarshalBinary(b []byte) error {
	var res IPAllocation
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
