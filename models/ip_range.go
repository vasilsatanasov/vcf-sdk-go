// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// IPRange Spec contains parameters for range of IP addresses
//
// swagger:model IpRange
type IPRange struct {

	// End IP Address
	// Example: 192.168.0.128
	// Required: true
	// Max Length: 15
	// Min Length: 7
	EndIPAddress *string `json:"endIpAddress"`

	// Start IP Address
	// Example: 192.168.0.123
	// Required: true
	// Max Length: 15
	// Min Length: 7
	StartIPAddress *string `json:"startIpAddress"`
}

// Validate validates this Ip range
func (m *IPRange) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateEndIPAddress(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateStartIPAddress(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *IPRange) validateEndIPAddress(formats strfmt.Registry) error {

	if err := validate.Required("endIpAddress", "body", m.EndIPAddress); err != nil {
		return err
	}

	if err := validate.MinLength("endIpAddress", "body", *m.EndIPAddress, 7); err != nil {
		return err
	}

	if err := validate.MaxLength("endIpAddress", "body", *m.EndIPAddress, 15); err != nil {
		return err
	}

	return nil
}

func (m *IPRange) validateStartIPAddress(formats strfmt.Registry) error {

	if err := validate.Required("startIpAddress", "body", m.StartIPAddress); err != nil {
		return err
	}

	if err := validate.MinLength("startIpAddress", "body", *m.StartIPAddress, 7); err != nil {
		return err
	}

	if err := validate.MaxLength("startIpAddress", "body", *m.StartIPAddress, 15); err != nil {
		return err
	}

	return nil
}

// ContextValidate validates this Ip range based on context it is used
func (m *IPRange) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (m *IPRange) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *IPRange) UnmarshalBinary(b []byte) error {
	var res IPRange
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
