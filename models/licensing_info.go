// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// LicensingInfo Licensing information of the resource
//
// swagger:model LicensingInfo
type LicensingInfo struct {

	// Number of days remaining to subscribe
	DaysRemainingToSubscribe int32 `json:"daysRemainingToSubscribe,omitempty"`

	// Flag indicating the resource is registered for subscription or not
	IsRegistered bool `json:"isRegistered,omitempty"`

	// Flag indicating the resource is subscribed or not
	IsSubscribed bool `json:"isSubscribed,omitempty"`

	// Licensing mode
	// Example: One among: SUBSCRIPTION, PERPETUAL
	LicensingMode string `json:"licensingMode,omitempty"`

	// ID of the resource, need not be set for the resource of the type : SYSTEM
	ResourceID string `json:"resourceId,omitempty"`

	// Type of the resource
	// Example: One among: SYSTEM, DOMAIN
	// Required: true
	ResourceType *string `json:"resourceType"`

	// Status of the subscription mode
	// Example: One among: UNSUBSCRIBED, ACTIVE, EXPIRED
	SubscriptionStatus string `json:"subscriptionStatus,omitempty"`
}

// Validate validates this licensing info
func (m *LicensingInfo) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateResourceType(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *LicensingInfo) validateResourceType(formats strfmt.Registry) error {

	if err := validate.Required("resourceType", "body", m.ResourceType); err != nil {
		return err
	}

	return nil
}

// ContextValidate validates this licensing info based on context it is used
func (m *LicensingInfo) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (m *LicensingInfo) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *LicensingInfo) UnmarshalBinary(b []byte) error {
	var res LicensingInfo
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
