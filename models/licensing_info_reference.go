// Code generated by go-swagger; DO NOT EDIT.

// Copyright 2023 VMware, Inc.
// SPDX-License-Identifier: BSD-2-Clause

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"

	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
)

// LicensingInfoReference Licensing information of the resource
//
// swagger:model LicensingInfoReference
type LicensingInfoReference struct {

	// Number of days remaining to subscribe
	DaysRemainingToSubscribe int32 `json:"daysRemainingToSubscribe,omitempty"`

	// Flag indicating the resource is registered for subscription or not
	IsRegistered bool `json:"isRegistered,omitempty"`

	// Flag indicating the resource is subscribed or not
	IsSubscribed bool `json:"isSubscribed,omitempty"`

	// Licensing mode
	// Example: One among: SUBSCRIPTION, PERPETUAL, MIXED
	LicensingMode string `json:"licensingMode,omitempty"`

	// Status of the subscription mode
	// Example: One among: UNSUBSCRIBED, ACTIVE, EXPIRED
	SubscriptionStatus string `json:"subscriptionStatus,omitempty"`
}

// Validate validates this licensing info reference
func (m *LicensingInfoReference) Validate(formats strfmt.Registry) error {
	return nil
}

// ContextValidate validates this licensing info reference based on context it is used
func (m *LicensingInfoReference) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (m *LicensingInfoReference) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *LicensingInfoReference) UnmarshalBinary(b []byte) error {
	var res LicensingInfoReference
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
