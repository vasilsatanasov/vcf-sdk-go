// Code generated by go-swagger; DO NOT EDIT.

// Copyright 2023 VMware, Inc.
// SPDX-License-Identifier: BSD-2-Clause

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// MessagePack A message pack representing a localizable message and suitable for machine processing. Contains a message key unique in the scope of the specified component, as well as the arguments needed to generate the localized message.
//
// swagger:model MessagePack
type MessagePack struct {

	// The arguments used to localize the message. Can be used by scripts to automate the response processing.
	Arguments []string `json:"arguments"`

	// The component the message belongs to
	Component string `json:"component,omitempty"`

	// The localized message (if not provided by another property)
	Message string `json:"message,omitempty"`

	// The machine-readable key of the message
	// Required: true
	MessageKey *string `json:"messageKey"`
}

// Validate validates this message pack
func (m *MessagePack) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateMessageKey(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *MessagePack) validateMessageKey(formats strfmt.Registry) error {

	if err := validate.Required("messageKey", "body", m.MessageKey); err != nil {
		return err
	}

	return nil
}

// ContextValidate validates this message pack based on context it is used
func (m *MessagePack) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (m *MessagePack) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *MessagePack) UnmarshalBinary(b []byte) error {
	var res MessagePack
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
