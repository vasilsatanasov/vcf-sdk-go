// Code generated by go-swagger; DO NOT EDIT.

// Copyright Â© 2023 VMware, Inc. All Rights Reserved.
// Code licenced under: BSD-2

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// NasVolumeSpec NAS configuration for NFS based cluster
//
// swagger:model NasVolumeSpec
type NasVolumeSpec struct {

	// Shared directory path used for NFS based cluster creation
	// Required: true
	Path *string `json:"path"`

	// Readonly is used to identify whether to mount the directory as readOnly or not
	// Required: true
	ReadOnly *bool `json:"readOnly"`

	// NFS Server name used for cluster creation
	// Required: true
	ServerName []string `json:"serverName"`

	// User tag used to annotate NFS share
	UserTag string `json:"userTag,omitempty"`
}

// Validate validates this nas volume spec
func (m *NasVolumeSpec) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validatePath(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateReadOnly(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateServerName(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *NasVolumeSpec) validatePath(formats strfmt.Registry) error {

	if err := validate.Required("path", "body", m.Path); err != nil {
		return err
	}

	return nil
}

func (m *NasVolumeSpec) validateReadOnly(formats strfmt.Registry) error {

	if err := validate.Required("readOnly", "body", m.ReadOnly); err != nil {
		return err
	}

	return nil
}

func (m *NasVolumeSpec) validateServerName(formats strfmt.Registry) error {

	if err := validate.Required("serverName", "body", m.ServerName); err != nil {
		return err
	}

	return nil
}

// ContextValidate validates this nas volume spec based on context it is used
func (m *NasVolumeSpec) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (m *NasVolumeSpec) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *NasVolumeSpec) UnmarshalBinary(b []byte) error {
	var res NasVolumeSpec
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
