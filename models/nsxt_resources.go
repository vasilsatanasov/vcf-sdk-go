// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"strconv"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
)

// NsxtResources Nsxt Upgrade Resources for an NSXT instance
//
// swagger:model NsxtResources
type NsxtResources struct {

	// Bundle id used to compute the upgradability
	BundleID string `json:"bundleId,omitempty"`

	// Domain id associated with the NSX-T cluster
	DomainID string `json:"domainId,omitempty"`

	// List of edge clusters that are candidates for upgrade
	NsxtEdgeClusters []*NsxtEdgeCluster `json:"nsxtEdgeClusters"`

	// List of host clusters that are candidates for upgrade
	NsxtHostClusters []*NsxtHostCluster `json:"nsxtHostClusters"`

	// Manager cluster that is a candidate for upgrade
	NsxtManagerCluster *NsxtManagerCluster `json:"nsxtManagerCluster,omitempty"`

	// Upgrade coordinator pertaining to the NSX-T instance
	NsxtUpgradeCoordinator *NsxtUpgradeCoordinator `json:"nsxtUpgradeCoordinator,omitempty"`
}

// Validate validates this nsxt resources
func (m *NsxtResources) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateNsxtEdgeClusters(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateNsxtHostClusters(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateNsxtManagerCluster(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateNsxtUpgradeCoordinator(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *NsxtResources) validateNsxtEdgeClusters(formats strfmt.Registry) error {
	if swag.IsZero(m.NsxtEdgeClusters) { // not required
		return nil
	}

	for i := 0; i < len(m.NsxtEdgeClusters); i++ {
		if swag.IsZero(m.NsxtEdgeClusters[i]) { // not required
			continue
		}

		if m.NsxtEdgeClusters[i] != nil {
			if err := m.NsxtEdgeClusters[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("nsxtEdgeClusters" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("nsxtEdgeClusters" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *NsxtResources) validateNsxtHostClusters(formats strfmt.Registry) error {
	if swag.IsZero(m.NsxtHostClusters) { // not required
		return nil
	}

	for i := 0; i < len(m.NsxtHostClusters); i++ {
		if swag.IsZero(m.NsxtHostClusters[i]) { // not required
			continue
		}

		if m.NsxtHostClusters[i] != nil {
			if err := m.NsxtHostClusters[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("nsxtHostClusters" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("nsxtHostClusters" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *NsxtResources) validateNsxtManagerCluster(formats strfmt.Registry) error {
	if swag.IsZero(m.NsxtManagerCluster) { // not required
		return nil
	}

	if m.NsxtManagerCluster != nil {
		if err := m.NsxtManagerCluster.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("nsxtManagerCluster")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("nsxtManagerCluster")
			}
			return err
		}
	}

	return nil
}

func (m *NsxtResources) validateNsxtUpgradeCoordinator(formats strfmt.Registry) error {
	if swag.IsZero(m.NsxtUpgradeCoordinator) { // not required
		return nil
	}

	if m.NsxtUpgradeCoordinator != nil {
		if err := m.NsxtUpgradeCoordinator.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("nsxtUpgradeCoordinator")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("nsxtUpgradeCoordinator")
			}
			return err
		}
	}

	return nil
}

// ContextValidate validate this nsxt resources based on the context it is used
func (m *NsxtResources) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := m.contextValidateNsxtEdgeClusters(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateNsxtHostClusters(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateNsxtManagerCluster(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateNsxtUpgradeCoordinator(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *NsxtResources) contextValidateNsxtEdgeClusters(ctx context.Context, formats strfmt.Registry) error {

	for i := 0; i < len(m.NsxtEdgeClusters); i++ {

		if m.NsxtEdgeClusters[i] != nil {
			if err := m.NsxtEdgeClusters[i].ContextValidate(ctx, formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("nsxtEdgeClusters" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("nsxtEdgeClusters" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *NsxtResources) contextValidateNsxtHostClusters(ctx context.Context, formats strfmt.Registry) error {

	for i := 0; i < len(m.NsxtHostClusters); i++ {

		if m.NsxtHostClusters[i] != nil {
			if err := m.NsxtHostClusters[i].ContextValidate(ctx, formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("nsxtHostClusters" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("nsxtHostClusters" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *NsxtResources) contextValidateNsxtManagerCluster(ctx context.Context, formats strfmt.Registry) error {

	if m.NsxtManagerCluster != nil {
		if err := m.NsxtManagerCluster.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("nsxtManagerCluster")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("nsxtManagerCluster")
			}
			return err
		}
	}

	return nil
}

func (m *NsxtResources) contextValidateNsxtUpgradeCoordinator(ctx context.Context, formats strfmt.Registry) error {

	if m.NsxtUpgradeCoordinator != nil {
		if err := m.NsxtUpgradeCoordinator.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("nsxtUpgradeCoordinator")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("nsxtUpgradeCoordinator")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (m *NsxtResources) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *NsxtResources) UnmarshalBinary(b []byte) error {
	var res NsxtResources
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
