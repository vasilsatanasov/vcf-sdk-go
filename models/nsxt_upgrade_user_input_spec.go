// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"strconv"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
)

// NsxtUpgradeUserInputSpec Nsxt Upgrade User Input Specification
//
// swagger:model NsxtUpgradeUserInputSpec
type NsxtUpgradeUserInputSpec struct {

	// List of edge clusters information if explicit selection is to be made
	NsxtEdgeClusterUpgradeSpecs []*NsxtEdgeClusterUpgradeSpec `json:"nsxtEdgeClusterUpgradeSpecs"`

	// List of host clusters information if explicit selection is to be made
	NsxtHostClusterUpgradeSpecs []*NsxtHostClusterUpgradeSpec `json:"nsxtHostClusterUpgradeSpecs"`

	// Identifier of the NSXT instance
	NsxtID string `json:"nsxtId,omitempty"`

	// List of host clusters information if explicit selection is to be made
	NsxtUpgradeOptions *NsxtUpgradeOptions `json:"nsxtUpgradeOptions,omitempty"`
}

// Validate validates this nsxt upgrade user input spec
func (m *NsxtUpgradeUserInputSpec) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateNsxtEdgeClusterUpgradeSpecs(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateNsxtHostClusterUpgradeSpecs(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateNsxtUpgradeOptions(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *NsxtUpgradeUserInputSpec) validateNsxtEdgeClusterUpgradeSpecs(formats strfmt.Registry) error {
	if swag.IsZero(m.NsxtEdgeClusterUpgradeSpecs) { // not required
		return nil
	}

	for i := 0; i < len(m.NsxtEdgeClusterUpgradeSpecs); i++ {
		if swag.IsZero(m.NsxtEdgeClusterUpgradeSpecs[i]) { // not required
			continue
		}

		if m.NsxtEdgeClusterUpgradeSpecs[i] != nil {
			if err := m.NsxtEdgeClusterUpgradeSpecs[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("nsxtEdgeClusterUpgradeSpecs" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("nsxtEdgeClusterUpgradeSpecs" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *NsxtUpgradeUserInputSpec) validateNsxtHostClusterUpgradeSpecs(formats strfmt.Registry) error {
	if swag.IsZero(m.NsxtHostClusterUpgradeSpecs) { // not required
		return nil
	}

	for i := 0; i < len(m.NsxtHostClusterUpgradeSpecs); i++ {
		if swag.IsZero(m.NsxtHostClusterUpgradeSpecs[i]) { // not required
			continue
		}

		if m.NsxtHostClusterUpgradeSpecs[i] != nil {
			if err := m.NsxtHostClusterUpgradeSpecs[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("nsxtHostClusterUpgradeSpecs" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("nsxtHostClusterUpgradeSpecs" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *NsxtUpgradeUserInputSpec) validateNsxtUpgradeOptions(formats strfmt.Registry) error {
	if swag.IsZero(m.NsxtUpgradeOptions) { // not required
		return nil
	}

	if m.NsxtUpgradeOptions != nil {
		if err := m.NsxtUpgradeOptions.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("nsxtUpgradeOptions")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("nsxtUpgradeOptions")
			}
			return err
		}
	}

	return nil
}

// ContextValidate validate this nsxt upgrade user input spec based on the context it is used
func (m *NsxtUpgradeUserInputSpec) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := m.contextValidateNsxtEdgeClusterUpgradeSpecs(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateNsxtHostClusterUpgradeSpecs(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateNsxtUpgradeOptions(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *NsxtUpgradeUserInputSpec) contextValidateNsxtEdgeClusterUpgradeSpecs(ctx context.Context, formats strfmt.Registry) error {

	for i := 0; i < len(m.NsxtEdgeClusterUpgradeSpecs); i++ {

		if m.NsxtEdgeClusterUpgradeSpecs[i] != nil {
			if err := m.NsxtEdgeClusterUpgradeSpecs[i].ContextValidate(ctx, formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("nsxtEdgeClusterUpgradeSpecs" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("nsxtEdgeClusterUpgradeSpecs" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *NsxtUpgradeUserInputSpec) contextValidateNsxtHostClusterUpgradeSpecs(ctx context.Context, formats strfmt.Registry) error {

	for i := 0; i < len(m.NsxtHostClusterUpgradeSpecs); i++ {

		if m.NsxtHostClusterUpgradeSpecs[i] != nil {
			if err := m.NsxtHostClusterUpgradeSpecs[i].ContextValidate(ctx, formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("nsxtHostClusterUpgradeSpecs" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("nsxtHostClusterUpgradeSpecs" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *NsxtUpgradeUserInputSpec) contextValidateNsxtUpgradeOptions(ctx context.Context, formats strfmt.Registry) error {

	if m.NsxtUpgradeOptions != nil {
		if err := m.NsxtUpgradeOptions.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("nsxtUpgradeOptions")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("nsxtUpgradeOptions")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (m *NsxtUpgradeUserInputSpec) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *NsxtUpgradeUserInputSpec) UnmarshalBinary(b []byte) error {
	var res NsxtUpgradeUserInputSpec
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
