// Code generated by go-swagger; DO NOT EDIT.

// Copyright 2023 VMware, Inc.
// SPDX-License-Identifier: BSD-2-Clause

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"

	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
)

// OidcInfo Represents Identity management configuration when the provider is based on OIDC
//
// swagger:model OidcInfo
type OidcInfo struct {

	// Authentication endpoint of the Identity Provider
	AuthEndpoint string `json:"authEndpoint,omitempty"`

	// Authentication method used by the Identity Provider
	// Example: One among: CLIENT_SECRET_BASIC, CLIENT_SECRET_POST, CLIENT_SECRET_JWT, PRIVATE_KEY_JWT
	AuthMethod string `json:"authMethod,omitempty"`

	// Client identifier to connect to the Identity Provider
	ClientID string `json:"clientId,omitempty"`

	// Endpoint to retrieve the Identity Provider metadata
	DiscoveryEndpoint string `json:"discoveryEndpoint,omitempty"`

	// The Identity Provider namespace. It is used to validate the issuer in the acquired OAuth2 token
	Issuer string `json:"issuer,omitempty"`

	// The endpoint to use for terminating the user's session at the Identity Provider
	LogoutEndpoint string `json:"logoutEndpoint,omitempty"`

	// Endpoint to retrieve the Identity Provider public key for validation
	PublicKeyURI string `json:"publicKeyUri,omitempty"`

	// Token endpoint of the Identity Provider
	TokenEndpoint string `json:"tokenEndpoint,omitempty"`
}

// Validate validates this oidc info
func (m *OidcInfo) Validate(formats strfmt.Registry) error {
	return nil
}

// ContextValidate validates this oidc info based on context it is used
func (m *OidcInfo) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (m *OidcInfo) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *OidcInfo) UnmarshalBinary(b []byte) error {
	var res OidcInfo
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
