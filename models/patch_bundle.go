// Code generated by go-swagger; DO NOT EDIT.

// Copyright Â© 2023 VMware, Inc. All Rights Reserved.
// Code licenced under: BSD-2

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// PatchBundle Model for patch bundle in a release
//
// swagger:model PatchBundle
type PatchBundle struct {

	// Bundle elements of the patch bundle
	// Required: true
	BundleElements []string `json:"bundleElements"`

	// Bundle ID of the patch bundle
	// Required: true
	BundleID *string `json:"bundleId"`

	// Bundle type of the patch bundle
	// Required: true
	BundleType *string `json:"bundleType"`

	// Minimum VCF version that this patch bundle can be directly applied on
	// Required: true
	CumulativeFromVcfVersion *string `json:"cumulativeFromVcfVersion"`
}

// Validate validates this patch bundle
func (m *PatchBundle) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateBundleElements(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateBundleID(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateBundleType(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateCumulativeFromVcfVersion(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *PatchBundle) validateBundleElements(formats strfmt.Registry) error {

	if err := validate.Required("bundleElements", "body", m.BundleElements); err != nil {
		return err
	}

	return nil
}

func (m *PatchBundle) validateBundleID(formats strfmt.Registry) error {

	if err := validate.Required("bundleId", "body", m.BundleID); err != nil {
		return err
	}

	return nil
}

func (m *PatchBundle) validateBundleType(formats strfmt.Registry) error {

	if err := validate.Required("bundleType", "body", m.BundleType); err != nil {
		return err
	}

	return nil
}

func (m *PatchBundle) validateCumulativeFromVcfVersion(formats strfmt.Registry) error {

	if err := validate.Required("cumulativeFromVcfVersion", "body", m.CumulativeFromVcfVersion); err != nil {
		return err
	}

	return nil
}

// ContextValidate validates this patch bundle based on context it is used
func (m *PatchBundle) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (m *PatchBundle) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *PatchBundle) UnmarshalBinary(b []byte) error {
	var res PatchBundle
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
