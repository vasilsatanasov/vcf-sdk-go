// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// PscSpec Spec contains parameters for deployment/configuration of Platform Services Controller
//
// swagger:model PscSpec
type PscSpec struct {

	// Admin user sso passwordPassword needs to be a strong password with at least one Uppercase alphabet, one lowercase alphabet, one digit and one special character specified in braces [!$%^] and 8-20 characters in length,and 3 maximum identical adjacent characters!
	// Required: true
	// Max Length: 20
	// Min Length: 8
	AdminUserSsoPassword *string `json:"adminUserSsoPassword"`

	// PSC Name
	PscID string `json:"pscId,omitempty"`

	// PSC SSO Domain
	PscSsoSpec *PscSsoSpec `json:"pscSsoSpec,omitempty"`
}

// Validate validates this psc spec
func (m *PscSpec) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateAdminUserSsoPassword(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validatePscSsoSpec(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *PscSpec) validateAdminUserSsoPassword(formats strfmt.Registry) error {

	if err := validate.Required("adminUserSsoPassword", "body", m.AdminUserSsoPassword); err != nil {
		return err
	}

	if err := validate.MinLength("adminUserSsoPassword", "body", *m.AdminUserSsoPassword, 8); err != nil {
		return err
	}

	if err := validate.MaxLength("adminUserSsoPassword", "body", *m.AdminUserSsoPassword, 20); err != nil {
		return err
	}

	return nil
}

func (m *PscSpec) validatePscSsoSpec(formats strfmt.Registry) error {
	if swag.IsZero(m.PscSsoSpec) { // not required
		return nil
	}

	if m.PscSsoSpec != nil {
		if err := m.PscSsoSpec.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("pscSsoSpec")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("pscSsoSpec")
			}
			return err
		}
	}

	return nil
}

// ContextValidate validate this psc spec based on the context it is used
func (m *PscSpec) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := m.contextValidatePscSsoSpec(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *PscSpec) contextValidatePscSsoSpec(ctx context.Context, formats strfmt.Registry) error {

	if m.PscSsoSpec != nil {
		if err := m.PscSsoSpec.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("pscSsoSpec")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("pscSsoSpec")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (m *PscSpec) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *PscSpec) UnmarshalBinary(b []byte) error {
	var res PscSpec
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
