// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// SddcManagerSpec Client input parameters for SDDC Manager Virtual Machine
//
// swagger:model SddcManagerSpec
type SddcManagerSpec struct {

	// SDDC Manager Hostname
	// Required: true
	// Max Length: 63
	// Min Length: 3
	Hostname *string `json:"hostname"`

	// SDDC Manager ip address
	// Required: true
	// Max Length: 15
	// Min Length: 7
	IPAddress *string `json:"ipAddress"`

	// SDDC Manager license key
	LicenseKey string `json:"licenseKey,omitempty"`

	// The local account is a built-in admin account in VCF that can be used in emergency scenarios. The password of this account must be at least 12 characters long. It also must contain at-least 1 uppercase, 1 lowercase, 1 special character specified in braces [!%@$^#?] and 1 digit. In addition, a character cannot be repeated more than 3 times consecutively.
	LocalUserPassword string `json:"localUserPassword,omitempty"`

	// SDDC Manager netmask
	Netmask string `json:"netmask,omitempty"`

	// Root user credentials for the SDDC Manager VM, UserName must be root. Password needs to be a strong password with at least one alphabet and one special character and at least 8 characters in length.
	// Required: true
	RootUserCredentials *SddcCredentials `json:"rootUserCredentials"`

	// Second user credentials for the SDDC Manager VM, UserName must be vcf. Password needs to be a strong password with at least one alphabet and one special character and at least 8 characters in length.
	// Required: true
	SecondUserCredentials *SddcCredentials `json:"secondUserCredentials"`
}

// Validate validates this sddc manager spec
func (m *SddcManagerSpec) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateHostname(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateIPAddress(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateRootUserCredentials(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateSecondUserCredentials(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *SddcManagerSpec) validateHostname(formats strfmt.Registry) error {

	if err := validate.Required("hostname", "body", m.Hostname); err != nil {
		return err
	}

	if err := validate.MinLength("hostname", "body", *m.Hostname, 3); err != nil {
		return err
	}

	if err := validate.MaxLength("hostname", "body", *m.Hostname, 63); err != nil {
		return err
	}

	return nil
}

func (m *SddcManagerSpec) validateIPAddress(formats strfmt.Registry) error {

	if err := validate.Required("ipAddress", "body", m.IPAddress); err != nil {
		return err
	}

	if err := validate.MinLength("ipAddress", "body", *m.IPAddress, 7); err != nil {
		return err
	}

	if err := validate.MaxLength("ipAddress", "body", *m.IPAddress, 15); err != nil {
		return err
	}

	return nil
}

func (m *SddcManagerSpec) validateRootUserCredentials(formats strfmt.Registry) error {

	if err := validate.Required("rootUserCredentials", "body", m.RootUserCredentials); err != nil {
		return err
	}

	if m.RootUserCredentials != nil {
		if err := m.RootUserCredentials.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("rootUserCredentials")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("rootUserCredentials")
			}
			return err
		}
	}

	return nil
}

func (m *SddcManagerSpec) validateSecondUserCredentials(formats strfmt.Registry) error {

	if err := validate.Required("secondUserCredentials", "body", m.SecondUserCredentials); err != nil {
		return err
	}

	if m.SecondUserCredentials != nil {
		if err := m.SecondUserCredentials.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("secondUserCredentials")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("secondUserCredentials")
			}
			return err
		}
	}

	return nil
}

// ContextValidate validate this sddc manager spec based on the context it is used
func (m *SddcManagerSpec) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := m.contextValidateRootUserCredentials(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateSecondUserCredentials(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *SddcManagerSpec) contextValidateRootUserCredentials(ctx context.Context, formats strfmt.Registry) error {

	if m.RootUserCredentials != nil {
		if err := m.RootUserCredentials.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("rootUserCredentials")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("rootUserCredentials")
			}
			return err
		}
	}

	return nil
}

func (m *SddcManagerSpec) contextValidateSecondUserCredentials(ctx context.Context, formats strfmt.Registry) error {

	if m.SecondUserCredentials != nil {
		if err := m.SecondUserCredentials.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("secondUserCredentials")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("secondUserCredentials")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (m *SddcManagerSpec) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *SddcManagerSpec) UnmarshalBinary(b []byte) error {
	var res SddcManagerSpec
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
