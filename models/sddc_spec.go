// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"strconv"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// SddcSpec Spec contains parameters for creating/bringing up an SDDC
//
// swagger:model SddcSpec
type SddcSpec struct {

	// Enable VCF Customer Experience Improvement Program
	// Example: true
	CeipEnabled bool `json:"ceipEnabled,omitempty"`

	// Passphrase for the vCenter / NSX certificates
	CertificatesPassphrase string `json:"certificatesPassphrase,omitempty"`

	// Cluster Spec
	// Required: true
	ClusterSpec *SddcClusterSpec `json:"clusterSpec"`

	// DNS Spec
	// Required: true
	DNSSpec *DNSSpec `json:"dnsSpec"`

	// The version of the distributed virtual switches to be used
	// Example: One among:7.0.0, 7.0.2, 7.0.3
	DvSwitchVersion string `json:"dvSwitchVersion,omitempty"`

	// List of Dvs Specs
	// Required: true
	DvsSpecs []*DvsSpec `json:"dvsSpecs"`

	// License for the ESXi hosts
	EsxLicense string `json:"esxLicense,omitempty"`

	// Components to be excluded
	// Example: One among:NSX, VSAN, EsxThumbprintValidation, CEIP, Backup
	ExcludedComponents []string `json:"excludedComponents"`

	// Enable Federal Information Processing Standards
	// Example: true
	FipsEnabled bool `json:"fipsEnabled,omitempty"`

	// List of Host Specs
	// Required: true
	HostSpecs []*SddcHostSpec `json:"hostSpecs"`

	// A String identifying the network pool associated with the management domain
	ManagementPoolName string `json:"managementPoolName,omitempty"`

	// List of Network Specs
	// Required: true
	NetworkSpecs []*SddcNetworkSpec `json:"networkSpecs"`

	// NSX-T Spec
	NsxtSpec *SddcNsxtSpec `json:"nsxtSpec,omitempty"`

	// List of NTP servers
	// Required: true
	NtpServers []string `json:"ntpServers"`

	// PSC VM spec
	PscSpecs []*PscSpec `json:"pscSpecs"`

	// Remote site spec.
	// This field is deprecated and will be removed in a future release.
	RemoteSiteSpec *RemoteSiteSpec `json:"remoteSiteSpec,omitempty"`

	// Client string that identifies an SDDC by name or instance name. Used for management domain name. Can contain only letters, numbers and the following symbols: '-'.
	// Example: sfo01-m01
	// Required: true
	// Max Length: 20
	// Min Length: 3
	SddcID *string `json:"sddcId"`

	// SDDC Manager Virtual Machine spec
	SddcManagerSpec *SddcManagerSpec `json:"sddcManagerSpec,omitempty"`

	// Security spec
	SecuritySpec *SecuritySpec `json:"securitySpec,omitempty"`

	// Flag indicating whether cleanup vSAN should be ran
	// Example: false
	ShouldCleanupVsan bool `json:"shouldCleanupVsan,omitempty"`

	// Skip ESXi thumbprint validation
	SkipEsxThumbprintValidation bool `json:"skipEsxThumbprintValidation,omitempty"`

	// Skip VSAN / VMOTION networks gateway connectivity validation
	SkipGatewayPingValidation bool `json:"skipGatewayPingValidation,omitempty"`

	// Name of the task to execute
	// Example: workflowconfig/workflowspec-ems.json
	// Required: true
	TaskName *string `json:"taskName"`

	// vCenter Spec
	// Required: true
	VcenterSpec *SddcVcenterSpec `json:"vcenterSpec"`

	// VSAN Spec
	VsanSpec *VsanSpec `json:"vsanSpec,omitempty"`

	// VxManager Spec
	VxManagerSpec *VxManagerSpec `json:"vxManagerSpec,omitempty"`
}

// Validate validates this sddc spec
func (m *SddcSpec) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateClusterSpec(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateDNSSpec(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateDvsSpecs(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateHostSpecs(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateNetworkSpecs(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateNsxtSpec(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateNtpServers(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validatePscSpecs(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateRemoteSiteSpec(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateSddcID(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateSddcManagerSpec(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateSecuritySpec(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateTaskName(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateVcenterSpec(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateVsanSpec(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateVxManagerSpec(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *SddcSpec) validateClusterSpec(formats strfmt.Registry) error {

	if err := validate.Required("clusterSpec", "body", m.ClusterSpec); err != nil {
		return err
	}

	if m.ClusterSpec != nil {
		if err := m.ClusterSpec.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("clusterSpec")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("clusterSpec")
			}
			return err
		}
	}

	return nil
}

func (m *SddcSpec) validateDNSSpec(formats strfmt.Registry) error {

	if err := validate.Required("dnsSpec", "body", m.DNSSpec); err != nil {
		return err
	}

	if m.DNSSpec != nil {
		if err := m.DNSSpec.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("dnsSpec")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("dnsSpec")
			}
			return err
		}
	}

	return nil
}

func (m *SddcSpec) validateDvsSpecs(formats strfmt.Registry) error {

	if err := validate.Required("dvsSpecs", "body", m.DvsSpecs); err != nil {
		return err
	}

	for i := 0; i < len(m.DvsSpecs); i++ {
		if swag.IsZero(m.DvsSpecs[i]) { // not required
			continue
		}

		if m.DvsSpecs[i] != nil {
			if err := m.DvsSpecs[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("dvsSpecs" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("dvsSpecs" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *SddcSpec) validateHostSpecs(formats strfmt.Registry) error {

	if err := validate.Required("hostSpecs", "body", m.HostSpecs); err != nil {
		return err
	}

	for i := 0; i < len(m.HostSpecs); i++ {
		if swag.IsZero(m.HostSpecs[i]) { // not required
			continue
		}

		if m.HostSpecs[i] != nil {
			if err := m.HostSpecs[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("hostSpecs" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("hostSpecs" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *SddcSpec) validateNetworkSpecs(formats strfmt.Registry) error {

	if err := validate.Required("networkSpecs", "body", m.NetworkSpecs); err != nil {
		return err
	}

	for i := 0; i < len(m.NetworkSpecs); i++ {
		if swag.IsZero(m.NetworkSpecs[i]) { // not required
			continue
		}

		if m.NetworkSpecs[i] != nil {
			if err := m.NetworkSpecs[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("networkSpecs" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("networkSpecs" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *SddcSpec) validateNsxtSpec(formats strfmt.Registry) error {
	if swag.IsZero(m.NsxtSpec) { // not required
		return nil
	}

	if m.NsxtSpec != nil {
		if err := m.NsxtSpec.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("nsxtSpec")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("nsxtSpec")
			}
			return err
		}
	}

	return nil
}

func (m *SddcSpec) validateNtpServers(formats strfmt.Registry) error {

	if err := validate.Required("ntpServers", "body", m.NtpServers); err != nil {
		return err
	}

	return nil
}

func (m *SddcSpec) validatePscSpecs(formats strfmt.Registry) error {
	if swag.IsZero(m.PscSpecs) { // not required
		return nil
	}

	for i := 0; i < len(m.PscSpecs); i++ {
		if swag.IsZero(m.PscSpecs[i]) { // not required
			continue
		}

		if m.PscSpecs[i] != nil {
			if err := m.PscSpecs[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("pscSpecs" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("pscSpecs" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *SddcSpec) validateRemoteSiteSpec(formats strfmt.Registry) error {
	if swag.IsZero(m.RemoteSiteSpec) { // not required
		return nil
	}

	if m.RemoteSiteSpec != nil {
		if err := m.RemoteSiteSpec.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("remoteSiteSpec")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("remoteSiteSpec")
			}
			return err
		}
	}

	return nil
}

func (m *SddcSpec) validateSddcID(formats strfmt.Registry) error {

	if err := validate.Required("sddcId", "body", m.SddcID); err != nil {
		return err
	}

	if err := validate.MinLength("sddcId", "body", *m.SddcID, 3); err != nil {
		return err
	}

	if err := validate.MaxLength("sddcId", "body", *m.SddcID, 20); err != nil {
		return err
	}

	return nil
}

func (m *SddcSpec) validateSddcManagerSpec(formats strfmt.Registry) error {
	if swag.IsZero(m.SddcManagerSpec) { // not required
		return nil
	}

	if m.SddcManagerSpec != nil {
		if err := m.SddcManagerSpec.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("sddcManagerSpec")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("sddcManagerSpec")
			}
			return err
		}
	}

	return nil
}

func (m *SddcSpec) validateSecuritySpec(formats strfmt.Registry) error {
	if swag.IsZero(m.SecuritySpec) { // not required
		return nil
	}

	if m.SecuritySpec != nil {
		if err := m.SecuritySpec.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("securitySpec")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("securitySpec")
			}
			return err
		}
	}

	return nil
}

func (m *SddcSpec) validateTaskName(formats strfmt.Registry) error {

	if err := validate.Required("taskName", "body", m.TaskName); err != nil {
		return err
	}

	return nil
}

func (m *SddcSpec) validateVcenterSpec(formats strfmt.Registry) error {

	if err := validate.Required("vcenterSpec", "body", m.VcenterSpec); err != nil {
		return err
	}

	if m.VcenterSpec != nil {
		if err := m.VcenterSpec.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("vcenterSpec")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("vcenterSpec")
			}
			return err
		}
	}

	return nil
}

func (m *SddcSpec) validateVsanSpec(formats strfmt.Registry) error {
	if swag.IsZero(m.VsanSpec) { // not required
		return nil
	}

	if m.VsanSpec != nil {
		if err := m.VsanSpec.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("vsanSpec")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("vsanSpec")
			}
			return err
		}
	}

	return nil
}

func (m *SddcSpec) validateVxManagerSpec(formats strfmt.Registry) error {
	if swag.IsZero(m.VxManagerSpec) { // not required
		return nil
	}

	if m.VxManagerSpec != nil {
		if err := m.VxManagerSpec.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("vxManagerSpec")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("vxManagerSpec")
			}
			return err
		}
	}

	return nil
}

// ContextValidate validate this sddc spec based on the context it is used
func (m *SddcSpec) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := m.contextValidateClusterSpec(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateDNSSpec(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateDvsSpecs(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateHostSpecs(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateNetworkSpecs(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateNsxtSpec(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidatePscSpecs(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateRemoteSiteSpec(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateSddcManagerSpec(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateSecuritySpec(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateVcenterSpec(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateVsanSpec(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateVxManagerSpec(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *SddcSpec) contextValidateClusterSpec(ctx context.Context, formats strfmt.Registry) error {

	if m.ClusterSpec != nil {
		if err := m.ClusterSpec.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("clusterSpec")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("clusterSpec")
			}
			return err
		}
	}

	return nil
}

func (m *SddcSpec) contextValidateDNSSpec(ctx context.Context, formats strfmt.Registry) error {

	if m.DNSSpec != nil {
		if err := m.DNSSpec.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("dnsSpec")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("dnsSpec")
			}
			return err
		}
	}

	return nil
}

func (m *SddcSpec) contextValidateDvsSpecs(ctx context.Context, formats strfmt.Registry) error {

	for i := 0; i < len(m.DvsSpecs); i++ {

		if m.DvsSpecs[i] != nil {
			if err := m.DvsSpecs[i].ContextValidate(ctx, formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("dvsSpecs" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("dvsSpecs" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *SddcSpec) contextValidateHostSpecs(ctx context.Context, formats strfmt.Registry) error {

	for i := 0; i < len(m.HostSpecs); i++ {

		if m.HostSpecs[i] != nil {
			if err := m.HostSpecs[i].ContextValidate(ctx, formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("hostSpecs" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("hostSpecs" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *SddcSpec) contextValidateNetworkSpecs(ctx context.Context, formats strfmt.Registry) error {

	for i := 0; i < len(m.NetworkSpecs); i++ {

		if m.NetworkSpecs[i] != nil {
			if err := m.NetworkSpecs[i].ContextValidate(ctx, formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("networkSpecs" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("networkSpecs" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *SddcSpec) contextValidateNsxtSpec(ctx context.Context, formats strfmt.Registry) error {

	if m.NsxtSpec != nil {
		if err := m.NsxtSpec.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("nsxtSpec")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("nsxtSpec")
			}
			return err
		}
	}

	return nil
}

func (m *SddcSpec) contextValidatePscSpecs(ctx context.Context, formats strfmt.Registry) error {

	for i := 0; i < len(m.PscSpecs); i++ {

		if m.PscSpecs[i] != nil {
			if err := m.PscSpecs[i].ContextValidate(ctx, formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("pscSpecs" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("pscSpecs" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *SddcSpec) contextValidateRemoteSiteSpec(ctx context.Context, formats strfmt.Registry) error {

	if m.RemoteSiteSpec != nil {
		if err := m.RemoteSiteSpec.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("remoteSiteSpec")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("remoteSiteSpec")
			}
			return err
		}
	}

	return nil
}

func (m *SddcSpec) contextValidateSddcManagerSpec(ctx context.Context, formats strfmt.Registry) error {

	if m.SddcManagerSpec != nil {
		if err := m.SddcManagerSpec.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("sddcManagerSpec")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("sddcManagerSpec")
			}
			return err
		}
	}

	return nil
}

func (m *SddcSpec) contextValidateSecuritySpec(ctx context.Context, formats strfmt.Registry) error {

	if m.SecuritySpec != nil {
		if err := m.SecuritySpec.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("securitySpec")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("securitySpec")
			}
			return err
		}
	}

	return nil
}

func (m *SddcSpec) contextValidateVcenterSpec(ctx context.Context, formats strfmt.Registry) error {

	if m.VcenterSpec != nil {
		if err := m.VcenterSpec.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("vcenterSpec")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("vcenterSpec")
			}
			return err
		}
	}

	return nil
}

func (m *SddcSpec) contextValidateVsanSpec(ctx context.Context, formats strfmt.Registry) error {

	if m.VsanSpec != nil {
		if err := m.VsanSpec.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("vsanSpec")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("vsanSpec")
			}
			return err
		}
	}

	return nil
}

func (m *SddcSpec) contextValidateVxManagerSpec(ctx context.Context, formats strfmt.Registry) error {

	if m.VxManagerSpec != nil {
		if err := m.VxManagerSpec.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("vxManagerSpec")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("vxManagerSpec")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (m *SddcSpec) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *SddcSpec) UnmarshalBinary(b []byte) error {
	var res SddcSpec
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
