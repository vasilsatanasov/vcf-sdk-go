// Code generated by go-swagger; DO NOT EDIT.

// Copyright Â© 2023 VMware, Inc. All Rights Reserved.
// Code licenced under: BSD-2

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// SourceDetails Details of the Identity Source
//
// swagger:model SourceDetails
type SourceDetails struct {

	// SSL certificate chain in base64 encoding. This field can be unset only, if all the active directory server endpoints use the LDAP (not LDAPS) protocol
	CertChain []string `json:"certChain"`

	// Base distinguished name for groups
	// Required: true
	GroupsBaseDn *string `json:"groupsBaseDn"`

	// Active directory server endpoints. At least one active directory server endpoint must be set
	// Required: true
	ServerEndpoints []string `json:"serverEndpoints"`

	// Base distinguished name for users
	// Required: true
	UsersBaseDn *string `json:"usersBaseDn"`
}

// Validate validates this source details
func (m *SourceDetails) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateGroupsBaseDn(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateServerEndpoints(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateUsersBaseDn(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *SourceDetails) validateGroupsBaseDn(formats strfmt.Registry) error {

	if err := validate.Required("groupsBaseDn", "body", m.GroupsBaseDn); err != nil {
		return err
	}

	return nil
}

func (m *SourceDetails) validateServerEndpoints(formats strfmt.Registry) error {

	if err := validate.Required("serverEndpoints", "body", m.ServerEndpoints); err != nil {
		return err
	}

	return nil
}

func (m *SourceDetails) validateUsersBaseDn(formats strfmt.Registry) error {

	if err := validate.Required("usersBaseDn", "body", m.UsersBaseDn); err != nil {
		return err
	}

	return nil
}

// ContextValidate validates this source details based on context it is used
func (m *SourceDetails) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (m *SourceDetails) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *SourceDetails) UnmarshalBinary(b []byte) error {
	var res SourceDetails
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
