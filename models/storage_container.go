// Code generated by go-swagger; DO NOT EDIT.

// Copyright 2023 VMware, Inc.
// SPDX-License-Identifier: BSD-2-Clause

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// StorageContainer Storage container representation
//
// swagger:model StorageContainer
type StorageContainer struct {

	// ID of the cluster which is using the storage container
	ClusterID string `json:"clusterId,omitempty"`

	// ID of the storage container
	ID string `json:"id,omitempty"`

	// Name of the storage container
	// Required: true
	Name *string `json:"name"`

	// Storage protocol type
	// Example: One among: ISCSI, FC, NFS
	// Required: true
	ProtocolType *string `json:"protocolType"`
}

// Validate validates this storage container
func (m *StorageContainer) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateName(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateProtocolType(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *StorageContainer) validateName(formats strfmt.Registry) error {

	if err := validate.Required("name", "body", m.Name); err != nil {
		return err
	}

	return nil
}

func (m *StorageContainer) validateProtocolType(formats strfmt.Registry) error {

	if err := validate.Required("protocolType", "body", m.ProtocolType); err != nil {
		return err
	}

	return nil
}

// ContextValidate validates this storage container based on context it is used
func (m *StorageContainer) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (m *StorageContainer) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *StorageContainer) UnmarshalBinary(b []byte) error {
	var res StorageContainer
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
