// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"

	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
)

// SupportBundle support bundle
//
// swagger:model SupportBundle
type SupportBundle struct {

	// Indicate if bundle is available in file system.
	BundleAvailable string `json:"bundleAvailable,omitempty"`

	// Name of the Support Bundle.
	BundleName string `json:"bundleName,omitempty"`

	// CompletionTimestamp.
	CompletionTimestamp string `json:"completionTimestamp,omitempty"`

	// CreationTimestamp.
	CreationTimestamp string `json:"creationTimestamp,omitempty"`

	// Name of the Operation.
	Description string `json:"description,omitempty"`

	// Id of the Support Bundle task.
	ID string `json:"id,omitempty"`

	// Support Bundle Status.
	// Example: One among: IN_PROGRESS, PENDING, COMPLETED_WITH_SUCCESS, COMPLETED_WITH_FAILURE
	Status string `json:"status,omitempty"`
}

// Validate validates this support bundle
func (m *SupportBundle) Validate(formats strfmt.Registry) error {
	return nil
}

// ContextValidate validates this support bundle based on context it is used
func (m *SupportBundle) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (m *SupportBundle) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *SupportBundle) UnmarshalBinary(b []byte) error {
	var res SupportBundle
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
