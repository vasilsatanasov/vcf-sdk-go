// Code generated by go-swagger; DO NOT EDIT.

// Copyright 2023 VMware, Inc.
// SPDX-License-Identifier: BSD-2-Clause

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// VasaProviderSpec This specification contains cluster storage configuration for vVol
//
// swagger:model VasaProviderSpec
type VasaProviderSpec struct {

	// UUID of the VASA storage container
	// Required: true
	StorageContainerID *string `json:"storageContainerId"`

	// Type of the VASA storage protocol
	// Example: One among: ISCSI, NFS, FC
	// Required: true
	StorageProtocolType *string `json:"storageProtocolType"`

	// UUID of the VASA storage user
	// Required: true
	UserID *string `json:"userId"`

	// UUID of the VASA storage provider
	// Required: true
	VasaProviderID *string `json:"vasaProviderId"`
}

// Validate validates this vasa provider spec
func (m *VasaProviderSpec) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateStorageContainerID(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateStorageProtocolType(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateUserID(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateVasaProviderID(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *VasaProviderSpec) validateStorageContainerID(formats strfmt.Registry) error {

	if err := validate.Required("storageContainerId", "body", m.StorageContainerID); err != nil {
		return err
	}

	return nil
}

func (m *VasaProviderSpec) validateStorageProtocolType(formats strfmt.Registry) error {

	if err := validate.Required("storageProtocolType", "body", m.StorageProtocolType); err != nil {
		return err
	}

	return nil
}

func (m *VasaProviderSpec) validateUserID(formats strfmt.Registry) error {

	if err := validate.Required("userId", "body", m.UserID); err != nil {
		return err
	}

	return nil
}

func (m *VasaProviderSpec) validateVasaProviderID(formats strfmt.Registry) error {

	if err := validate.Required("vasaProviderId", "body", m.VasaProviderID); err != nil {
		return err
	}

	return nil
}

// ContextValidate validates this vasa provider spec based on context it is used
func (m *VasaProviderSpec) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (m *VasaProviderSpec) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *VasaProviderSpec) UnmarshalBinary(b []byte) error {
	var res VasaProviderSpec
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
