// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"encoding/json"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// VropsNode Spec contains information for a vRealize product node
//
// swagger:model VropsNode
type VropsNode struct {

	// The Fully Qualified Domain Name for the vRealize node (virtual appliance)
	// Example: vrealize.node.vrack.vsphere.local
	// Required: true
	Fqdn *string `json:"fqdn"`

	// The ID of the node
	ID string `json:"id,omitempty"`

	// IP Address of vRealize product appliance
	// Example: 10.0.0.17
	// Required: true
	IPAddress *string `json:"ipAddress"`

	// The password for a root user of vRealize appliance
	Password string `json:"password,omitempty"`

	// The status of the vRealize product node
	// Example: ACTIVE
	// Required: true
	Status *string `json:"status"`

	// The type of the vRealize product node
	// Example: MASTER, REPLICA, DATA, REMOTE_COLLECTOR, WORKER
	// Required: true
	// Enum: [MASTER REPLICA DATA REMOTE_COLLECTOR WORKER]
	Type *string `json:"type"`

	// The username for a root user of vRealize appliance
	// Example: user
	Username string `json:"username,omitempty"`
}

// Validate validates this vrops node
func (m *VropsNode) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateFqdn(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateIPAddress(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateStatus(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateType(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *VropsNode) validateFqdn(formats strfmt.Registry) error {

	if err := validate.Required("fqdn", "body", m.Fqdn); err != nil {
		return err
	}

	return nil
}

func (m *VropsNode) validateIPAddress(formats strfmt.Registry) error {

	if err := validate.Required("ipAddress", "body", m.IPAddress); err != nil {
		return err
	}

	return nil
}

func (m *VropsNode) validateStatus(formats strfmt.Registry) error {

	if err := validate.Required("status", "body", m.Status); err != nil {
		return err
	}

	return nil
}

var vropsNodeTypeTypePropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["MASTER","REPLICA","DATA","REMOTE_COLLECTOR","WORKER"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		vropsNodeTypeTypePropEnum = append(vropsNodeTypeTypePropEnum, v)
	}
}

const (

	// VropsNodeTypeMASTER captures enum value "MASTER"
	VropsNodeTypeMASTER string = "MASTER"

	// VropsNodeTypeREPLICA captures enum value "REPLICA"
	VropsNodeTypeREPLICA string = "REPLICA"

	// VropsNodeTypeDATA captures enum value "DATA"
	VropsNodeTypeDATA string = "DATA"

	// VropsNodeTypeREMOTECOLLECTOR captures enum value "REMOTE_COLLECTOR"
	VropsNodeTypeREMOTECOLLECTOR string = "REMOTE_COLLECTOR"

	// VropsNodeTypeWORKER captures enum value "WORKER"
	VropsNodeTypeWORKER string = "WORKER"
)

// prop value enum
func (m *VropsNode) validateTypeEnum(path, location string, value string) error {
	if err := validate.EnumCase(path, location, value, vropsNodeTypeTypePropEnum, true); err != nil {
		return err
	}
	return nil
}

func (m *VropsNode) validateType(formats strfmt.Registry) error {

	if err := validate.Required("type", "body", m.Type); err != nil {
		return err
	}

	// value enum
	if err := m.validateTypeEnum("type", "body", *m.Type); err != nil {
		return err
	}

	return nil
}

// ContextValidate validates this vrops node based on context it is used
func (m *VropsNode) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (m *VropsNode) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *VropsNode) UnmarshalBinary(b []byte) error {
	var res VropsNode
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
