// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// VsanDatastoreSpec This specification contains cluster storage configuration for vSAN
//
// swagger:model VsanDatastoreSpec
type VsanDatastoreSpec struct {

	// Datastore name used for cluster creation
	// Required: true
	DatastoreName *string `json:"datastoreName"`

	// Enable vSAN deduplication and compression
	DedupAndCompressionEnabled bool `json:"dedupAndCompressionEnabled,omitempty"`

	// Number of vSphere host failures to tolerate in the vSAN cluster
	// Required: true
	FailuresToTolerate *int32 `json:"failuresToTolerate"`

	// License key for the vSAN data store to be applied in vCenter
	LicenseKey string `json:"licenseKey,omitempty"`
}

// Validate validates this vsan datastore spec
func (m *VsanDatastoreSpec) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateDatastoreName(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateFailuresToTolerate(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *VsanDatastoreSpec) validateDatastoreName(formats strfmt.Registry) error {

	if err := validate.Required("datastoreName", "body", m.DatastoreName); err != nil {
		return err
	}

	return nil
}

func (m *VsanDatastoreSpec) validateFailuresToTolerate(formats strfmt.Registry) error {

	if err := validate.Required("failuresToTolerate", "body", m.FailuresToTolerate); err != nil {
		return err
	}

	return nil
}

// ContextValidate validates this vsan datastore spec based on context it is used
func (m *VsanDatastoreSpec) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (m *VsanDatastoreSpec) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *VsanDatastoreSpec) UnmarshalBinary(b []byte) error {
	var res VsanDatastoreSpec
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
